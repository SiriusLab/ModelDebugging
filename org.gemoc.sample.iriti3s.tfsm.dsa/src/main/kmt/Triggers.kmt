using kermeta::standard::* 
using kermeta::io::StdIO => stdio
using tfsm::*

package tfsm{
	aspect class Tfsm{
		operation __setup() : Void is do 
		  self.__setupAbstractAction()
		  self.__setupConcreteAction()
		end
		
		operation __setupAbstractAction() : Void is do
		    // reset if there is no current state
	        if self.getCurrentState() == void then
	            self.currentState := initialState
	        end
	        if self.ownedClock.timeValue == void then
	           self.ownedClock.timeValue := 0
	        end
        
		end
		
		operation __setupConcreteAction() : Void is do
		  // Call some other language for "real-life" level changes
		end
	}
		
	aspect class Transition{
	    operation __fire() : Void is do
			self.__fireAbstractAction()
			self.__fireConcreteAction()
		end
		
		operation __fireAbstractAction() : Void is do
		  self.source.owningTfsm.currentState := self.target
		end
		
		operation __fireConcreteAction() : Void is do
		   // Call some other language for "real-life" level changes
		end
	}
		
	aspect class TfsmClock{
		operation __tick() : Void is do
			self.__tickAbstractAction()
			self.__tickConcreteAction()
		end
		
		operation __tickAbstractAction() : Void is do
		  self.timeValue := self.timeValue + 1
		end
		
		operation __tickConcreteAction() : Void is do
		  // Call some other language for "real-life" level changes
		end
	}
}