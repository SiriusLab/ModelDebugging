/*
 * ORIGINAL
 * --------
 * $Id:$ 
 * Creation		: June 3, 2012
 * Licence		: EPL 
 * Copyright (c) 2012 Supelec, University of Rennes 1, IRISA & Inria.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors	:
 *     	Computer Science Department, Supelec
 *     	University of Rennes 1, IRISA & Inria
 * Contacts		:
 *     	Cecile.Hardebolle@supelec.fr
 *     	Christophe.Jacquet@supelec.fr
 *     	Frederic.Boulanger@supelec.fr
 *     	Benoit.Combemale@irisa.fr
 *     	Benoit.Baudry@inria.fr
 *
 * PETRINET
 * --------
 *
 * February 2013
 * Florent Latombe <florent.latombe@irit.fr>
 */

// Observables (as in 'getters') which give information on the current state of the system to the MoC. It's the "interface" usable by the MoC.

package petrinet;

require "./petrinetStateDefinition.kmt"
require kermeta

using kermeta::standard
using kermeta::exceptions

/*** Top level element : PetriNet ***/

aspect class PetriNet {
	operation getNodes() : Collection<Node> is do
		result := self.nodes
	end
	
	operation getArcs() : Collection<Arc> is do
		result := self.arcs
	end
	
	operation getName() : String is do
		result := self.name
	end

	method toString() : String is do
		var nodesStrings : Collection<String> init self.nodes.collect{node | node.toString()}
		var arcsStrings : Collection<String> init self.arcs.collect{arc | arc.toString()}
		var nodesToString : String init ""
		nodesStrings.each{nodeString | 
			if nodesToString == "" then
				nodesToString := nodesToString + nodeString
			else
				nodesToString := nodesToString + ", " + nodeString 
			end
		}
		var arcsToString : String init ""
		arcsStrings.each{arcString | 
			if arcsToString == "" then
				arcsToString := arcsToString + arcString
			else
				arcsToString := arcsToString + ", " + arcString 
			end
		}
		result := "PetriNet:=" + self.name + " composed of:"
				+"\n["+nodesToString
				+"]\n["+arcsToString "]"
	end
}

/*** Element : Node, Place, Transition, Arc ***/

aspect abstract class Node {
	operation getName() : String is do
		result := self.name
	end
	
	operation getNet() : PetriNet is do
		result := self.net
	end
	
	operation getOutgoings() : Collection<Arc> is do
		result := self.outgoings
	end
	
	operation getIncomings() : Collection<Arc> is do
		result := self.incomings
	end

	method toString() : String is do
		var s : String
		if self.isKindOf(Place) then
			s := self.asType(Place).toString()
		else if self.isKindOf(Transition) then
				s := self.asType(Transition).toString()
			 else s := self.name
			 end
		end
		result := "<Node>" + s
	end
}

aspect class Place inherits Node{
	operation getMarking() : Integer is do
		result := self.marking
	end

	method toString() : String is do
		result := "Place=" + self.name + "(" + self.marking.toString() + ")"
	end
}

aspect class Transition inherits Node{
	operation getCallTime() : Integer is do
		result := self.callTime
	end

	operation getMinTime() : Integer is do
		result := self.minTime
	end
	
	operation getMaxTime() : Integer is do
		result := self.maxTime
	end

	method toString() : String is do
		result := "Transition=" + self.name + "[" + self.minTime.toString() + "," + self.maxTime.toString() + "]"
	end
}

aspect class Arc {
	operation getTarget() : Node is do
		result := self.target
	end
	
	operation getSource() : Node is do
		result := self.source
	end
	
	operation getWeight() : Integer is do
		result := self.weight
	end
	
	operation getKind() : ArcKind is do
		result := self.kind
	end
	
	operation getNet() : PetriNet is do
		result := self.net
	end
	
	method toString() : String is do
		result := "Arc=" + "[" + self.source.toString() + "->" + self.target.toString() + "]" + "(" + self.weight.toString() + "," + self.kindToString(self.kind) + ")"
	end
}
