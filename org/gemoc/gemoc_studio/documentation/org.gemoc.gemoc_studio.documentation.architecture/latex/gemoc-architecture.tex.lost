
Wed Sep 04 15:57:54 CEST 2013
================================================================================
Start of user code ECL Editor

%End of user code
Start of user code Modhel'XDescription
The purpose of ModHel'X is the modeling of hierarchical heterogeneous models. In order to handle heterogeneous components in a model, ModHel'X relies on a generic meta-model based on black boxes (called blocks) with observable ports (called pins). A ModHel'X model is composed of a structure (blocks with relations between their pins) and a model of computation which implements the rules for combining the behavior of the blocks as observed at their pins.

ModHel'X supports only hierarchical heterogeneity through the use of interface blocks. An interface block is a block used according to an external model of computation, and the behavior of this block is defined by a model which uses an internal model of computation. The interface block, is responsible for adapting the execution semantics between the external and the internal models of computation. This adaptation is decomposed along three axis: transforming input and output data, synchronizing the control (occurrence of events) in both models of computation, and maintaining relations between the time scales inside and outside the interface block.

For modeling the relations between the occurrence of events and the time scales in different models of computation, ModHel'X relies on a time model and a solver for these relations. This time model is called TESL (Tagged Event Specification Language) and is inspired by the Tagged Signal Model by Lee and Sangiovanni, and the CCSL language developed by the AOSTE INRIA team. Contrary to CCSL, TESL and its solver can only construct one execution trace by applying causality relations and constraints on the tags (dates) of events. It has been designed for specifying how to execute an heterogeneous model, while CCSL is more suitable to specify constraints on all possible executions of an heterogeneous model. Thanks to its reduced expressive power with regard to the ordering of events, and to its reduced analysis possibilities, TESL is able to handle constraints on the tags which are associated to event occurrences, which makes it handy and efficient for executing heterogeneous models. It would theoretically be possible to model such relations in CCSL using infinitely fast clocks. There are currently discussions about the possibility to determine if a TESL model is a correct implementation of a CCSL specification. With such a possibility, we could use CCSL for specifying a model of computation and then use TESL to write an implementation of this model of computation. The specification would allow static verification of properties, while the implementation would allow efficient simulations.

The current architecture of ModHel'X is not aligned on the GEMOC framework, and part of the contribution of Sup\'elec is to modify its structure to make it usable as an execution engine and a solver in the GEMOC framework.

%End of user code
Start of user code Domain Specific Metamodel_input_Description for EMF Gen Model
An ecore model representing the domain concepts of the user DSML.
%End of user code
Start of user code User Animation Viewer

%End of user code
Start of user code Timesquare DSA-MOCC Map EditorDescription

%End of user code
Start of user code Domain Specific Editor

%End of user code
Start of user code Domain Specific  Representation Definition Model_interface
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor.
%End of user code
Start of user code Language Definition ToolsDescription

%End of user code
Start of user code ECL EditorDescription

%End of user code
Start of user code Modhel'X
ModHel'X is both a meta model and an execution engine for heterogeneous models which is developed at the Computer Science Department of Sup\'elec.

%End of user code
Start of user code Reflexive Model Animators

%End of user code
Start of user code Domain Specific Metamodel_input_Description for Domain Specific Tree Editor
Eclipse EMF is used to model the domain model. The meta-model describes the structure of the domain specific model.
%End of user code
Start of user code ECL Model_output_Description for ECL Editor
%End of user code
Start of user code Domain Specific Metamodel Byte Code_output_Description for EMF Gen Model
The bytecode that is able to support the serialization and deserialization of models conforming to the Domain Specific Metamodel.
%End of user code
Start of user code Generative ToolsDescription

%End of user code
Start of user code Kermeta Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific EditorDescription
This component is a logical component which represents all the editors which manage domain specific models. More concrete editors will typically be graphical, textual or tree view editors.
%End of user code
Start of user code User Animation ViewerDescription

%End of user code
Start of user code Generative Tools

%End of user code
Start of user code Executable Modeling Tools

%End of user code
Start of user code Executable Modeling ToolsDescription
This component is a logical component which contains all the domain specific components generated through the GEMOC workbench process:  
\begin{itemize}
\item Domain Specific Editor
\item Domain Specific Metamodel Byte Code
\item Domain Specific Metamodel Byte Code Extension
\end{itemize}
%End of user code
Start of user code ECL Model_output_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific  Representation Definition Model_output_Description for Sirius Editor
The configuration file which describes the representations (diagrams, tables, matrix and trees). Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example).
%End of user code
Start of user code Domain Specific Model_output_Description for Domain Specific Editor
%End of user code
Start of user code Timesquare DSA-MOCC Map Editor

%End of user code
Start of user code Language Definition Tools

%End of user code
Start of user code MOCC Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific  Representation Definition Model_input_Description for Sirius Framework
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor. Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example). This description is dynamically interpreted to materialize the workbench within the Eclipse IDE. No code generation is involved, the specifier of the workbench can have instant feedback while adapting the description.  
%End of user code
Start of user code Reflexive Model AnimatorsDescription
This component is a logical component which provides animation capability on the reflexive models. In the GEMOC workbench, this component will be implemented by the Sirius Animator.
%End of user code

Thu Sep 05 12:19:08 CEST 2013
================================================================================
Start of user code Domain Specific Metamodel Byte Code_output_Description for Domain Specific Metamodel Byte Code
%End of user code
Start of user code Domain Specific Graphical Animator_output_Description for Domain Specific Graphical Animator
%End of user code
Start of user code Domain Specific Metamodel Byte Code ExtensionDescription

%End of user code
Start of user code Domain Specific Metamodel Byte Code

%End of user code
Start of user code Runtime Controller_input_Description for Domain Specific Graphical Animator
It is a Java API which provides :
\begin{itemize}
\item Debug actions :
\begin{itemize}
\item Start
\item Step into
\item Step over
\item Suspend
\item Resume
\item Terminate
\item ...
\end{itemize}
\item Get current system state :
\begin{itemize}
\item Variables
\item Stack frame
\item ...
\end{itemize}
\item Set values
\end{itemize}
%End of user code
Start of user code Domain Specific Metamodel Byte CodeDescription

%End of user code
Start of user code Debug User Interface_output_Description for Domain Specific Graphical Animator
The Eclipse Debug classical interface.
%End of user code
Start of user code Domain Specific Graphical AnimatorDescription

%End of user code
Start of user code Domain Specific Graphical Animator

%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific Graphical Animator
Instance of the domain specific metamodel.
%End of user code
Start of user code Domain Specific Metamodel Byte Code Extension_output_Description for Domain Specific Metamodel Byte Code Extension
%End of user code
Start of user code Launch Utilities_output_Description for Domain Specific Graphical Animator
The Eclipse launch framework.
%End of user code
Start of user code Domain Specific Metamodel Byte Code Extension

%End of user code

Thu Sep 05 12:31:33 CEST 2013
================================================================================
Start of user code Domain Specific Model_output_Description for Domain Specific Tree Editor
The tree based editor is used to create domain specific model.
%End of user code
Start of user code Modhel'XDescription
The purpose of ModHel'X is the modeling of hierarchical heterogeneous models. In order to handle heterogeneous components in a model, ModHel'X relies on a generic meta-model based on black boxes (called blocks) with observable ports (called pins). A ModHel'X model is composed of a structure (blocks with relations between their pins) and a model of computation which implements the rules for combining the behavior of the blocks as observed at their pins.

ModHel'X supports only hierarchical heterogeneity through the use of interface blocks. An interface block is a block used according to an external model of computation, and the behavior of this block is defined by a model which uses an internal model of computation. The interface block, is responsible for adapting the execution semantics between the external and the internal models of computation. This adaptation is decomposed along three axis: transforming input and output data, synchronizing the control (occurrence of events) in both models of computation, and maintaining relations between the time scales inside and outside the interface block.

For modeling the relations between the occurrence of events and the time scales in different models of computation, ModHel'X relies on a time model and a solver for these relations. This time model is called TESL (Tagged Event Specification Language) and is inspired by the Tagged Signal Model by Lee and Sangiovanni, and the CCSL language developed by the AOSTE INRIA team. Contrary to CCSL, TESL and its solver can only construct one execution trace by applying causality relations and constraints on the tags (dates) of events. It has been designed for specifying how to execute an heterogeneous model, while CCSL is more suitable to specify constraints on all possible executions of an heterogeneous model. Thanks to its reduced expressive power with regard to the ordering of events, and to its reduced analysis possibilities, TESL is able to handle constraints on the tags which are associated to event occurrences, which makes it handy and efficient for executing heterogeneous models. It would theoretically be possible to model such relations in CCSL using infinitely fast clocks. There are currently discussions about the possibility to determine if a TESL model is a correct implementation of a CCSL specification. With such a possibility, we could use CCSL for specifying a model of computation and then use TESL to write an implementation of this model of computation. The specification would allow static verification of properties, while the implementation would allow efficient simulations.

The current architecture of ModHel'X is not aligned on the GEMOC framework, and part of the contribution of Sup\'elec is to modify its structure to make it usable as an execution engine and a solver in the GEMOC framework.

%End of user code
Start of user code Scheduling Compiler

%End of user code
Start of user code Domain Specific Metamodel_input_Description for EMF Gen Model
An ecore model representing the domain concepts of the user DSML.
%End of user code
Start of user code User Animation Viewer

%End of user code
Start of user code EMF Gen Model

%End of user code
Start of user code Timesquare DSA-MOCC Map EditorDescription

%End of user code
Start of user code Scheduling CompilerDescription

%End of user code
Start of user code Domain Specific Editor

%End of user code
Start of user code DSE Model_output_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Execution Engine for Heterogeneous ModelsDescription

%End of user code
Start of user code Domain Specific MOCC To Execution ModelDescription

%End of user code
Start of user code Runtime Controller_output_Description for Execution Engine
%End of user code
Start of user code Domain Specific  Representation Definition Model_interface
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor.
%End of user code
Start of user code Language Definition ToolsDescription

%End of user code
Start of user code Domain Specific Metamodel Byte Code ExtensionDescription

%End of user code
Start of user code Domain Specific Metamodel Byte Code

%End of user code
Start of user code DSA Model_input_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific Metamodel Byte Code_input_Description for Execution Engine
the model of the code that implements the DSA.
%End of user code
Start of user code Modhel'X
ModHel'X is both a meta model and an execution engine for heterogeneous models which is developed at the Computer Science Department of Sup\'elec.

%End of user code
Start of user code Reflexive Model Animators

%End of user code
Start of user code Concurrency Execution Model_output_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Runtime Controller_input_Description for Domain Specific Graphical Animator
It is a Java API which provides :
\begin{itemize}
\item Debug actions :
\begin{itemize}
\item Start
\item Step into
\item Step over
\item Suspend
\item Resume
\item Terminate
\item ...
\end{itemize}
\item Get current system state :
\begin{itemize}
\item Variables
\item Stack frame
\item ...
\end{itemize}
\item Set values
\end{itemize}
%End of user code
Start of user code Domain Specific Metamodel_input_Description for Domain Specific Tree Editor
Eclipse EMF is used to model the domain model. The meta-model describes the structure of the domain specific model.
%End of user code
Start of user code ECL Model_output_Description for ECL Editor
%End of user code
Start of user code Domain Specific Metamodel Byte Code_output_Description for EMF Gen Model
The bytecode that is able to support the serialization and deserialization of models conforming to the Domain Specific Metamodel.
%End of user code
Start of user code Generative ToolsDescription

%End of user code
Start of user code Kermeta Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Execution Model_input_Description for Execution Engine
the model of the state of the model before handling the DSE by executing a DSA (current state of an automaton, current value of an attribute etc.)
%End of user code
Start of user code Trigger Event Request_output_Description for Execution Engine
the requests for DSE which are consequences of the execution of DSA
%End of user code
Start of user code Domain Specific Metamodel Byte CodeDescription

%End of user code
Start of user code Trace Model_output_Description for Execution Engine
the updated trace of the execution of the model after performing the DSA
%End of user code
Start of user code Domain Specific MOCC To Execution Model

%End of user code
Start of user code Domain Specific EditorDescription
This component is a logical component which represents all the editors which manage domain specific models. More concrete editors will typically be graphical, textual or tree view editors.
%End of user code
Start of user code Debug User Interface_output_Description for Domain Specific Graphical Animator
The Eclipse Debug classical interface.
%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Domain Specific Graphical AnimatorDescription

%End of user code
Start of user code Domain Specific Graphical Animator

%End of user code
Start of user code Domain Specific Text EditorDescription
This component provides a textual editor to create and modify domain specific models.
%End of user code
Start of user code User Animation ViewerDescription

%End of user code
Start of user code Generative Tools

%End of user code
Start of user code EMF Gen ModelDescription
This component is in charge of generating the bytecode implementing the structure of the Domain Specific Metamodel. Eclipse Modeling Framework provides such component. It uses the Domain Specific metamodel provided as an ecore model and a genmodel configuration.
\begin{figure}[h]
	\begin{center}
	\includegraphics*[trim=0.0cm 0.0cm 0cm 0.0cm, clip=true, width=1.0\linewidth]{../images/EMFGenModel.png}
	\caption{Gemomodel generation screenshot}
	\end{center}
\end{figure}
%End of user code
Start of user code Executable Modeling Tools

%End of user code
Start of user code DSA-MOCC Map EditorDescription

%End of user code
Start of user code Executable Modeling ToolsDescription
This component is a logical component which contains all the domain specific components generated through the GEMOC workbench process:  
\begin{itemize}
\item Domain Specific Editor
\item Domain Specific Metamodel Byte Code
\item Domain Specific Metamodel Byte Code Extension
\end{itemize}
%End of user code
Start of user code ECL Model_output_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific Graphical Animator
Instance of the domain specific metamodel.
%End of user code
Start of user code Domain Specific Tree Editor

%End of user code
Start of user code Domain Specific Tree EditorDescription
This component is generated by EMF. EMF generates plug-ins which provide wizards for creating new model instances and an editor which allows to create a new domain specific model. This generated component is a tree based editor.
%End of user code
Start of user code Domain Specific  Representation Definition Model_output_Description for Sirius Editor
The configuration file which describes the representations (diagrams, tables, matrix and trees). Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example).
%End of user code
Start of user code Domain Specific Event Vector Model_input_Description for Execution Engine
%End of user code
Start of user code Domain Specific Model_output_Description for Domain Specific Editor
%End of user code
Start of user code Execution Engine for Heterogeneous Models

%End of user code
Start of user code Timesquare DSA-MOCC Map Editor

%End of user code
Start of user code DSA-MOCC Map Editor

%End of user code
Start of user code Language Definition Tools

%End of user code
Start of user code MOCC Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code MOCC Model_input_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific  Representation Definition Model_input_Description for Sirius Framework
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor. Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example). This description is dynamically interpreted to materialize the workbench within the Eclipse IDE. No code generation is involved, the specifier of the workbench can have instant feedback while adapting the description.  
%End of user code
Start of user code DSE Model_input_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Domain Specific Event Model_input_Description for Execution Engine
the model of the events produced by the model of computation.
%End of user code
Start of user code Launch Utilities_output_Description for Domain Specific Graphical Animator
The Eclipse launch framework.
%End of user code
Start of user code Domain Specific Metamodel Byte Code Extension

%End of user code
Start of user code Domain Specific Text Editor

%End of user code
Start of user code Reflexive Model AnimatorsDescription
This component is a logical component which provides animation capability on the reflexive models. In the GEMOC workbench, this component will be implemented by the Sirius Animator.
%End of user code
Start of user code Execution Model_output_Description for Execution Engine
the model of the state of the model after the execution of the DSA (current state of an automaton, current value of an attribute etc.)
%End of user code

Thu Sep 05 16:04:42 CEST 2013
================================================================================
Start of user code Domain Specific Model_output_Description for Domain Specific Tree Editor
The tree based editor is used to create domain specific model.
%End of user code
Start of user code Modhel'XDescription
The purpose of ModHel'X is the modeling of hierarchical heterogeneous models. In order to handle heterogeneous components in a model, ModHel'X relies on a generic meta-model based on black boxes (called blocks) with observable ports (called pins). A ModHel'X model is composed of a structure (blocks with relations between their pins) and a model of computation which implements the rules for combining the behavior of the blocks as observed at their pins.

ModHel'X supports only hierarchical heterogeneity through the use of interface blocks. An interface block is a block used according to an external model of computation, and the behavior of this block is defined by a model which uses an internal model of computation. The interface block, is responsible for adapting the execution semantics between the external and the internal models of computation. This adaptation is decomposed along three axis: transforming input and output data, synchronizing the control (occurrence of events) in both models of computation, and maintaining relations between the time scales inside and outside the interface block.

For modeling the relations between the occurrence of events and the time scales in different models of computation, ModHel'X relies on a time model and a solver for these relations. This time model is called TESL (Tagged Event Specification Language) and is inspired by the Tagged Signal Model by Lee and Sangiovanni, and the CCSL language developed by the AOSTE INRIA team. Contrary to CCSL, TESL and its solver can only construct one execution trace by applying causality relations and constraints on the tags (dates) of events. It has been designed for specifying how to execute an heterogeneous model, while CCSL is more suitable to specify constraints on all possible executions of an heterogeneous model. Thanks to its reduced expressive power with regard to the ordering of events, and to its reduced analysis possibilities, TESL is able to handle constraints on the tags which are associated to event occurrences, which makes it handy and efficient for executing heterogeneous models. It would theoretically be possible to model such relations in CCSL using infinitely fast clocks. There are currently discussions about the possibility to determine if a TESL model is a correct implementation of a CCSL specification. With such a possibility, we could use CCSL for specifying a model of computation and then use TESL to write an implementation of this model of computation. The specification would allow static verification of properties, while the implementation would allow efficient simulations.

The current architecture of ModHel'X is not aligned on the GEMOC framework, and part of the contribution of Sup\'elec is to modify its structure to make it usable as an execution engine and a solver in the GEMOC framework.

%End of user code
Start of user code Scheduling Compiler

%End of user code
Start of user code Domain Specific Metamodel_input_Description for EMF Gen Model
An ecore model representing the domain concepts of the user DSML.
%End of user code
Start of user code User Animation Viewer

%End of user code
Start of user code EMF Gen Model

%End of user code
Start of user code Timesquare DSA-MOCC Map EditorDescription

%End of user code
Start of user code Scheduling CompilerDescription

%End of user code
Start of user code Domain Specific Editor

%End of user code
Start of user code DSE Model_output_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Execution Engine for Heterogeneous ModelsDescription

%End of user code
Start of user code Domain Specific MOCC To Execution ModelDescription

%End of user code
Start of user code Runtime Controller_output_Description for Execution Engine
%End of user code
Start of user code Domain Specific  Representation Definition Model_interface
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor.
%End of user code
Start of user code Language Definition ToolsDescription

%End of user code
Start of user code Domain Specific Metamodel Byte Code ExtensionDescription

%End of user code
Start of user code Domain Specific Metamodel Byte Code

%End of user code
Start of user code DSA Model_input_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific Metamodel Byte Code_input_Description for Execution Engine
the model of the code that implements the DSA.
%End of user code
Start of user code Modhel'X
ModHel'X is both a meta model and an execution engine for heterogeneous models which is developed at the Computer Science Department of Sup\'elec.

%End of user code
Start of user code Reflexive Model Animators

%End of user code
Start of user code Concurrency Execution Model_output_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Runtime Controller_input_Description for Domain Specific Graphical Animator
It is a Java API which provides :
\begin{itemize}
\item Debug actions :
\begin{itemize}
\item Start
\item Step into
\item Step over
\item Suspend
\item Resume
\item Terminate
\item ...
\end{itemize}
\item Get current system state :
\begin{itemize}
\item Variables
\item Stack frame
\item ...
\end{itemize}
\item Set values
\end{itemize}
%End of user code
Start of user code Domain Specific Metamodel_input_Description for Domain Specific Tree Editor
Eclipse EMF is used to model the domain model. The meta-model describes the structure of the domain specific model.
%End of user code
Start of user code ECL Model_output_Description for ECL Editor
%End of user code
Start of user code Domain Specific Metamodel Byte Code_output_Description for EMF Gen Model
The bytecode that is able to support the serialization and deserialization of models conforming to the Domain Specific Metamodel.
%End of user code
Start of user code Generative ToolsDescription

%End of user code
Start of user code Kermeta Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Execution Model_input_Description for Execution Engine
the model of the state of the model before handling the DSE by executing a DSA (current state of an automaton, current value of an attribute etc.)
%End of user code
Start of user code Trigger Event Request_output_Description for Execution Engine
the requests for DSE which are consequences of the execution of DSA
%End of user code
Start of user code Domain Specific Metamodel Byte CodeDescription

%End of user code
Start of user code Trace Model_output_Description for Execution Engine
the updated trace of the execution of the model after performing the DSA
%End of user code
Start of user code Domain Specific MOCC To Execution Model

%End of user code
Start of user code Domain Specific EditorDescription
This component is a logical component which represents all the editors which manage domain specific models. More concrete editors will typically be graphical, textual or tree view editors.
%End of user code
Start of user code Debug User Interface_output_Description for Domain Specific Graphical Animator
The Eclipse Debug classical interface.
%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Domain Specific Graphical AnimatorDescription

%End of user code
Start of user code Domain Specific Graphical Animator

%End of user code
Start of user code Domain Specific Text EditorDescription
This component provides a textual editor to create and modify domain specific models.
%End of user code
Start of user code User Animation ViewerDescription

%End of user code
Start of user code Generative Tools

%End of user code
Start of user code EMF Gen ModelDescription
This component is in charge of generating the bytecode implementing the structure of the Domain Specific Metamodel. Eclipse Modeling Framework provides such component. It uses the Domain Specific metamodel provided as an ecore model and a genmodel configuration.
\begin{figure}[h]
	\begin{center}
	\includegraphics*[trim=0.0cm 0.0cm 0cm 0.0cm, clip=true, width=1.0\linewidth]{../images/EMFGenModel.png}
	\caption{Gemomodel generation screenshot}
	\end{center}
\end{figure}
%End of user code
Start of user code Executable Modeling Tools

%End of user code
Start of user code DSA-MOCC Map EditorDescription

%End of user code
Start of user code Executable Modeling ToolsDescription
This component is a logical component which contains all the domain specific components generated through the GEMOC workbench process:  
\begin{itemize}
\item Domain Specific Editor
\item Domain Specific Metamodel Byte Code
\item Domain Specific Metamodel Byte Code Extension
\end{itemize}
%End of user code
Start of user code ECL Model_output_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific Graphical Animator
Instance of the domain specific metamodel.
%End of user code
Start of user code Domain Specific Tree Editor

%End of user code
Start of user code Domain Specific Tree EditorDescription
This component is generated by EMF. EMF generates plug-ins which provide wizards for creating new model instances and an editor which allows to create a new domain specific model. This generated component is a tree based editor.
%End of user code
Start of user code Domain Specific  Representation Definition Model_output_Description for Sirius Editor
The configuration file which describes the representations (diagrams, tables, matrix and trees). Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example).
%End of user code
Start of user code Domain Specific Event Vector Model_input_Description for Execution Engine
%End of user code
Start of user code Domain Specific Model_output_Description for Domain Specific Editor
%End of user code
Start of user code Execution Engine for Heterogeneous Models

%End of user code
Start of user code Timesquare DSA-MOCC Map Editor

%End of user code
Start of user code DSA-MOCC Map Editor

%End of user code
Start of user code Language Definition Tools

%End of user code
Start of user code MOCC Model_input_Description for Timesquare DSA-MOCC Map Editor
%End of user code
Start of user code MOCC Model_input_Description for DSA-MOCC Map Editor
%End of user code
Start of user code Domain Specific  Representation Definition Model_input_Description for Sirius Framework
Sirius enables the specification of a modeling workbench in termes of graphical, table or tree editors with validation rules and actions using declarative descriptions. The representations (diagrams, tables, matrix and trees) are described in a configuration file which can be edited with the Sirius Editor. Each representation description defines the model elements which will be visible, how they will be dispayed (which schape, color, etc) and how they can be edited (through a palette for example). This description is dynamically interpreted to materialize the workbench within the Eclipse IDE. No code generation is involved, the specifier of the workbench can have instant feedback while adapting the description.  
%End of user code
Start of user code DSE Model_input_Description for Domain Specific MOCC To Execution Model
%End of user code
Start of user code Domain Specific Event Model_input_Description for Execution Engine
the model of the events produced by the model of computation.
%End of user code
Start of user code Launch Utilities_output_Description for Domain Specific Graphical Animator
The Eclipse launch framework.
%End of user code
Start of user code Domain Specific Metamodel Byte Code Extension

%End of user code
Start of user code Domain Specific Text Editor

%End of user code
Start of user code Reflexive Model AnimatorsDescription
This component is a logical component which provides animation capability on the reflexive models. In the GEMOC workbench, this component will be implemented by the Sirius Animator.
%End of user code
Start of user code Execution Model_output_Description for Execution Engine
the model of the state of the model after the execution of the DSA (current state of an automaton, current value of an attribute etc.)
%End of user code

Tue Sep 10 11:14:13 CEST 2013
================================================================================
Start of user code Gemoc Project State Model_input_Description for Gemoc Process assistant
If the component is presented as a wizard, it may take as input the current state of the current GEMOC project (GemocProjectState) so it can highlight the current step and propose the next steps to the user.
%End of user code
Start of user code Domain Specific Graphical Animated EditorDescription
Sirius provides a completely customized graphical editor dedicated to a domain specific languages (DSL). The graphical designers created with Sirius
provide diagrams, tables, matrix or trees to create and edit models according to the domain specific vocabulary and process.
%End of user code
Start of user code Modeling Project_output_Description for Domain Specific Graphical Animated Editor
Sirius provides a runtime that works with models within the Eclipse IDE, providing the notion of \em{Modeling Project}, an integration with the Project Explorer, handling the synchronization of workspace resources and in memory instances and the sharing of command stacks and editing domains across editors.
%End of user code
Start of user code Runtime Controller_input_Description for Domain Specific Graphical Animated Editor
This interface allows the integration with the Eclipse Debug component. This interfaces is detailed in the Domain Specific Graphical Animator section.
%End of user code
Start of user code Gemoc Process assistant

%End of user code
Start of user code OperatorDefinition Model_output_Description for Composition Operator Editor
%End of user code
Start of user code Debug User Interface_output_Description for Domain Specific Graphical Animated Editor
The Eclipse Debug classical interface.
%End of user code
Start of user code Gemoc Project State_input_Description for Gemoc Process assistant
%End of user code
Start of user code Domain Specific Graphical Animated Editor

%End of user code
Start of user code Gemoc Process assistantDescription
This component aims at proposing some guidance to the user in order to follow the GEMOC methodology. This component may be some kind of integrated tutorial and/or process wizard.
%End of user code
Start of user code Domain Specific Graphical Animated Editor_output_Description for Domain Specific Graphical Animated Editor
%End of user code
Start of user code Domain Specific Model_input_Description for Domain Specific Graphical Animated Editor
Instance of the domain specific metamodel.
%End of user code
Start of user code Launch Utilities_output_Description for Domain Specific Graphical Animated Editor
The Eclipse launch framework.
%End of user code
Start of user code OperatorDefinition Model_input_Description for Composition Operator Applicator
%End of user code
