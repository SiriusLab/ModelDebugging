[comment encoding = UTF-8 /]
[module generate('http://www.example.org/workflow')]

[template public generateAll(workflow : Workflow)]
[comment @main/]
[workflow.generateWorkflowToDot() /]
[for (step : Step | workflow.categories.steps)]
	[step.generateToDot(workflow)/]
[/for]
[generateLatex(workflow) /]
[/template]

[template public generateLatex(workflow : Workflow)]
[file ('gemoc-workflow.tex', false, 'UTF-8')]
% [protected ('protected header')]
\documentclass{gemoc} %% no option needed, default is : 10pt, twoside, babel['['/] english[']'/] , graphicx
\usepackage{color}
\usepackage['['/]colorlinks=true[']'/]{hyperref}

\task{x.x.x}
\title{Gemoc XXX }
\docnumber{Dx.x.x}
\version{1.0}

\companycopyright{Consortium GEMOC}  %% Appear in the foot page

\begin{document}
\maketitle

\begin{revisions}
	\begin{revtable}
		\dates{}{}{}{}{}
		\writers{}{}{}{}{}
		\approvers{}{}{}{}{}
	\end{revtable}
	\begin{revisionlabels}
		\revlabel{}
	\end{revisionlabels}
\end{revisions}
\begin{tableofauthors}
	\leadauthor{Didier Vojtisek}{INRIA}
	\contributor{$<$Name$>$}{$<$Organisation$>$}
\end{tableofauthors}

\tableofcontents
\newpage

\chapter{Gemoc language workbench workflow}

%[/protected]
%[protected ('summary')]
The figure \ref{fig:[workflow.getID() /]} presents the global view of the workflow of the different activities of the Language Workbench.


In further sections each activity will be detailled by also presenting the major concrete artefacts resulting from the Commands.
%[/protected]
\begin{figure}['['/]h![']'/]
		\center
		\includegraphics*['['/]trim=0.0cm 0.0cm 0cm 0.0cm, clip=true[']'/]{fig/[workflow.getID() /]}
		\caption{Gemoc Language Workbench workflow activities and supported tools}
		\label{fig:[workflow.getID() /]}
\end{figure}

% [protected ('protected summary_legend')]
Legend:
\begin{itemize}
	\item \includegraphics['['/]width=1cm[']'/]{fig/step} Activity: an activity is a step of the workflow. Each activity is supported by at least one concrete Command
	\item \includegraphics['['/]width=0.7cm[']'/]{fig/command} Command: a command is a concrete action of the studio, usually implemented as a wizard.
	\item \includegraphics['['/]width=0.5cm[']'/]{fig/artifact_add} Artifact creation: Artifact created as the result of a command.
	\item \includegraphics['['/]width=0.5cm[']'/]{fig/artifact_update} Artifact update:  Artifact updated as the result of a command.
\end{itemize}
%[/protected]
[for (step : Step | workflow.categories.steps)]
\section{[step.name/]}
[step.generate()/]
[/for]

%[protected ('protected footer')]
\end{document}
%[/protected]
[/file]
[/template]

[template private generate(step : Step)]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\label{sec:[step.getID()/]}
% [protected ('protected '+step.name)]
%[/protected]
\begin{figure}['['/]h![']'/]
		\center
		\includegraphics*['['/]trim=0.0cm 0.0cm 0cm 0.0cm, clip=true[']'/]{fig/[step.getID()/]}
		\caption{[step.name/] activity}
		\label{fig:[step.getID()/]}
\end{figure}

[step.description/]

The figure \ref{fig:[step.getID()/]} presents the activity and its supporting Commands.
[step.commands.generate()/]
[/template]

[template private generate(command : Command)]

\subsection{[command.name/] Command}
[command.description/]
\subsubsection{Created artefacts}
Artifacts created by the [command.name/] Command:
[command.artifacts->select(art | art.type = UpdateType::add ).generate()/]
[if (command.artifacts->select(art | art.type = UpdateType::add )->size()=0)]
	None
[/if]
\subsubsection{Updated artefacts}
Artifacts updated by the [command.name/] Command:
[command.artifacts->select(art | art.type = UpdateType::update ).generate()/]
[if (command.artifacts->select(art | art.type = UpdateType::update )->size()=0)]
	None
[/if]
[/template]

[template private generate(artifact : Artifact)]
\paragraph{[artifact.name/]} 
[artifact.description/]
[/template]

[template public generateWorkflowToDot(workflow : Workflow)]
[file ('fig/' + workflow.getID() + '.dot', false, 'UTF-8')]
[preambule() /]
[comment]
[workflow.toDot() /]
[for (step : Step | workflow.categories.steps)]
	[step.generateDot(workflow, false, true)/]
	[workflow.linkTo(step, '') /]
[/for]
[/comment]
[workflow.categories->asSequence()->first().steps->asSequence()->first().generateDot(workflow, false, false, true) /]

[fin() /]	
[/file]
[/template]


[template private generateToDot(step : Step, workflow: Workflow)]
[file ('fig/' + step.getID() + '.dot', false, 'UTF-8')]
[preambule() /]
[step.generateDot(workflow, true, true, false) /]
[fin() /]
[/file]
[/template]

[template private generateDot(step : Step, parent: NamedElement, withArtifact: Boolean, withCommand: Boolean, withNextSteps: Boolean)]
// Step: [step.name/] -- [step.description/]
[step.toDot(parent) /]
[if (withNextSteps)]
[for (subStep: Step | step.next) ]
	[subStep.generateDot(step, withArtifact, withCommand, withNextSteps) /]
	[step.linkTo(subStep, 'style="dashed,setlinewidth(5)"') /]
[/for]
[/if]
[if (withCommand) ]
[for (command: Command | step.commands) ]
	[command.generateToDot(step, withArtifact) /]
	[step.linkTo(command, 'style="dashed,setlinewidth(5)"') /]
[/for]
[/if]
// EndStep: [step.name/]
[/template]

[template private generateToDot(command : Command, step: Step, withArtifact: Boolean)]
// Command: [command.name/] -- [command.description/]
[command.toDot(step) /]
[if (withArtifact)]
[for (art: Artifact | command.artifacts)]
	[art.toDot(command) /]
	[command.linkTo(art, 'color=gray') /]
[/for]
[/if]
// EndCommand: [command.name/]
[/template]

[template private generateToDot(artifact : Artifact, imageFile: String)]
	[artifact.getID() /] ['['/] image="[imageFile/]", label="[artifact.name/]" ['['/]
[/template]

[template private preambule()]
// [protected ('protected header')]
// Automatically generated thanks to fr.obeo.dsl.workflow.gen/.../generate.mtl
// from a Workflow model
digraph G {
	graph ['['/] layout=dot rankdir=LR ranksep="2.0"[']'/]
	edge [ '['/] style="setlinewidth(3)" [ ']'/]
	node [ '['/] shape=none fontsize="24" labelloc=b margin="0,1.0" [']'/]
//[/protected]
[/template]

[template private fin()]
}
//
[/template]

[query public getID(c: NamedElement): String =
    c.name.replaceAll(' ', '_').replaceAll('\\.', '_')
		.replaceAll('\'', '_').replaceAll('\\(', '_')
		.replaceAll('\\)', '_').replaceAll('\\/', '_')
/]

[query public getID(c: NamedElement, ctx: NamedElement): String =
    ctx.getID() + '___' + c.getID()
/]



[query public linkTo(from: NamedElement, to: NamedElement, params: String): String =
	from.getID() + ' -> '
	    +
	    if to.oclIsTypeOf(Artifact) then
			to.getID(from)
	    else
			to.getID()
	    endif
	    + '[ ' + params + ' ]'
/]

[query public toDot(w: Workflow): String =
	w.getID() + ' ['
	    + ' label="' + w.name + '"'
	    + ' image="step.png"'
		+ ' margin="0,0.8"'
	    + ' ]'
/]

[query public toDot(s: Step, ctx: NamedElement): String =
	s.getID() + ' ['
	    + ' label="' + s.name + '"'
	    + ' image="step.png"'
		+ ' margin="0,0.8"'
	    + ' ]'
/]

[query public toDot(c: Command, ctx: NamedElement): String =
	c.getID() + ' ['
	    + ' label="' + c.name + '"'
	    + ' image="command.png"'
	    + ' ]'
/]

[query public toDot(a: Artifact, ctx: NamedElement): String =
	a.getID(ctx) + ' ['
	    + ' label="' + a.name + '"'
	    + ' image="'
	    +
	    if a.type = UpdateType::update then
			'artifact_update.png'
	    else
			'artifact_add.png'
	    endif
	    + '"'
	    + ' ]'
/]
