[comment encoding = UTF-8 /]
[module generate('http://org.gemoc.mocc.ccslmocc/1.0','http://fr.inria.aoste.timemodel','http://org.gemoc.mocc.fsmmodel/1.0')]

[import org::gemoc::mocc::transformations::mocml2clocksystem::services::javaservices /] 

[template public generateElement(aStateRelationBasedLibrary : StateRelationBasedLibrary)]
[comment @main/]
[for (rl : RelationLibrary | aStateRelationBasedLibrary.oclAsType(Library).relationLibraries)]
	[for (rd : RelationDefinition | rl.relationDefinitions)]
		[if (rd.oclIsTypeOf(StateMachineRelationDefinition))]
			[file (rd.oclAsType(NamedElement).name+'.clocksystem', false, 'UTF-8')]
[rd.oclAsType(NamedElement).name/]
		^['['/]:s [for (ae : ClockExpressionAndRelation::AbstractEntity | rd.oclAsType(StateMachineRelationDefinition).declaration.parameters)]
[if (ae.type.oclIsTypeOf(DenseClockType) or ae.type.oclIsTypeOf(DiscreteClockType))] :[ae.name/][/if][/for]|

s caseOf: {
[comment initial state is mandatory (mm conformance) - no additional checking /]
		['['/][rd.oclAsType(StateMachineRelationDefinition).initialStates->first().nameToNumID()/][']'/] [if (rd.oclAsType(StateMachineRelationDefinition).initialStates->first().outputTransitions->size()<>0)] -> ['['/]{
			[for (t : Transition | rd.oclAsType(StateMachineRelationDefinition).initialStates->first().outputTransitions)]
			[rd.oclAsType(StateMachineRelationDefinition).initialStates->first().nameToNumID()/] -> [t.target.nameToNumID()/][if (t.trigger<>0)] when: {[t.trigger.oclAsType(Trigger).trueTriggers.name->sep('. ')/]}[/if][if (rd.oclAsType(StateMachineRelationDefinition).initialStates->first().outputTransitions->last()<>t)].[/if] 
			[/for]
		}[']'/][/if].
[for (s : State | rd.oclAsType(StateMachineRelationDefinition).states)][if (not rd.oclAsType(StateMachineRelationDefinition).initialStates->includes(s))]
		['['/][s.nameToNumID()/][']'/][if (s.outputTransitions->size()<>0)] -> ['['/]{
		[for (t : Transition | s.outputTransitions)]
			[s.nameToNumID()/] -> [t.target.nameToNumID()/][if (t.trigger<>0)] when: {[t.trigger.oclAsType(Trigger).trueTriggers.name->sep('. ')/]}[/if][if (s.outputTransitions->last()<>t)].[/if] 
		[/for]
		}[']'/][/if].[/if]


	[/for]
	}
[']'/]
			[/file]
		[/if]
	[/for]
[/for]
[/template]
