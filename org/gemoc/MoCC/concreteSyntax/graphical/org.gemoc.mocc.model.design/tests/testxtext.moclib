/*
 * CCSL specification
 * @author:  Julien Deantoni
 * date :  Tue September 20 2013  09:56:50 CEST 
 */

Library stateBasedTest{
	imports{
		 // import statements
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as lib0; 
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as lib1; 
		
	}
	RelationLibrary stateBasedRelations{
		RelationDeclaration firstTest(firstParam : clock, secondParam:clock)
		StateBasedRelationDefinition firstTestDef[firstTest]{
			Integer i = 0 
			
			IntEqual name  iEquals5 (IntegerRef name refi3[i] == IntegerRef name ref5 [five])
			IntInf {
				name  iInfTo5 
				leftValue IntegerRef name refi4[i] 
				rightValue IntegerRef name ref5 [five]
				}
			
			init initS;
			State initS (
				out : init2intermediate ;
			)
			State interMediate(
				in : init2intermediate;
				out : intermediate2loop;
			)
			
			State loop (
				in : intermediate2loop, selfLoop;
				out : selfLoop, loop2c1again;
			)
			
			State c1again(
				in: loop2c1again, selfC1again;
				out:selfC1again;
			)
			
			from c1again to c1again : selfC1again(
				when firstParam
			)
			
			from loop to c1again : loop2c1again(
				if iEquals5
				when secondParam
			)
			
			from interMediate to loop : intermediate2loop(
				when firstParam		
			)
			
			from initS to interMediate : init2intermediate(
				when firstParam		
			) 
			from loop to loop: selfLoop(
				if iInfTo5
				when secondParam
				do Assign a1 (IntegerRef name refi[i] := IntPlus iPlusOne( IntegerRef name refi2[i] , IntegerRef name refone[one]))
			) 
		}
	}
}