// automatically generated by Xtext
grammar org.gemoc.mocc.cometaccsl.model.xtext.MoCDsl with fr.inria.aoste.timesquare.ccslkernel.library.xtext.CCSLLibrary

 
import "http://org.gemoc.mocc.cometa/1.0" as cometa
import "http://org.gemoc.mocc.cometadatatype/1.0" as cometadatatype
import "http://org.gemoc.mocc.cometastructure/1.0" as cometastructure 
import "http://org.gemoc.mocc.cometamoc/1.0" as cometamoc

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://org.gemoc.mocc.ccslmoc/1.0" as ccslmoc
import "http://fr.inria.aoste.timemodel.primitivetypes" as PrimitivesTypeValue
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation" as ClockExpressionAndRelation
import "http://fr.inria.aoste.timemodel.basicTypes" as BasicType
import "http://fr.inria.aoste.timemodel"
import "http://org.gemoc.mocc.fsmdefinition/1.0" as fsmdefinition
import "http://fr.inria.aoste.timemodel.classicalexpression" as ClassicalExpression

import "http://org.gemoc.mocc.cometatime/1.0" as cometatime 

import "http://org.gemoc.mocc.ccsl4cometaspecialisation/1.0" as ccsl4cometaspecialisation 

import "http://fr.inria.aoste.timemodel.ccslmodel" as CCSLModel
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation.kernelrelation" as KernelRelation
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation.kernelexpression" as KernelExpression

//importGrammar "platform:/resouce/fr.inria.aoste.timesquare.ccslkernel.library.xtext/src/fr.inria.aoste.timesquare.ccslkernel.library.xtextCCSLLibrary.xtext"


//MoCSystemSpecification_Impl returns cometa::MoCSystemSpecification:
//	{cometa::MoCSystemSpecification} 
//	'MoCSystemSpecification'
//	'{' 
//		(mocLib=MoCLibrary)?
//	'}';

CometaSystemSpecification_Impl returns cometa::CometaSystemSpecification:
	{cometa::CometaSystemSpecification} 
	'MoCSystemSpecification'
	'{' 
		(mocLib=MoCLibrary)?
		(dataLib=DataTypeLibrary)?
		(structureLib=StructureLibrary)?
		(timeLib=TimeLibrary)?
	'}';
	

MoCLibrary returns cometa::MoCLibrary:
	CCSLLibrary|CometaMoCLibrary;
	
CometaMoCLibrary returns cometamoc::CometaMoCLibrary: 
	'Cometa_Library' name=EString 
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('mocDomains' '{' mocDomains+=MoCDomain ( "," mocDomains+=MoCDomain)* '}' )?
		('mocEvents' '{' mocEvents+=MoCEvent ( "," mocEvents+=MoCEvent)* '}' )?
		('queues' '{' queues+=Queue ( "," queues+=Queue)* '}' )?
 '}';

MoCDomain returns cometamoc::MoCDomain: 
	'MoCDomain' name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?	
	('behaviors' '{' mocBehaviors+=Behavior ( "," mocBehaviors+=Behavior)* '}' )?
		('time constraints' '{' domainTimeConstraints+=TimeConstraint ( "," domainTimeConstraints+=TimeConstraint)* '}' )?
 '}';
 
 CCSLLibrary returns ccslmoc::CCSLLibrary:
	'CCSL_Library' name=EString
	'{'
		(('imports' '{' ( imports+= ImportStatement)* '}' )? 
		(expressionLibraries+=ExpressionLibrary |
		 relationLibraries+=RelationLibrary  |
		 //relationDefinitionDeclarations+=CCSLStateMachineRelationDefinition  |
		 predefinedTypes+=Type  )*)
		
    '}';





 RelationDefinition returns ClockExpressionAndRelation::RelationDefinition: // <--- Override
	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |CCSLStateMachineRelationDefinition;





 
CCSLStateMachineRelationDefinition returns ccslmoc::CCSLStateMachineRelationDefinition:
	{ccslmoc::CCSLStateMachineRelationDefinition}
	'StateBasedRelationDefinition'name=EString '['declaration=[ClockExpressionAndRelation::RelationDeclaration|EString]']'


	'{'
		(concreteEntities+=ConcreteEntity)*
		(classicalExpressions+=BooleanExpression)*
		('init' initialState= [fsmdefinition::State|EString])';'
		((states+=State)|
		(transitions+=Transition))+
		
    '}';

MoCEvent returns cometamoc::MoCEvent: 
	'MoC Event' name=EString
	'{' ('parameters' '{' eventParameters+=Parameter ( "," eventParameters+=Parameter)* '}' )?
	'}';


MoCInterface returns cometatime::MoCInterface:
	Send | Receive | Ack;





MoCComponent returns cometastructure::MoCComponent:
	CompositeComponent | BasicComponent;


Behavior returns cometamoc::Behavior:
	OpaqueBehavior | FiniteStateMachineBehavior;


OpaqueBlock returns cometamoc::OpaqueBlock:
	CometaGuard | CometaAction;



RTInterface returns cometatime::RTInterface:
	Parameter | Service;






CometaSystemSpecification returns cometa::CometaSystemSpecification:
	{cometa::CometaSystemSpecification}
	'CometaSystemSpecification'
	'{'
		('mocLib' mocLib=MoCLibrary)?
		('dataLib' dataLib=DataTypeLibrary)?
		('structureLib' structureLib=StructureLibrary)?
		('timeLib' timeLib=TimeLibrary)?
	'}';

DataTypeLibrary returns cometadatatype::DataTypeLibrary:
	{cometadatatype::DataTypeLibrary}
	'DataTypeLibrary'
	name=EString
	'{'
('version' version=EString)?
		('definition' definition=EString)?
		('typedef' '{' typedef+=TypeDeclaration ( "," typedef+=TypeDeclaration)* '}' )?
	'}';

StructureLibrary returns cometastructure::StructureLibrary:
	{cometastructure::StructureLibrary}
	'StructureLibrary'
name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('mocStructures' '{' mocStructures+=StructureContainer ( "," mocStructures+=StructureContainer)* '}' )?
		('mocInterfaces' '{' mocInterfaces+=MoCInterface ( "," mocInterfaces+=MoCInterface)* '}' )?
	'}';

TimeLibrary returns cometatime::TimeLibrary:
	{cometatime::TimeLibrary}
	'TimeLibrary'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('clocks' '{' clocks+=ClockAbstraction ( "," clocks+=ClockAbstraction)* '}' )?
		('globalTimeConstraints' '{' globalTimeConstraints+=TimeConstraint ( "," globalTimeConstraints+=TimeConstraint)* '}' )?
	'}';


ClockAbstraction returns cometatime::ClockAbstraction: 
	{cometatime::ClockAbstraction}
	'Abstracts' content=EString '{'
		('are refered in constraints' isReferedInConstraints+=[cometatime::TimeConstraint])?
		('are refered by event' isReferedbyEvents+=[cometatime::Event])?
		('are refered by triggers' isReferedbyTrigger+=[cometatime::ComplexEventDefinitionAbstraction])?
	'}';




TypeDeclaration returns cometadatatype::TypeDeclaration:
	{cometadatatype::TypeDeclaration} 
	'TypeDeclaration'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
	'}';



StructureContainer returns cometastructure::StructureContainer:
	{cometastructure::StructureContainer}
	'StructureContainer'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('parts' '{' parts+=Part ( "," parts+=Part)* '}' )?
		('connectorInstances' '{' connectorInstances+=MoCConnector ( "," connectorInstances+=MoCConnector)* '}' )?
		('componentInstances' '{' componentInstances+=MoCComponent ( "," componentInstances+=MoCComponent)* '}' )?
		('portInstances' '{' portInstances+=MoCPort ( "," portInstances+=MoCPort)* '}' )?
	'}';

Part returns cometastructure::Part:
	'Part'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		'componentType' componentType=[cometastructure::MoCComponent|EString]
		('parts' '{' parts+=Part ( "," parts+=Part)* '}' )?
		('ports' '{' ports+=MoCPort ( "," ports+=MoCPort)* '}' )?
	'}';

MoCConnector returns cometastructure::MoCConnector:
	'MoCConnector'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		'kind' kind=MoCConnectorKind
		('behaviorMap' behaviorMap=[cometamoc::Behavior|EString])?
		'source' source=[cometastructure::MoCPort|EString]
		'target' target=[cometastructure::MoCPort|EString]
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

MoCPort returns cometastructure::MoCPort:
	'MoCPort'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		'direction' direction=PortKind
		('behaviorMap' behaviorMap=[cometamoc::Behavior|EString])?
		('target' target=[cometastructure::MoCPort|EString])?
		'portInterfaces' '(' portInterfaces+=[cometatime::MoCInterface|EString] ( "," portInterfaces+=[cometatime::MoCInterface|EString])* ')' 
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Parameter returns cometatime::Parameter:
	'Parameter'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('kind' kind=InterfaceKind)?
		('parameterType' parameterType=[cometadatatype::TypeDeclaration|EString])?
		'value' value=OpaqueBlock
	'}';

MoCConnectorKind returns cometastructure::MoCConnectorKind:
	'MoCConnectorKind' /* TODO: implement this rule and an appropriate IValueConverter */;

MoCRole returns cometamoc::MoCRole:
	'MoCRole' /* TODO: implement this rule and an appropriate IValueConverter */;

QueueInstance returns cometamoc::QueueInstance:
	{cometamoc::QueueInstance}
	'QueueInstance'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('type' type=[cometamoc::Queue|EString])?
	'}';

OpaqueBehavior returns cometamoc::OpaqueBehavior:
	'OpaqueBehavior'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('roles' '{' roles+=MoCRole ( "," roles+=MoCRole)* '}' )?
		('queueInstances' '{' queueInstances+=QueueInstance ( "," queueInstances+=QueueInstance)* '}' )?
		('rtInterfaces' '{' rtInterfaces+=RTInterface ( "," rtInterfaces+=RTInterface)* '}' )?
		('behaviorTimeConstraints' '{' behaviorTimeConstraints+=TimeConstraint ( "," behaviorTimeConstraints+=TimeConstraint)* '}' )?
		'body' body=OpaqueBlock
	'}';

FiniteStateMachineBehavior returns cometamoc::FiniteStateMachineBehavior:
	'FiniteStateMachineBehavior'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('roles' '{' roles+=MoCRole ( "," roles+=MoCRole)* '}' )?
		'initialState' initialState=[fsmdefinition::State|EString]
		('finalStates' '(' finalStates+=[fsmdefinition::State|EString] ( "," finalStates+=[fsmdefinition::State|EString])* ')' )?
		('queueInstances' '{' queueInstances+=QueueInstance ( "," queueInstances+=QueueInstance)* '}' )?
		('rtInterfaces' '{' rtInterfaces+=RTInterface ( "," rtInterfaces+=RTInterface)* '}' )?
		('behaviorTimeConstraints' '{' behaviorTimeConstraints+=TimeConstraint ( "," behaviorTimeConstraints+=TimeConstraint)* '}' )?
		('states' '{' states+=State ( "," states+=State)* '}' )?
		('transitions' '{' transitions+=Transition ( "," transitions+=Transition)* '}' )?	
	'}';

TimeConstraint returns cometatime::TimeConstraint:
	CCSL4CometaTimeConstraint
;

CCSL4CometaTimeConstraint returns ccsl4cometaspecialisation::CCSL4CometaTimeConstraint:
	{ccsl4cometaspecialisation::CCSL4CometaTimeConstraint}
	'Time constraint expression: ' content=EString '{'
	('uses clocks:' uses+=[cometatime::ClockAbstraction] ( "," uses+=[cometatime::ClockAbstraction])*  )?'}'
;

Queue returns cometamoc::Queue:
	{cometamoc::Queue}
	'Queue'
	'{'
		('kind' kind=QueueKind)?
		('size' size=EString)?
		('rtInterfaces' '{' rtInterfaces+=RTInterface ( "," rtInterfaces+=RTInterface)* '}' )?
	'}';

QueueKind returns cometamoc::QueueKind:
	'QueueKind' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING | ID;

InterfaceKind returns cometatime::InterfaceKind:
	'InterfaceKind' /* TODO: implement this rule and an appropriate IValueConverter */;

Service returns cometatime::Service:
	{cometatime::Service}
	'Service'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('kind' kind=InterfaceKind)?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Send returns cometatime::Send:
	{cometatime::Send}
	'Send'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('kind' kind=InterfaceKind)?
		('uses' '(' uses+=[cometatime::ClockAbstraction|EString] ( "," uses+=[cometatime::ClockAbstraction|EString])* ')' )?
		('eventParameters' '{' eventParameters+=Parameter ( "," eventParameters+=Parameter)* '}' )?
	'}';

Receive returns cometatime::Receive:
	{cometatime::Receive}
	'Receive'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('kind' kind=InterfaceKind)?
		('uses' '(' uses+=[cometatime::ClockAbstraction|EString] ( "," uses+=[cometatime::ClockAbstraction|EString])* ')' )?
		('eventParameters' '{' eventParameters+=Parameter ( "," eventParameters+=Parameter)* '}' )?
	'}';

Ack returns cometatime::Ack: 
	{cometatime::Ack}
	'Ack'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('kind' kind=InterfaceKind)?
		('uses' '(' uses+=[cometatime::ClockAbstraction|EString] ( "," uses+=[cometatime::ClockAbstraction|EString])* ')' )?
		('eventParameters' '{' eventParameters+=Parameter ( "," eventParameters+=Parameter)* '}' )?
	'}';

CometaGuard returns ccsl4cometaspecialisation::CCSL4CometaGuard:
	{ccsl4cometaspecialisation::CCSL4CometaGuard}
	'CometaGuard'
	'{'
		'content' content=EString
		('rtElements' '(' rtElements+=[cometatime::RTInterface|EString] ( "," rtElements+=[cometatime::RTInterface|EString])* ')' )?
	'}';

CometaAction returns ccsl4cometaspecialisation::CCSL4CometaAction:
	{ccsl4cometaspecialisation::CCSL4CometaAction}
	'CometaAction'
	'{'
		'content' content=EString
		('rtElements' '(' rtElements+=[cometatime::RTInterface|EString] ( "," rtElements+=[cometatime::RTInterface|EString])* ')' )?
	'}';

Transition returns fsmdefinition::Transition:
	'from' source=[fsmdefinition::State|EString] 'to' target=[fsmdefinition::State|EString]':'name=EString ('-version' version=EString'-')?
	('|definition' definition=EString '|')? '('
		('if' guard=Guard)?
		('when' trigger=Trigger)?
		('do' (actions+=Action))*
	')';

	
Guard returns fsmdefinition::Guard:
	CCSLGuard | CometaGuard;

CCSLGuard returns ccslmoc::CCSLGuard:
	{ccslmoc::CCSLGuard}
	'['(value=[ClassicalExpression::BooleanExpression|EString])']'

;

Trigger returns fsmdefinition::Trigger:
	CCSLTrigger | CometaTrigger;
	

CometaTrigger returns cometamoc::CometaTrigger:
	{cometamoc::CometaTrigger}
	'/' triggOn = [cometatime::Event];

Event returns cometatime::Event:
	Send|Receive|Ack;	
	
CCSLTrigger returns ccslmoc::CCSLTrigger:
	((trueTriggers+=[Clock|EString])|
	('not' '(' falseTriggers+=[Clock|EString])')')+
	('.' (trueTriggers+=[Clock|EString])|
	('not' '(' falseTriggers+=[Clock|EString])')')*
	//('and' trigger+=[TimeModel::Clock|EString])*
;

State returns fsmdefinition::State:
	{fsmdefinition::State}




	'State' name=EString ('version' version=EString)? ('definition' definition=EString)? '('
		
		(('in' ':' inputTransitions+=[fsmdefinition::Transition|EString])? ( "," inputTransitions+=[fsmdefinition::Transition|EString])* ';' )?
		(('out' ':' outputTransitions+=[fsmdefinition::Transition|EString])? ( "," outputTransitions+=[fsmdefinition::Transition|EString])* ';' )?
		('do' (actions+=Action))*
	')';
	
Action returns fsmdefinition::Action:
	CCSLAction | CometaAction;
	
CCSLAction returns ccslmoc::CCSLAction:
	FinishClock | IntegerAssignemnt;
	
IntegerAssignemnt returns ccslmoc::IntegerAssignement:
{ccslmoc::IntegerAssignement}
	'Assign' name=EString '('leftValue=IntegerRef ':=' rightValue=IntegerExpression ')'
;

IntegerExpression returns ClassicalExpression::IntegerExpression:
	BinaryIntegerExpression | UnaryIntegerExpression |IntegerRef | SeqGetHead |IntegerVariableRef;

BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignemnt;

UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression: 
 UnaryIntPlus | UnaryIntMinus;

IntEqual returns ClassicalExpression::IntEqual:
	'IntEqual' ('name' name=ID)?'('leftValue=IntegerExpression
		'==' rightValue=IntegerExpression
    ')';	
	
FinishClock returns ccslmoc::FinishClock:
{ccslmoc::FinishClock}
	'kill' '(' clock=[Clock|EString]')'
;

CompositeComponent returns cometastructure::CompositeComponent:
	{cometastructure::CompositeComponent}
	'CompositeComponent'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('behaviorMap' behaviorMap=[cometamoc::Behavior|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('ownedPortInstances' '{' ownedPortInstances+=MoCPort ( "," ownedPortInstances+=MoCPort)* '}' )?
		('parts' '{' parts+=Part ( "," parts+=Part)* '}' )?
		('connectors' '{' connectors+=MoCConnector ( "," connectors+=MoCConnector)* '}' )?
		('subComponents' '{' subComponents+=MoCComponent ( "," subComponents+=MoCComponent)* '}' )?
	'}';

BasicComponent returns cometastructure::BasicComponent:
	{cometastructure::BasicComponent}
	'BasicComponent'
	name=EString
	'{'
		('version' version=EString)?
		('definition' definition=EString)?
		('behaviorMap' behaviorMap=[cometamoc::Behavior|EString])?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('ownedPortInstances' '{' ownedPortInstances+=MoCPort ( "," ownedPortInstances+=MoCPort)* '}' )?
		('computation' computation=OpaqueBlock)?
	'}';

PortKind returns cometastructure::PortKind:
	'PortKind' /* TODO: implement this rule and an appropriate IValueConverter */;

