module org.gemoc.mocc.cometafsm.model.xtext.FSMDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/gemoc/mocc/cometafsm/model/xtext/FSMDsl.xtext"
var fileExtensions = "fsmdsl"
var projectName = "org.gemoc.mocc.cometafsm.model.xtext.fsmdsl"
var runtimeProject = "../${projectName}"
//var generateXtendStub = true

Workflow {
	bean = StandaloneSetup {
		//scanClassPath  = true
		platformUri = "${runtimeProject}/.."
		
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.CCSLModelPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.BasicType.BasicTypePackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClassicalExpression.ClassicalExpressionPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.KernelExpression.KernelExpressionPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.PrimitivesTypeValue.PrimitivesTypeValuePackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.TimeModelPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.ClockExpressionAndRelationPackage"
		registerGeneratedEPackage = "fr.inria.aoste.timesquare.ccslkernel.model.TimeModel.CCSLModel.ClockExpressionAndRelation.KernelRelation.KernelRelationPackage"
	    registerGeneratedEPackage = "org.gemoc.mocc.cometafsm.model.cometafsm.CometafsmPackage"
	    
		//registerGenModelFile = "platform:/resource/org.gemoc.mocc.cometafsm.model/model/Cometafsm.genmodel"
		//registerGenModelFile = "platform:/resource/fr.inria.aoste.timesquare.ccslkernel.model/model/TimeModel.genmodel"
	
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI
			fileExtensions = fileExtensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}//auto-inject {}

			// serializer 2.0
			//fragment = serializer.SerializerFragment auto-inject {
				//generateStub = false
			//}

			// the old serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}//auto-inject {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {//auto-inject {
				fileExtensions = fileExtensions
			}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment {//auto-inject {
				options = {
					classSplitting = true
					backtrack = true
				}
			}
			
			// generates Java API for the generated EPackages
			//fragment = ecore.EcoreGeneratorFragment auto-inject {}

			// the Ecore2Xtext specific terminal converter
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}//auto-inject {}
			

			// Xtend-based API for validation 
			fragment = validation.JavaValidatorFragment {//auto-inject {
			 composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			 composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// old scoping and exporting API 
			// fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			// fragment = exporting.QualifiedNamesFragment auto-inject {}

			// scoping and exporting API
			fragment = scoping.ImportURIScopingFragment {}//auto-inject {}
			fragment = exporting.SimpleNamesFragment {}//auto-inject {}
			
			// generator API
			//fragment = generator.GeneratorFragment auto-inject {}
			
			
			// formatter API 
			// fragment = formatting.FormatterFragment auto-inject {}
			fragment = ecore2xtext.FormatterFragment {}//auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}//auto-inject {}

			// outline API 
            fragment = outline.OutlineTreeProviderFragment {}//auto-inject {}
            fragment = outline.QuickOutlineFragment {}//auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment {}//auto-inject {}

			//content assist API 
			fragment = contentAssist.JavaBasedContentAssistFragment {}//auto-inject {}

			// antlr parser generator tailored for content assist 
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {//auto-inject {
				options = {
					classSplitting = true
					backtrack = true
				}
			}
			
			fragment = builder.BuilderIntegrationFragment {}//auto-inject {}		

			
			
			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}//auto-inject {}

			// project wizard (optional) 
			fragment = projectWizard.SimpleProjectWizardFragment {//auto-inject {
					generatorProjectName = "${projectName}.generator" 
			}
			
			
			// rename refactoring
			//fragment = refactoring.RefactorElementNameFragment auto-inject {}

			// provides the necessary bindings for java types integration
			//fragment = types.TypesGeneratorFragment auto-inject {}
			
			// generates the required bindings only if the grammar inherits from Xbase
			//fragment = xbase.XbaseGeneratorFragment auto-inject {}

			// provides a preference page for template proposals
			//fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
            //fragment = compare.CompareFragment auto-inject {}
		}
	}
}
