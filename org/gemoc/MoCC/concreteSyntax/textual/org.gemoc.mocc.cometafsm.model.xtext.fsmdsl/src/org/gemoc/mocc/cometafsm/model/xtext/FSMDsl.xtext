// automatically generated by Xtext
//And hand modified!
grammar org.gemoc.mocc.cometafsm.model.xtext.FSMDsl with fr.inria.aoste.timesquare.ccslkernel.library.xtext.CCSLLibrary

import "http://org.gemoc.mocc.cometafsm/1.0" as cometa   
import "http://fr.inria.aoste.timemodel.primitivetypes" as PrimitivesTypeValue
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://fr.inria.aoste.timemodel" as timemodel
import "http://fr.inria.aoste.timemodel.classicalexpression" as ClassicalExpression
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation" as ClockExpressionAndRelation
import "http://fr.inria.aoste.timemodel.basicTypes" as BasicType
 
StateMachineDefinition returns cometa::StateMachineDefinition: 
	{cometa::StateMachineDefinition}
	'StateMachineDefinition' name=EString ('-version' version=EString'-')?
		('|definition' definition=EString '|')?
	'{'
		(declarationBlock=DeclarationBlock)?
		('init' initialState= [cometa::State|EString])';'
		('finals' ':' finalStates+=[cometa::State|EString] ( "," finalStates+=[cometa::State|EString])* ';' )?
		((states+=State)|
		(transitions+=Transition))+
		
    '}';
 
DeclarationBlock returns cometa::DeclarationBlock: 
   {cometa::DeclarationBlock}
    'Declarations {'(concreteEntities+=ConcreteEntity)*
		(classicalExpressions+=BooleanExpression)* '}'
; 

Transition returns cometa::Transition:
	{cometa::Transition}
	'from' source=[cometa::State|EString] 'to' target=[cometa::State|EString]':'name=EString ('-version' version=EString'-')?
	('|definition' definition=EString '|')? '('
		('if' guard=Guard)?
		('when' trigger=Trigger)?
		('do' (actions+=Action))*
	')';

Action returns cometa::AbstractAction:
	IntegerAssignement	
;

State returns cometa::State:
	{cometa::State}
	'State' name=EString ('-version' version=EString'-')? ('|definition' definition=EString '|')? '('
		('in' ':' inputTransitions+=[cometa::Transition|EString] ( "," inputTransitions+=[cometa::Transition|EString])* ';' )?
		('out' ':' outputTransitions+=[cometa::Transition|EString] ( "," outputTransitions+=[cometa::Transition|EString])* ';' )?
	')';


Guard returns cometa::Guard:
	{cometa::Guard}
	('['(value=[ClassicalExpression::BooleanExpression|EString])']')?
	;

Trigger returns cometa::Trigger:
	{cometa::Trigger}
	'Trigger'
	'{'
		('trueTriggers' '(' trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] ( "," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ')' )?
		('falseTriggers' '(' falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] ( "," falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ')' )?
	'}';
	
BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement;
	
IntegerAssignement returns cometa::IntegerAssignement:
	{cometa::IntegerAssignement}
	'Assign' name=EString '('leftValue=IntegerRef ':=' rightValue=IntegerExpression ')'
;

IntegerExpression returns ClassicalExpression::IntegerExpression:
	BinaryIntegerExpression | UnaryIntegerExpression |IntegerRef | SeqGetHead |IntegerVariableRef;

	
UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression: 
 UnaryIntPlus | UnaryIntMinus;

IntEqual returns ClassicalExpression::IntEqual:
	'IntEqual' ('name' name=ID)?'('leftValue=IntegerExpression
		'==' rightValue=IntegerExpression
    ')';
