/*
* generated by Xtext
*/
package org.gemoc.mocc.cometafsm.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import fr.inria.aoste.timesquare.ccslkernel.library.xtext.services.CCSLLibraryGrammarAccess;

@Singleton
public class FSMDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateMachineDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionEStringParserRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefinitionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionEStringParserRuleCall_4_1_0 = (RuleCall)cDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationBlockDeclarationBlockParserRuleCall_6_0 = (RuleCall)cDeclarationBlockAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInitKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInitialStateAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cInitialStateStateCrossReference_7_1_0 = (CrossReference)cInitialStateAssignment_7_1.eContents().get(0);
		private final RuleCall cInitialStateStateEStringParserRuleCall_7_1_0_1 = (RuleCall)cInitialStateStateCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cStatesAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_9_0_0 = (RuleCall)cStatesAssignment_9_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_9_1_0 = (RuleCall)cTransitionsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//StateMachineDefinition returns cometa::StateMachineDefinition:
		//	{cometa::StateMachineDefinition} "StateMachineDefinition" name=EString ("-version" version=EString "-")?
		//	("|definition" definition=EString "|")? "{" declarationBlock=DeclarationBlock? ("init"
		//	initialState=[cometa::State|EString]) ";" (states+=State | transitions+=Transition)+ "}";
		public ParserRule getRule() { return rule; }

		//{cometa::StateMachineDefinition} "StateMachineDefinition" name=EString ("-version" version=EString "-")? ("|definition"
		//definition=EString "|")? "{" declarationBlock=DeclarationBlock? ("init" initialState=[cometa::State|EString]) ";"
		//(states+=State | transitions+=Transition)+ "}"
		public Group getGroup() { return cGroup; }

		//{cometa::StateMachineDefinition}
		public Action getStateMachineDefinitionAction_0() { return cStateMachineDefinitionAction_0; }

		//"StateMachineDefinition"
		public Keyword getStateMachineDefinitionKeyword_1() { return cStateMachineDefinitionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("-version" version=EString "-")?
		public Group getGroup_3() { return cGroup_3; }

		//"-version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=EString
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//EString
		public RuleCall getVersionEStringParserRuleCall_3_1_0() { return cVersionEStringParserRuleCall_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_2() { return cHyphenMinusKeyword_3_2; }

		//("|definition" definition=EString "|")?
		public Group getGroup_4() { return cGroup_4; }

		//"|definition"
		public Keyword getDefinitionKeyword_4_0() { return cDefinitionKeyword_4_0; }

		//definition=EString
		public Assignment getDefinitionAssignment_4_1() { return cDefinitionAssignment_4_1; }

		//EString
		public RuleCall getDefinitionEStringParserRuleCall_4_1_0() { return cDefinitionEStringParserRuleCall_4_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4_2() { return cVerticalLineKeyword_4_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//declarationBlock=DeclarationBlock?
		public Assignment getDeclarationBlockAssignment_6() { return cDeclarationBlockAssignment_6; }

		//DeclarationBlock
		public RuleCall getDeclarationBlockDeclarationBlockParserRuleCall_6_0() { return cDeclarationBlockDeclarationBlockParserRuleCall_6_0; }

		//"init" initialState=[cometa::State|EString]
		public Group getGroup_7() { return cGroup_7; }

		//"init"
		public Keyword getInitKeyword_7_0() { return cInitKeyword_7_0; }

		//initialState=[cometa::State|EString]
		public Assignment getInitialStateAssignment_7_1() { return cInitialStateAssignment_7_1; }

		//[cometa::State|EString]
		public CrossReference getInitialStateStateCrossReference_7_1_0() { return cInitialStateStateCrossReference_7_1_0; }

		//EString
		public RuleCall getInitialStateStateEStringParserRuleCall_7_1_0_1() { return cInitialStateStateEStringParserRuleCall_7_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//(states+=State | transitions+=Transition)+
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//states+=State
		public Assignment getStatesAssignment_9_0() { return cStatesAssignment_9_0; }

		//State
		public RuleCall getStatesStateParserRuleCall_9_0_0() { return cStatesStateParserRuleCall_9_0_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_9_1() { return cTransitionsAssignment_9_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_9_1_0() { return cTransitionsTransitionParserRuleCall_9_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class DeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeclarationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConcreteEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcreteEntitiesConcreteEntityParserRuleCall_2_0 = (RuleCall)cConcreteEntitiesAssignment_2.eContents().get(0);
		private final Assignment cClassicalExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassicalExpressionsBooleanExpressionParserRuleCall_3_0 = (RuleCall)cClassicalExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclarationBlock returns cometa::DeclarationBlock:
		//	{cometa::DeclarationBlock} "Declarations {" concreteEntities+=ConcreteEntity*
		//	classicalExpressions+=BooleanExpression* "}";
		public ParserRule getRule() { return rule; }

		//{cometa::DeclarationBlock} "Declarations {" concreteEntities+=ConcreteEntity* classicalExpressions+=BooleanExpression*
		//"}"
		public Group getGroup() { return cGroup; }

		//{cometa::DeclarationBlock}
		public Action getDeclarationBlockAction_0() { return cDeclarationBlockAction_0; }

		//"Declarations {"
		public Keyword getDeclarationsKeyword_1() { return cDeclarationsKeyword_1; }

		//concreteEntities+=ConcreteEntity*
		public Assignment getConcreteEntitiesAssignment_2() { return cConcreteEntitiesAssignment_2; }

		//ConcreteEntity
		public RuleCall getConcreteEntitiesConcreteEntityParserRuleCall_2_0() { return cConcreteEntitiesConcreteEntityParserRuleCall_2_0; }

		//classicalExpressions+=BooleanExpression*
		public Assignment getClassicalExpressionsAssignment_3() { return cClassicalExpressionsAssignment_3; }

		//BooleanExpression
		public RuleCall getClassicalExpressionsBooleanExpressionParserRuleCall_3_0() { return cClassicalExpressionsBooleanExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameEStringParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVersionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVersionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVersionEStringParserRuleCall_7_1_0 = (RuleCall)cVersionAssignment_7_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDefinitionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDefinitionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDefinitionEStringParserRuleCall_8_1_0 = (RuleCall)cDefinitionAssignment_8_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cIfKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cGuardAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_10_1_0 = (RuleCall)cGuardAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cWhenKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTriggerAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_11_1_0 = (RuleCall)cTriggerAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cDoKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cActionsAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_12_1_0 = (RuleCall)cActionsAssignment_12_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Transition returns cometa::Transition:
		//	{cometa::Transition} "from" source=[cometa::State|EString] "to" target=[cometa::State|EString] ":" name=EString
		//	("-version" version=EString "-")? ("|definition" definition=EString "|")? "(" ("if" guard=Guard)? ("when"
		//	trigger=Trigger)? ("do" actions+=Action)* ")";
		public ParserRule getRule() { return rule; }

		//{cometa::Transition} "from" source=[cometa::State|EString] "to" target=[cometa::State|EString] ":" name=EString
		//("-version" version=EString "-")? ("|definition" definition=EString "|")? "(" ("if" guard=Guard)? ("when"
		//trigger=Trigger)? ("do" actions+=Action)* ")"
		public Group getGroup() { return cGroup; }

		//{cometa::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[cometa::State|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[cometa::State|EString]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }

		//EString
		public RuleCall getSourceStateEStringParserRuleCall_2_0_1() { return cSourceStateEStringParserRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=[cometa::State|EString]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[cometa::State|EString]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }

		//EString
		public RuleCall getTargetStateEStringParserRuleCall_4_0_1() { return cTargetStateEStringParserRuleCall_4_0_1; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//name=EString
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//EString
		public RuleCall getNameEStringParserRuleCall_6_0() { return cNameEStringParserRuleCall_6_0; }

		//("-version" version=EString "-")?
		public Group getGroup_7() { return cGroup_7; }

		//"-version"
		public Keyword getVersionKeyword_7_0() { return cVersionKeyword_7_0; }

		//version=EString
		public Assignment getVersionAssignment_7_1() { return cVersionAssignment_7_1; }

		//EString
		public RuleCall getVersionEStringParserRuleCall_7_1_0() { return cVersionEStringParserRuleCall_7_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_7_2() { return cHyphenMinusKeyword_7_2; }

		//("|definition" definition=EString "|")?
		public Group getGroup_8() { return cGroup_8; }

		//"|definition"
		public Keyword getDefinitionKeyword_8_0() { return cDefinitionKeyword_8_0; }

		//definition=EString
		public Assignment getDefinitionAssignment_8_1() { return cDefinitionAssignment_8_1; }

		//EString
		public RuleCall getDefinitionEStringParserRuleCall_8_1_0() { return cDefinitionEStringParserRuleCall_8_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_8_2() { return cVerticalLineKeyword_8_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_9() { return cLeftParenthesisKeyword_9; }

		//("if" guard=Guard)?
		public Group getGroup_10() { return cGroup_10; }

		//"if"
		public Keyword getIfKeyword_10_0() { return cIfKeyword_10_0; }

		//guard=Guard
		public Assignment getGuardAssignment_10_1() { return cGuardAssignment_10_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_10_1_0() { return cGuardGuardParserRuleCall_10_1_0; }

		//("when" trigger=Trigger)?
		public Group getGroup_11() { return cGroup_11; }

		//"when"
		public Keyword getWhenKeyword_11_0() { return cWhenKeyword_11_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_11_1() { return cTriggerAssignment_11_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_11_1_0() { return cTriggerTriggerParserRuleCall_11_1_0; }

		//("do" actions+=Action)*
		public Group getGroup_12() { return cGroup_12; }

		//"do"
		public Keyword getDoKeyword_12_0() { return cDoKeyword_12_0; }

		//actions+=Action
		public Assignment getActionsAssignment_12_1() { return cActionsAssignment_12_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_12_1_0() { return cActionsActionParserRuleCall_12_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final RuleCall cIntegerAssignementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Action returns cometa::AbstractAction:
		//	IntegerAssignement;
		public ParserRule getRule() { return rule; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall() { return cIntegerAssignementParserRuleCall; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionEStringParserRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefinitionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionEStringParserRuleCall_4_1_0 = (RuleCall)cDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Keyword cInKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cColonKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cInputTransitionsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final CrossReference cInputTransitionsTransitionCrossReference_6_0_2_0 = (CrossReference)cInputTransitionsAssignment_6_0_2.eContents().get(0);
		private final RuleCall cInputTransitionsTransitionEStringParserRuleCall_6_0_2_0_1 = (RuleCall)cInputTransitionsTransitionCrossReference_6_0_2_0.eContents().get(1);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cInputTransitionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cInputTransitionsTransitionCrossReference_6_1_1_0 = (CrossReference)cInputTransitionsAssignment_6_1_1.eContents().get(0);
		private final RuleCall cInputTransitionsTransitionEStringParserRuleCall_6_1_1_0_1 = (RuleCall)cInputTransitionsTransitionCrossReference_6_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cGroup_7.eContents().get(0);
		private final Keyword cOutKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Keyword cColonKeyword_7_0_1 = (Keyword)cGroup_7_0.eContents().get(1);
		private final Assignment cOutputTransitionsAssignment_7_0_2 = (Assignment)cGroup_7_0.eContents().get(2);
		private final CrossReference cOutputTransitionsTransitionCrossReference_7_0_2_0 = (CrossReference)cOutputTransitionsAssignment_7_0_2.eContents().get(0);
		private final RuleCall cOutputTransitionsTransitionEStringParserRuleCall_7_0_2_0_1 = (RuleCall)cOutputTransitionsTransitionCrossReference_7_0_2_0.eContents().get(1);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cOutputTransitionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final CrossReference cOutputTransitionsTransitionCrossReference_7_1_1_0 = (CrossReference)cOutputTransitionsAssignment_7_1_1.eContents().get(0);
		private final RuleCall cOutputTransitionsTransitionEStringParserRuleCall_7_1_1_0_1 = (RuleCall)cOutputTransitionsTransitionCrossReference_7_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//State returns cometa::State:
		//	{cometa::State} "State" name=EString ("-version" version=EString "-")? ("|definition" definition=EString "|")? "("
		//	(("in" ":" inputTransitions+=[cometa::Transition|EString])? ("," inputTransitions+=[cometa::Transition|EString])*
		//	";")? (("out" ":" outputTransitions+=[cometa::Transition|EString])? (","
		//	outputTransitions+=[cometa::Transition|EString])* ";")? ")";
		public ParserRule getRule() { return rule; }

		//{cometa::State} "State" name=EString ("-version" version=EString "-")? ("|definition" definition=EString "|")? "("
		//(("in" ":" inputTransitions+=[cometa::Transition|EString])? ("," inputTransitions+=[cometa::Transition|EString])*
		//";")? (("out" ":" outputTransitions+=[cometa::Transition|EString])? (","
		//outputTransitions+=[cometa::Transition|EString])* ";")? ")"
		public Group getGroup() { return cGroup; }

		//{cometa::State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"State"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("-version" version=EString "-")?
		public Group getGroup_3() { return cGroup_3; }

		//"-version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=EString
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//EString
		public RuleCall getVersionEStringParserRuleCall_3_1_0() { return cVersionEStringParserRuleCall_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_2() { return cHyphenMinusKeyword_3_2; }

		//("|definition" definition=EString "|")?
		public Group getGroup_4() { return cGroup_4; }

		//"|definition"
		public Keyword getDefinitionKeyword_4_0() { return cDefinitionKeyword_4_0; }

		//definition=EString
		public Assignment getDefinitionAssignment_4_1() { return cDefinitionAssignment_4_1; }

		//EString
		public RuleCall getDefinitionEStringParserRuleCall_4_1_0() { return cDefinitionEStringParserRuleCall_4_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4_2() { return cVerticalLineKeyword_4_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(("in" ":" inputTransitions+=[cometa::Transition|EString])? ("," inputTransitions+=[cometa::Transition|EString])* ";")?
		public Group getGroup_6() { return cGroup_6; }

		//("in" ":" inputTransitions+=[cometa::Transition|EString])?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"in"
		public Keyword getInKeyword_6_0_0() { return cInKeyword_6_0_0; }

		//":"
		public Keyword getColonKeyword_6_0_1() { return cColonKeyword_6_0_1; }

		//inputTransitions+=[cometa::Transition|EString]
		public Assignment getInputTransitionsAssignment_6_0_2() { return cInputTransitionsAssignment_6_0_2; }

		//[cometa::Transition|EString]
		public CrossReference getInputTransitionsTransitionCrossReference_6_0_2_0() { return cInputTransitionsTransitionCrossReference_6_0_2_0; }

		//EString
		public RuleCall getInputTransitionsTransitionEStringParserRuleCall_6_0_2_0_1() { return cInputTransitionsTransitionEStringParserRuleCall_6_0_2_0_1; }

		//("," inputTransitions+=[cometa::Transition|EString])*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//inputTransitions+=[cometa::Transition|EString]
		public Assignment getInputTransitionsAssignment_6_1_1() { return cInputTransitionsAssignment_6_1_1; }

		//[cometa::Transition|EString]
		public CrossReference getInputTransitionsTransitionCrossReference_6_1_1_0() { return cInputTransitionsTransitionCrossReference_6_1_1_0; }

		//EString
		public RuleCall getInputTransitionsTransitionEStringParserRuleCall_6_1_1_0_1() { return cInputTransitionsTransitionEStringParserRuleCall_6_1_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }

		//(("out" ":" outputTransitions+=[cometa::Transition|EString])? ("," outputTransitions+=[cometa::Transition|EString])*
		//";")?
		public Group getGroup_7() { return cGroup_7; }

		//("out" ":" outputTransitions+=[cometa::Transition|EString])?
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"out"
		public Keyword getOutKeyword_7_0_0() { return cOutKeyword_7_0_0; }

		//":"
		public Keyword getColonKeyword_7_0_1() { return cColonKeyword_7_0_1; }

		//outputTransitions+=[cometa::Transition|EString]
		public Assignment getOutputTransitionsAssignment_7_0_2() { return cOutputTransitionsAssignment_7_0_2; }

		//[cometa::Transition|EString]
		public CrossReference getOutputTransitionsTransitionCrossReference_7_0_2_0() { return cOutputTransitionsTransitionCrossReference_7_0_2_0; }

		//EString
		public RuleCall getOutputTransitionsTransitionEStringParserRuleCall_7_0_2_0_1() { return cOutputTransitionsTransitionEStringParserRuleCall_7_0_2_0_1; }

		//("," outputTransitions+=[cometa::Transition|EString])*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//outputTransitions+=[cometa::Transition|EString]
		public Assignment getOutputTransitionsAssignment_7_1_1() { return cOutputTransitionsAssignment_7_1_1; }

		//[cometa::Transition|EString]
		public CrossReference getOutputTransitionsTransitionCrossReference_7_1_1_0() { return cOutputTransitionsTransitionCrossReference_7_1_1_0; }

		//EString
		public RuleCall getOutputTransitionsTransitionEStringParserRuleCall_7_1_1_0_1() { return cOutputTransitionsTransitionEStringParserRuleCall_7_1_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cValueBooleanExpressionCrossReference_1_1_0 = (CrossReference)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValueBooleanExpressionEStringParserRuleCall_1_1_0_1 = (RuleCall)cValueBooleanExpressionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Guard returns cometa::Guard:
		//	{cometa::Guard} ("[" value=[ClassicalExpression::BooleanExpression|EString] "]")?;
		public ParserRule getRule() { return rule; }

		//{cometa::Guard} ("[" value=[ClassicalExpression::BooleanExpression|EString] "]")?
		public Group getGroup() { return cGroup; }

		//{cometa::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//("[" value=[ClassicalExpression::BooleanExpression|EString] "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//value=[ClassicalExpression::BooleanExpression|EString]
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//[ClassicalExpression::BooleanExpression|EString]
		public CrossReference getValueBooleanExpressionCrossReference_1_1_0() { return cValueBooleanExpressionCrossReference_1_1_0; }

		//EString
		public RuleCall getValueBooleanExpressionEStringParserRuleCall_1_1_0_1() { return cValueBooleanExpressionEStringParserRuleCall_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTrueTriggersKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTrueTriggersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_3_2_0 = (CrossReference)cTrueTriggersAssignment_3_2.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTrueTriggersAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_3_3_1_0 = (CrossReference)cTrueTriggersAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFalseTriggersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFalseTriggersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_4_2_0 = (CrossReference)cFalseTriggersAssignment_4_2.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFalseTriggersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_4_3_1_0 = (CrossReference)cFalseTriggersAssignment_4_3_1.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Trigger returns cometa::Trigger:
		//	{cometa::Trigger} "Trigger" "{" ("trueTriggers" "("
		//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}";
		public ParserRule getRule() { return rule; }

		//{cometa::Trigger} "Trigger" "{" ("trueTriggers" "(" trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		//("," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}"
		public Group getGroup() { return cGroup; }

		//{cometa::Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//"Trigger"
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("trueTriggers" "(" trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"trueTriggers"
		public Keyword getTrueTriggersKeyword_3_0() { return cTrueTriggersKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_3_2() { return cTrueTriggersAssignment_3_2; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_3_2_0() { return cTrueTriggersBindableEntityCrossReference_3_2_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1; }

		//("," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_3_3_1() { return cTrueTriggersAssignment_3_3_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_3_3_1_0() { return cTrueTriggersBindableEntityCrossReference_3_3_1_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//("falseTriggers" "(" falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"falseTriggers"
		public Keyword getFalseTriggersKeyword_4_0() { return cFalseTriggersKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_4_2() { return cFalseTriggersAssignment_4_2; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_4_2_0() { return cFalseTriggersBindableEntityCrossReference_4_2_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1; }

		//("," falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_4_3_1() { return cFalseTriggersAssignment_4_3_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_4_3_1_0() { return cFalseTriggersBindableEntityCrossReference_4_3_1_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BinaryIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryIntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntPlusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntMultiplyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntDivideParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerAssignementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
		//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement;
		public ParserRule getRule() { return rule; }

		//IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntPlus
		public RuleCall getIntPlusParserRuleCall_0() { return cIntPlusParserRuleCall_0; }

		//IntMinus
		public RuleCall getIntMinusParserRuleCall_1() { return cIntMinusParserRuleCall_1; }

		//IntMultiply
		public RuleCall getIntMultiplyParserRuleCall_2() { return cIntMultiplyParserRuleCall_2; }

		//IntDivide
		public RuleCall getIntDivideParserRuleCall_3() { return cIntDivideParserRuleCall_3; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall_4() { return cIntegerAssignementParserRuleCall_4; }
	}

	public class IntegerAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_4_0 = (RuleCall)cLeftValueAssignment_4.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_6_0 = (RuleCall)cRightValueAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IntegerAssignement returns cometa::IntegerAssignement:
		//	{cometa::IntegerAssignement} "Assign" name=EString "(" leftValue=IntegerRef ":=" rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//{cometa::IntegerAssignement} "Assign" name=EString "(" leftValue=IntegerRef ":=" rightValue=IntegerExpression ")"
		public Group getGroup() { return cGroup; }

		//{cometa::IntegerAssignement}
		public Action getIntegerAssignementAction_0() { return cIntegerAssignementAction_0; }

		//"Assign"
		public Keyword getAssignKeyword_1() { return cAssignKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_4() { return cLeftValueAssignment_4; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_4_0() { return cLeftValueIntegerRefParserRuleCall_4_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_5() { return cColonEqualsSignKeyword_5; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_6() { return cRightValueAssignment_6; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_6_0() { return cRightValueIntegerExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class IntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryIntegerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryIntegerExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSeqGetHeadParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerVariableRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IntegerExpression returns ClassicalExpression::IntegerExpression:
		//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
		public ParserRule getRule() { return rule; }

		//BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryIntegerExpression
		public RuleCall getBinaryIntegerExpressionParserRuleCall_0() { return cBinaryIntegerExpressionParserRuleCall_0; }

		//UnaryIntegerExpression
		public RuleCall getUnaryIntegerExpressionParserRuleCall_1() { return cUnaryIntegerExpressionParserRuleCall_1; }

		//IntegerRef
		public RuleCall getIntegerRefParserRuleCall_2() { return cIntegerRefParserRuleCall_2; }

		//SeqGetHead
		public RuleCall getSeqGetHeadParserRuleCall_3() { return cSeqGetHeadParserRuleCall_3; }

		//IntegerVariableRef
		public RuleCall getIntegerVariableRefParserRuleCall_4() { return cIntegerVariableRefParserRuleCall_4; }
	}

	public class UnaryIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryIntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryIntPlusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryIntMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
		//	UnaryIntPlus | UnaryIntMinus;
		public ParserRule getRule() { return rule; }

		//UnaryIntPlus | UnaryIntMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryIntPlus
		public RuleCall getUnaryIntPlusParserRuleCall_0() { return cUnaryIntPlusParserRuleCall_0; }

		//UnaryIntMinus
		public RuleCall getUnaryIntMinusParserRuleCall_1() { return cUnaryIntMinusParserRuleCall_1; }
	}

	public class IntEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntEqualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_3_0 = (RuleCall)cLeftValueAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_5_0 = (RuleCall)cRightValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IntEqual returns ClassicalExpression::IntEqual:
		//	"IntEqual" ("name" name=ID)? "(" leftValue=IntegerExpression "==" rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"IntEqual" ("name" name=ID)? "(" leftValue=IntegerExpression "==" rightValue=IntegerExpression ")"
		public Group getGroup() { return cGroup; }

		//"IntEqual"
		public Keyword getIntEqualKeyword_0() { return cIntEqualKeyword_0; }

		//("name" name=ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"name"
		public Keyword getNameKeyword_1_0() { return cNameKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_3() { return cLeftValueAssignment_3; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_3_0() { return cLeftValueIntegerExpressionParserRuleCall_3_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_5() { return cRightValueAssignment_5; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_5_0() { return cRightValueIntegerExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	
	
	private StateMachineDefinitionElements pStateMachineDefinition;
	private DeclarationBlockElements pDeclarationBlock;
	private TransitionElements pTransition;
	private ActionElements pAction;
	private StateElements pState;
	private GuardElements pGuard;
	private TriggerElements pTrigger;
	private BinaryIntegerExpressionElements pBinaryIntegerExpression;
	private IntegerAssignementElements pIntegerAssignement;
	private IntegerExpressionElements pIntegerExpression;
	private UnaryIntegerExpressionElements pUnaryIntegerExpression;
	private IntEqualElements pIntEqual;
	
	private final Grammar grammar;

	private CCSLLibraryGrammarAccess gaCCSLLibrary;

	@Inject
	public FSMDslGrammarAccess(GrammarProvider grammarProvider,
		CCSLLibraryGrammarAccess gaCCSLLibrary) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCCSLLibrary = gaCCSLLibrary;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.mocc.cometafsm.model.xtext.FSMDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CCSLLibraryGrammarAccess getCCSLLibraryGrammarAccess() {
		return gaCCSLLibrary;
	}

	
	//StateMachineDefinition returns cometa::StateMachineDefinition:
	//	{cometa::StateMachineDefinition} "StateMachineDefinition" name=EString ("-version" version=EString "-")?
	//	("|definition" definition=EString "|")? "{" declarationBlock=DeclarationBlock? ("init"
	//	initialState=[cometa::State|EString]) ";" (states+=State | transitions+=Transition)+ "}";
	public StateMachineDefinitionElements getStateMachineDefinitionAccess() {
		return (pStateMachineDefinition != null) ? pStateMachineDefinition : (pStateMachineDefinition = new StateMachineDefinitionElements());
	}
	
	public ParserRule getStateMachineDefinitionRule() {
		return getStateMachineDefinitionAccess().getRule();
	}

	//DeclarationBlock returns cometa::DeclarationBlock:
	//	{cometa::DeclarationBlock} "Declarations {" concreteEntities+=ConcreteEntity*
	//	classicalExpressions+=BooleanExpression* "}";
	public DeclarationBlockElements getDeclarationBlockAccess() {
		return (pDeclarationBlock != null) ? pDeclarationBlock : (pDeclarationBlock = new DeclarationBlockElements());
	}
	
	public ParserRule getDeclarationBlockRule() {
		return getDeclarationBlockAccess().getRule();
	}

	//Transition returns cometa::Transition:
	//	{cometa::Transition} "from" source=[cometa::State|EString] "to" target=[cometa::State|EString] ":" name=EString
	//	("-version" version=EString "-")? ("|definition" definition=EString "|")? "(" ("if" guard=Guard)? ("when"
	//	trigger=Trigger)? ("do" actions+=Action)* ")";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Action returns cometa::AbstractAction:
	//	IntegerAssignement;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//State returns cometa::State:
	//	{cometa::State} "State" name=EString ("-version" version=EString "-")? ("|definition" definition=EString "|")? "("
	//	(("in" ":" inputTransitions+=[cometa::Transition|EString])? ("," inputTransitions+=[cometa::Transition|EString])*
	//	";")? (("out" ":" outputTransitions+=[cometa::Transition|EString])? (","
	//	outputTransitions+=[cometa::Transition|EString])* ";")? ")";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Guard returns cometa::Guard:
	//	{cometa::Guard} ("[" value=[ClassicalExpression::BooleanExpression|EString] "]")?;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Trigger returns cometa::Trigger:
	//	{cometa::Trigger} "Trigger" "{" ("trueTriggers" "("
	//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}";
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement;
	public BinaryIntegerExpressionElements getBinaryIntegerExpressionAccess() {
		return (pBinaryIntegerExpression != null) ? pBinaryIntegerExpression : (pBinaryIntegerExpression = new BinaryIntegerExpressionElements());
	}
	
	public ParserRule getBinaryIntegerExpressionRule() {
		return getBinaryIntegerExpressionAccess().getRule();
	}

	//IntegerAssignement returns cometa::IntegerAssignement:
	//	{cometa::IntegerAssignement} "Assign" name=EString "(" leftValue=IntegerRef ":=" rightValue=IntegerExpression ")";
	public IntegerAssignementElements getIntegerAssignementAccess() {
		return (pIntegerAssignement != null) ? pIntegerAssignement : (pIntegerAssignement = new IntegerAssignementElements());
	}
	
	public ParserRule getIntegerAssignementRule() {
		return getIntegerAssignementAccess().getRule();
	}

	//IntegerExpression returns ClassicalExpression::IntegerExpression:
	//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
	public IntegerExpressionElements getIntegerExpressionAccess() {
		return (pIntegerExpression != null) ? pIntegerExpression : (pIntegerExpression = new IntegerExpressionElements());
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}

	//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
	//	UnaryIntPlus | UnaryIntMinus;
	public UnaryIntegerExpressionElements getUnaryIntegerExpressionAccess() {
		return (pUnaryIntegerExpression != null) ? pUnaryIntegerExpression : (pUnaryIntegerExpression = new UnaryIntegerExpressionElements());
	}
	
	public ParserRule getUnaryIntegerExpressionRule() {
		return getUnaryIntegerExpressionAccess().getRule();
	}

	//IntEqual returns ClassicalExpression::IntEqual:
	//	"IntEqual" ("name" name=ID)? "(" leftValue=IntegerExpression "==" rightValue=IntegerExpression ")";
	public IntEqualElements getIntEqualAccess() {
		return (pIntEqual != null) ? pIntEqual : (pIntEqual = new IntEqualElements());
	}
	
	public ParserRule getIntEqualRule() {
		return getIntEqualAccess().getRule();
	}

	//Library returns ClockExpressionAndRelation::Library:
	//	"Library" name=ID "{" (("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
	//	relationLibraries+=RelationLibrary | predefinedTypes+=Type)*) "}";
	public CCSLLibraryGrammarAccess.LibraryElements getLibraryAccess() {
		return gaCCSLLibrary.getLibraryAccess();
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//ImportStatement:
	//	"import" importURI=STRING "as" alias=String0 ";";
	public CCSLLibraryGrammarAccess.ImportStatementElements getImportStatementAccess() {
		return gaCCSLLibrary.getImportStatementAccess();
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//ExpressionLibrary returns ClockExpressionAndRelation::ExpressionLibrary:
	//	"ExpressionLibrary" name=ID "{" (elements+=Element | expressionDeclarations+=(ExpressionDeclaration |
	//	kernelExpressionDecl) | expressionDefinitions+=ExpressionDefinition)+ "}";
	public CCSLLibraryGrammarAccess.ExpressionLibraryElements getExpressionLibraryAccess() {
		return gaCCSLLibrary.getExpressionLibraryAccess();
	}
	
	public ParserRule getExpressionLibraryRule() {
		return getExpressionLibraryAccess().getRule();
	}

	//RelationLibrary returns ClockExpressionAndRelation::RelationLibrary:
	//	"RelationLibrary" name=ID "{" (elements+=Element | relationDeclarations+=(RelationDeclaration | kernelRelationDecl) |
	//	relationDefinitions+=RelationDefinition)+ "}";
	public CCSLLibraryGrammarAccess.RelationLibraryElements getRelationLibraryAccess() {
		return gaCCSLLibrary.getRelationLibraryAccess();
	}
	
	public ParserRule getRelationLibraryRule() {
		return getRelationLibraryAccess().getRule();
	}

	//ExpressionDeclaration returns ClockExpressionAndRelation::ExpressionDeclaration:
	//	"ExpressionDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")" ":"
	//	returnType=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return gaCCSLLibrary.getExpressionDeclarationAccess();
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}

	//RelationDeclaration returns ClockExpressionAndRelation::RelationDeclaration:
	//	"RelationDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")";
	public CCSLLibraryGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaCCSLLibrary.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}

	//UserExpressionDefinition_Impl returns ClockExpressionAndRelation::UserExpressionDefinition:
	//	"ExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]" "{"
	//	("root" "=" rootExpression=[ClockExpressionAndRelation::Expression|EString] (concreteEntities+=ConcreteEntity |
	//	classicalExpressions+=ClassicalExpression0)+) "}";
	public CCSLLibraryGrammarAccess.UserExpressionDefinition_ImplElements getUserExpressionDefinition_ImplAccess() {
		return gaCCSLLibrary.getUserExpressionDefinition_ImplAccess();
	}
	
	public ParserRule getUserExpressionDefinition_ImplRule() {
		return getUserExpressionDefinition_ImplAccess().getRule();
	}

	//ConditionalExpressionDefinition returns ClockExpressionAndRelation::ConditionalExpressionDefinition:
	//	"ConditionalExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString]
	//	"]" "{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & "switch" "{"
	//	exprCases+=ExprCase exprCases+=ExprCase* "}" ("default" defaultExpression=Expression)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalExpressionDefinitionElements getConditionalExpressionDefinitionAccess() {
		return gaCCSLLibrary.getConditionalExpressionDefinitionAccess();
	}
	
	public ParserRule getConditionalExpressionDefinitionRule() {
		return getConditionalExpressionDefinitionAccess().getRule();
	}

	//ExternalExpressionDefinition returns ClockExpressionAndRelation::ExternalExpressionDefinition:
	//	("Extern" | "External") "ExpressionDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalExpressionDefinitionElements getExternalExpressionDefinitionAccess() {
		return gaCCSLLibrary.getExternalExpressionDefinitionAccess();
	}
	
	public ParserRule getExternalExpressionDefinitionRule() {
		return getExternalExpressionDefinitionAccess().getRule();
	}

	//ConditionalRelationDefinition returns ClockExpressionAndRelation::ConditionalRelationDefinition:
	//	"ConditionalRelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"
	//	"{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & ("switch" "{"
	//	relCases+=RelCase relCases+=RelCase* "}" "default" defaultRelation+=Relation*)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalRelationDefinitionElements getConditionalRelationDefinitionAccess() {
		return gaCCSLLibrary.getConditionalRelationDefinitionAccess();
	}
	
	public ParserRule getConditionalRelationDefinitionRule() {
		return getConditionalRelationDefinitionAccess().getRule();
	}

	//ExternalRelationDefinition returns ClockExpressionAndRelation::ExternalRelationDefinition:
	//	("Extern" | "External") "RelationDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalRelationDefinitionElements getExternalRelationDefinitionAccess() {
		return gaCCSLLibrary.getExternalRelationDefinitionAccess();
	}
	
	public ParserRule getExternalRelationDefinitionRule() {
		return getExternalRelationDefinitionAccess().getRule();
	}

	//Relation returns ClockExpressionAndRelation::Relation:
	//	isAnAssertion?="assert"? "Relation" (name=ID "[")? type=[ClockExpressionAndRelation::RelationDeclaration|EString]
	//	"]"? "(" (bindings+=Binding ("," bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.RelationElements getRelationAccess() {
		return gaCCSLLibrary.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Expression returns ClockExpressionAndRelation::Expression:
	//	"Expression" name=ID "=" type=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "(" (bindings+=Binding (","
	//	bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaCCSLLibrary.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Binding returns ClockExpressionAndRelation::Binding:
	//	abstract=[ClockExpressionAndRelation::AbstractEntity|EString] "->"
	//	bindable=[ClockExpressionAndRelation::BindableEntity|EString];
	public CCSLLibraryGrammarAccess.BindingElements getBindingAccess() {
		return gaCCSLLibrary.getBindingAccess();
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Clock:
	//	"Clock" name=ID ":" type=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ClockElements getClockAccess() {
		return gaCCSLLibrary.getClockAccess();
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	//Type returns BasicType::Type:
	//	String1 | Boolean | Integer | Real | Char | Record | SequenceType | DiscreteClockType_Impl | DenseClockType |
	//	EnumerationType;
	public CCSLLibraryGrammarAccess.TypeElements getTypeAccess() {
		return gaCCSLLibrary.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ExpressionDefinition returns ClockExpressionAndRelation::ExpressionDefinition:
	//	UserExpressionDefinition_Impl | ConditionalExpressionDefinition | ExternalExpressionDefinition;
	public CCSLLibraryGrammarAccess.ExpressionDefinitionElements getExpressionDefinitionAccess() {
		return gaCCSLLibrary.getExpressionDefinitionAccess();
	}
	
	public ParserRule getExpressionDefinitionRule() {
		return getExpressionDefinitionAccess().getRule();
	}

	//Element returns BasicType::Element:
	//	Clock / *| CharElement * / | StringElement | BooleanElement | IntegerElement | RealElement | RecordElement |
	//	SequenceElement;
	public CCSLLibraryGrammarAccess.ElementElements getElementAccess() {
		return gaCCSLLibrary.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
	//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition;
	public CCSLLibraryGrammarAccess.RelationDefinitionElements getRelationDefinitionAccess() {
		return gaCCSLLibrary.getRelationDefinitionAccess();
	}
	
	public ParserRule getRelationDefinitionRule() {
		return getRelationDefinitionAccess().getRule();
	}

	//ExprCase returns ClockExpressionAndRelation::ExprCase:
	//	"case" condition=BooleanExpression ":" expression=Expression;
	public CCSLLibraryGrammarAccess.ExprCaseElements getExprCaseAccess() {
		return gaCCSLLibrary.getExprCaseAccess();
	}
	
	public ParserRule getExprCaseRule() {
		return getExprCaseAccess().getRule();
	}

	//RelCase returns ClockExpressionAndRelation::RelCase:
	//	"case" condition=BooleanExpression ":" relation+=Relation*;
	public CCSLLibraryGrammarAccess.RelCaseElements getRelCaseAccess() {
		return gaCCSLLibrary.getRelCaseAccess();
	}
	
	public ParserRule getRelCaseRule() {
		return getRelCaseAccess().getRule();
	}

	//UserRelationDefinition_Impl returns ClockExpressionAndRelation::UserRelationDefinition:
	//	"RelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{"
	//	(concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)+ "}";
	public CCSLLibraryGrammarAccess.UserRelationDefinition_ImplElements getUserRelationDefinition_ImplAccess() {
		return gaCCSLLibrary.getUserRelationDefinition_ImplAccess();
	}
	
	public ParserRule getUserRelationDefinition_ImplRule() {
		return getUserRelationDefinition_ImplAccess().getRule();
	}

	//ConcreteEntity returns ClockExpressionAndRelation::ConcreteEntity:
	//	Expression | Relation | Clock | Element;
	public CCSLLibraryGrammarAccess.ConcreteEntityElements getConcreteEntityAccess() {
		return gaCCSLLibrary.getConcreteEntityAccess();
	}
	
	public ParserRule getConcreteEntityRule() {
		return getConcreteEntityAccess().getRule();
	}

	//ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
	//	BooleanRef | RealRef | IntegerRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply |
	//	UnaryIntPlus | UnaryIntMinus | IntPlus | IntMinus | IntMultiply | IntDivide | Not | And | Or | Xor | RealEqual |
	//	RealInf | RealSup | IntEqual | IntInf | IntSup | SeqIsEmpty | SeqGetTail | SeqGetHead | SeqDecr | SeqSched |
	//	BooleanVariableRef | IntegerVariableRef | RealVariableRef | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.ClassicalExpression0Elements getClassicalExpression0Access() {
		return gaCCSLLibrary.getClassicalExpression0Access();
	}
	
	public ParserRule getClassicalExpression0Rule() {
		return getClassicalExpression0Access().getRule();
	}

	//SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
	//	"SeqIsEmpty" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqIsEmptyElements getSeqIsEmptyAccess() {
		return gaCCSLLibrary.getSeqIsEmptyAccess();
	}
	
	public ParserRule getSeqIsEmptyRule() {
		return getSeqIsEmptyAccess().getRule();
	}

	//SeqGetTail returns ClassicalExpression::SeqGetTail:
	//	"SeqGetTail" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqGetTailElements getSeqGetTailAccess() {
		return gaCCSLLibrary.getSeqGetTailAccess();
	}
	
	public ParserRule getSeqGetTailRule() {
		return getSeqGetTailAccess().getRule();
	}

	//SeqGetHead returns ClassicalExpression::SeqGetHead:
	//	"SeqGetHead" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqGetHeadElements getSeqGetHeadAccess() {
		return gaCCSLLibrary.getSeqGetHeadAccess();
	}
	
	public ParserRule getSeqGetHeadRule() {
		return getSeqGetHeadAccess().getRule();
	}

	//BindableEntity returns ClockExpressionAndRelation::BindableEntity:
	//	Expression | Relation | AbstractEntity;
	public CCSLLibraryGrammarAccess.BindableEntityElements getBindableEntityAccess() {
		return gaCCSLLibrary.getBindableEntityAccess();
	}
	
	public ParserRule getBindableEntityRule() {
		return getBindableEntityAccess().getRule();
	}

	//RealExpression returns ClassicalExpression::RealExpression:
	//	RealRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply | RealVariableRef;
	public CCSLLibraryGrammarAccess.RealExpressionElements getRealExpressionAccess() {
		return gaCCSLLibrary.getRealExpressionAccess();
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}

	//BooleanExpression returns ClassicalExpression::BooleanExpression:
	//	BooleanRef | Not | And | Or | Xor | RealEqual | RealInf | RealSup | IntEqual | IntInf | IntSup | SeqIsEmpty |
	//	BooleanVariableRef;
	public CCSLLibraryGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaCCSLLibrary.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//SeqExpression returns ClassicalExpression::SeqExpression:
	//	SeqGetTail | SeqDecr | SeqSched | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.SeqExpressionElements getSeqExpressionAccess() {
		return gaCCSLLibrary.getSeqExpressionAccess();
	}
	
	public ParserRule getSeqExpressionRule() {
		return getSeqExpressionAccess().getRule();
	}

	////| CharElement;
	// PrimitiveElement returns BasicType::PrimitiveElement:
	//	StringElement | BooleanElement | IntegerElement | IntegerVariableRef | RealElement;
	public CCSLLibraryGrammarAccess.PrimitiveElementElements getPrimitiveElementAccess() {
		return gaCCSLLibrary.getPrimitiveElementAccess();
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//PrimitiveType returns BasicType::PrimitiveType:
	//	String1 | Boolean | Integer | Real | Char | EnumerationType;
	public CCSLLibraryGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaCCSLLibrary.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//kernelExpressionDecl returns KernelExpression::KernelExpressionDeclaration:
	//	Death | UpTo | Union | Intersection | Inf | Sup | Concatenation | StrictSampling | NonStrictSampling | Defer |
	//	Discretization | Wait;
	public CCSLLibraryGrammarAccess.KernelExpressionDeclElements getKernelExpressionDeclAccess() {
		return gaCCSLLibrary.getKernelExpressionDeclAccess();
	}
	
	public ParserRule getKernelExpressionDeclRule() {
		return getKernelExpressionDeclAccess().getRule();
	}

	//kernelRelationDecl returns KernelRelation::KernelRelationDeclaration:
	//	Precedence | NonStrictPrecedence | Coincidence | SubClock | Exclusion;
	public CCSLLibraryGrammarAccess.KernelRelationDeclElements getKernelRelationDeclAccess() {
		return gaCCSLLibrary.getKernelRelationDeclAccess();
	}
	
	public ParserRule getKernelRelationDeclRule() {
		return getKernelRelationDeclAccess().getRule();
	}

	//String0 returns ecore::EString:
	//	"String" STRING | ID;
	public CCSLLibraryGrammarAccess.String0Elements getString0Access() {
		return gaCCSLLibrary.getString0Access();
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//AbstractEntity returns ClockExpressionAndRelation::AbstractEntity:
	//	name=ID ":" type=[BasicType::Type|EString] desiredEventKind=EventKind?;
	public CCSLLibraryGrammarAccess.AbstractEntityElements getAbstractEntityAccess() {
		return gaCCSLLibrary.getAbstractEntityAccess();
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//enum EventKind:
	//	start | finish | finish="stop" | consume | produce | receive | send | undefined="any" | undefined="all" | undefined;
	public CCSLLibraryGrammarAccess.EventKindElements getEventKindAccess() {
		return gaCCSLLibrary.getEventKindAccess();
	}
	
	public EnumRule getEventKindRule() {
		return getEventKindAccess().getRule();
	}

	////ConcreteEntity_Impl returns ClockExpressionAndRelation::ConcreteEntity:
	//
	////	{ClockExpressionAndRelation::ConcreteEntity}
	// //	'ConcreteEntity' name=ID;
	// Boolean0 returns ecore::EBoolean:
	//	"True" | "False";
	public CCSLLibraryGrammarAccess.Boolean0Elements getBoolean0Access() {
		return gaCCSLLibrary.getBoolean0Access();
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}

	////Integer0 returns ecore::EInt:
	// //	'Integer' INT | ID;
	// BooleanRef returns ClassicalExpression::BooleanRef:
	//	"BooleanRef" "{" ("name" name=ID)? "referencedBool" referencedBool=[BasicType::BooleanElement|EString] "}";
	public CCSLLibraryGrammarAccess.BooleanRefElements getBooleanRefAccess() {
		return gaCCSLLibrary.getBooleanRefAccess();
	}
	
	public ParserRule getBooleanRefRule() {
		return getBooleanRefAccess().getRule();
	}

	//RealRef returns ClassicalExpression::RealRef:
	//	"RealRef" "{" ("name" name=ID)? "realElem" realElem=[BasicType::RealElement|EString] "}";
	public CCSLLibraryGrammarAccess.RealRefElements getRealRefAccess() {
		return gaCCSLLibrary.getRealRefAccess();
	}
	
	public ParserRule getRealRefRule() {
		return getRealRefAccess().getRule();
	}

	//IntegerRef returns ClassicalExpression::IntegerRef:
	//	"IntegerRef" ("name" name=ID)? "[" integerElem=[BasicType::IntegerElement|EString] "]";
	public CCSLLibraryGrammarAccess.IntegerRefElements getIntegerRefAccess() {
		return gaCCSLLibrary.getIntegerRefAccess();
	}
	
	public ParserRule getIntegerRefRule() {
		return getIntegerRefAccess().getRule();
	}

	//UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	"UnaryRealPlus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand" operand=RealExpression
	//	"}";
	public CCSLLibraryGrammarAccess.UnaryRealPlusElements getUnaryRealPlusAccess() {
		return gaCCSLLibrary.getUnaryRealPlusAccess();
	}
	
	public ParserRule getUnaryRealPlusRule() {
		return getUnaryRealPlusAccess().getRule();
	}

	//UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	"UnaryRealMinus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand"
	//	operand=RealExpression "}";
	public CCSLLibraryGrammarAccess.UnaryRealMinusElements getUnaryRealMinusAccess() {
		return gaCCSLLibrary.getUnaryRealMinusAccess();
	}
	
	public ParserRule getUnaryRealMinusRule() {
		return getUnaryRealMinusAccess().getRule();
	}

	//RealPlus returns ClassicalExpression::RealPlus:
	//	"RealPlus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealPlusElements getRealPlusAccess() {
		return gaCCSLLibrary.getRealPlusAccess();
	}
	
	public ParserRule getRealPlusRule() {
		return getRealPlusAccess().getRule();
	}

	//RealMinus returns ClassicalExpression::RealMinus:
	//	"RealMinus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMinusElements getRealMinusAccess() {
		return gaCCSLLibrary.getRealMinusAccess();
	}
	
	public ParserRule getRealMinusRule() {
		return getRealMinusAccess().getRule();
	}

	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	"RealMultiply" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMultiplyElements getRealMultiplyAccess() {
		return gaCCSLLibrary.getRealMultiplyAccess();
	}
	
	public ParserRule getRealMultiplyRule() {
		return getRealMultiplyAccess().getRule();
	}

	//UnaryIntPlus returns ClassicalExpression::UnaryIntPlus:
	//	"UnaryIntPlus" "{" ("name" name=ID)? "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.UnaryIntPlusElements getUnaryIntPlusAccess() {
		return gaCCSLLibrary.getUnaryIntPlusAccess();
	}
	
	public ParserRule getUnaryIntPlusRule() {
		return getUnaryIntPlusAccess().getRule();
	}

	//UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
	//	"UnaryIntMinus" "{" ("name" name=ID)? "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.UnaryIntMinusElements getUnaryIntMinusAccess() {
		return gaCCSLLibrary.getUnaryIntMinusAccess();
	}
	
	public ParserRule getUnaryIntMinusRule() {
		return getUnaryIntMinusAccess().getRule();
	}

	//IntPlus returns ClassicalExpression::IntPlus:
	//	"IntPlus" name=ID? "(" leftValue=IntegerExpression "," rightValue=IntegerExpression ")";
	public CCSLLibraryGrammarAccess.IntPlusElements getIntPlusAccess() {
		return gaCCSLLibrary.getIntPlusAccess();
	}
	
	public ParserRule getIntPlusRule() {
		return getIntPlusAccess().getRule();
	}

	//IntMinus returns ClassicalExpression::IntMinus:
	//	"IntMinus" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntMinusElements getIntMinusAccess() {
		return gaCCSLLibrary.getIntMinusAccess();
	}
	
	public ParserRule getIntMinusRule() {
		return getIntMinusAccess().getRule();
	}

	//IntMultiply returns ClassicalExpression::IntMultiply:
	//	"IntMultiply" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntMultiplyElements getIntMultiplyAccess() {
		return gaCCSLLibrary.getIntMultiplyAccess();
	}
	
	public ParserRule getIntMultiplyRule() {
		return getIntMultiplyAccess().getRule();
	}

	//IntDivide returns ClassicalExpression::IntDivide:
	//	"IntDivide" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntDivideElements getIntDivideAccess() {
		return gaCCSLLibrary.getIntDivideAccess();
	}
	
	public ParserRule getIntDivideRule() {
		return getIntDivideAccess().getRule();
	}

	//Not returns ClassicalExpression::Not:
	//	"Not" name=ID? "(" operand=BooleanExpression ")";
	public CCSLLibraryGrammarAccess.NotElements getNotAccess() {
		return gaCCSLLibrary.getNotAccess();
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//And returns ClassicalExpression::And:
	//	"And" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.AndElements getAndAccess() {
		return gaCCSLLibrary.getAndAccess();
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or returns ClassicalExpression::Or:
	//	"Or" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.OrElements getOrAccess() {
		return gaCCSLLibrary.getOrAccess();
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor returns ClassicalExpression::Xor:
	//	"Xor" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.XorElements getXorAccess() {
		return gaCCSLLibrary.getXorAccess();
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	//RealEqual returns ClassicalExpression::RealEqual:
	//	"RealEqual" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealEqualElements getRealEqualAccess() {
		return gaCCSLLibrary.getRealEqualAccess();
	}
	
	public ParserRule getRealEqualRule() {
		return getRealEqualAccess().getRule();
	}

	//RealInf returns ClassicalExpression::RealInf:
	//	"RealInf" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealInfElements getRealInfAccess() {
		return gaCCSLLibrary.getRealInfAccess();
	}
	
	public ParserRule getRealInfRule() {
		return getRealInfAccess().getRule();
	}

	//RealSup returns ClassicalExpression::RealSup:
	//	"RealSup" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealSupElements getRealSupAccess() {
		return gaCCSLLibrary.getRealSupAccess();
	}
	
	public ParserRule getRealSupRule() {
		return getRealSupAccess().getRule();
	}

	//IntInf returns ClassicalExpression::IntInf:
	//	"IntInf" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.IntInfElements getIntInfAccess() {
		return gaCCSLLibrary.getIntInfAccess();
	}
	
	public ParserRule getIntInfRule() {
		return getIntInfAccess().getRule();
	}

	//IntSup returns ClassicalExpression::IntSup:
	//	"IntSup" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.IntSupElements getIntSupAccess() {
		return gaCCSLLibrary.getIntSupAccess();
	}
	
	public ParserRule getIntSupRule() {
		return getIntSupAccess().getRule();
	}

	//SeqDecr returns ClassicalExpression::SeqDecr:
	//	"SeqDecr" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqDecrElements getSeqDecrAccess() {
		return gaCCSLLibrary.getSeqDecrAccess();
	}
	
	public ParserRule getSeqDecrRule() {
		return getSeqDecrAccess().getRule();
	}

	//SeqSched returns ClassicalExpression::SeqSched:
	//	"SeqSched" name=ID? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")";
	public CCSLLibraryGrammarAccess.SeqSchedElements getSeqSchedAccess() {
		return gaCCSLLibrary.getSeqSchedAccess();
	}
	
	public ParserRule getSeqSchedRule() {
		return getSeqSchedAccess().getRule();
	}

	//BooleanVariableRef returns ClassicalExpression::BooleanVariableRef:
	//	"BooleanVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.BooleanVariableRefElements getBooleanVariableRefAccess() {
		return gaCCSLLibrary.getBooleanVariableRefAccess();
	}
	
	public ParserRule getBooleanVariableRefRule() {
		return getBooleanVariableRefAccess().getRule();
	}

	//IntegerVariableRef returns ClassicalExpression::IntegerVariableRef:
	//	"IntegerVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.IntegerVariableRefElements getIntegerVariableRefAccess() {
		return gaCCSLLibrary.getIntegerVariableRefAccess();
	}
	
	public ParserRule getIntegerVariableRefRule() {
		return getIntegerVariableRefAccess().getRule();
	}

	//RealVariableRef returns ClassicalExpression::RealVariableRef:
	//	"RealVariableRef" ("name" name=ID)? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.RealVariableRefElements getRealVariableRefAccess() {
		return gaCCSLLibrary.getRealVariableRefAccess();
	}
	
	public ParserRule getRealVariableRefRule() {
		return getRealVariableRefAccess().getRule();
	}

	//NumberSeqRef returns ClassicalExpression::NumberSeqRef:
	//	"SeqRef" ("name" name=ID)? "[" referencedNumberSeq=[BasicType::SequenceElement|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqRefElements getNumberSeqRefAccess() {
		return gaCCSLLibrary.getNumberSeqRefAccess();
	}
	
	public ParserRule getNumberSeqRefRule() {
		return getNumberSeqRefAccess().getRule();
	}

	//NumberSeqVariableRef returns ClassicalExpression::NumberSeqVariableRef:
	//	"SeqVarRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqVariableRefElements getNumberSeqVariableRefAccess() {
		return gaCCSLLibrary.getNumberSeqVariableRefAccess();
	}
	
	public ParserRule getNumberSeqVariableRefRule() {
		return getNumberSeqVariableRefAccess().getRule();
	}

	//RealElement returns BasicType::RealElement:
	//	"Real" name=ID (":" type=[BasicType::Type|EString])? "=" value=Real0;
	public CCSLLibraryGrammarAccess.RealElementElements getRealElementAccess() {
		return gaCCSLLibrary.getRealElementAccess();
	}
	
	public ParserRule getRealElementRule() {
		return getRealElementAccess().getRule();
	}

	//terminal Real0 returns ecore::EFloat:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getReal0Rule() {
		return gaCCSLLibrary.getReal0Rule();
	} 

	////Real0 returns Real:
	// //	'Real' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// IntegerElement
	//returns BasicType::IntegerElement:
	//	"Integer" name=ID (":" type=[BasicType::Type|EString])? "=" value=INT | name=ID "=" value=INT | value=INT;
	public CCSLLibraryGrammarAccess.IntegerElementElements getIntegerElementAccess() {
		return gaCCSLLibrary.getIntegerElementAccess();
	}
	
	public ParserRule getIntegerElementRule() {
		return getIntegerElementAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaCCSLLibrary.getINTRule();
	} 

	//BooleanElement returns BasicType::BooleanElement:
	//	"BooleanElement" name=ID (":" type=[BasicType::Type] | EString)? "=" value=Boolean0;
	public CCSLLibraryGrammarAccess.BooleanElementElements getBooleanElementAccess() {
		return gaCCSLLibrary.getBooleanElementAccess();
	}
	
	public ParserRule getBooleanElementRule() {
		return getBooleanElementAccess().getRule();
	}

	//SequenceElement returns BasicType::SequenceElement:
	//	{BasicType::SequenceElement} "Sequence" name=ID? (":" type=[BasicType::Type|EString])? "="
	//	(finitePart+=PrimitiveElement (";" finitePart+=PrimitiveElement)* ";"?)? ("(" nonFinitePart+=PrimitiveElement (";"
	//	nonFinitePart+=PrimitiveElement)* ")")?;
	public CCSLLibraryGrammarAccess.SequenceElementElements getSequenceElementAccess() {
		return gaCCSLLibrary.getSequenceElementAccess();
	}
	
	public ParserRule getSequenceElementRule() {
		return getSequenceElementAccess().getRule();
	}

	//StringElement returns BasicType::StringElement:
	//	"String" name=ID "=" value=String0;
	public CCSLLibraryGrammarAccess.StringElementElements getStringElementAccess() {
		return gaCCSLLibrary.getStringElementAccess();
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	////		('type' type=[BasicType::Type|EString])?
	// //CharElement returns BasicType::CharElement:
	// //	'CharElement'
	// //	'{'
	//
	////		('name' name=ID)?
	// //		'value' value=Char0
	// //		('type' type=[BasicType::Type|EString])?
	// //    '}';
	//
	////Char0 returns Char:
	// //	'Char' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// RecordElement
	//returns BasicType::RecordElement:
	//	"RecordElement" "{" ("name" name=ID)? ("type" type=[BasicType::Type|EString])? "box" "{" box+=Box ("," box+=Box)* "}"
	//	"}";
	public CCSLLibraryGrammarAccess.RecordElementElements getRecordElementAccess() {
		return gaCCSLLibrary.getRecordElementAccess();
	}
	
	public ParserRule getRecordElementRule() {
		return getRecordElementAccess().getRule();
	}

	//Box returns BasicType::Box:
	//	"Box" "{" "containment" containment=Element "}";
	public CCSLLibraryGrammarAccess.BoxElements getBoxAccess() {
		return gaCCSLLibrary.getBoxAccess();
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}

	//String1 returns BasicType::String:
	//	"StringType" name=ID;
	public CCSLLibraryGrammarAccess.String1Elements getString1Access() {
		return gaCCSLLibrary.getString1Access();
	}
	
	public ParserRule getString1Rule() {
		return getString1Access().getRule();
	}

	//Boolean returns BasicType::Boolean:
	//	"BooleanType" name=ID;
	public CCSLLibraryGrammarAccess.BooleanElements getBooleanAccess() {
		return gaCCSLLibrary.getBooleanAccess();
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Integer returns BasicType::Integer:
	//	"IntegerType" name=ID;
	public CCSLLibraryGrammarAccess.IntegerElements getIntegerAccess() {
		return gaCCSLLibrary.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Real returns BasicType::Real:
	//	"RealType" name=ID;
	public CCSLLibraryGrammarAccess.RealElements getRealAccess() {
		return gaCCSLLibrary.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Char returns BasicType::Char:
	//	"CharType" name=ID;
	public CCSLLibraryGrammarAccess.CharElements getCharAccess() {
		return gaCCSLLibrary.getCharAccess();
	}
	
	public ParserRule getCharRule() {
		return getCharAccess().getRule();
	}

	//Record returns BasicType::Record:
	//	"RecordType" name=ID "{" field+=Field ("," field+=Field)* "}";
	public CCSLLibraryGrammarAccess.RecordElements getRecordAccess() {
		return gaCCSLLibrary.getRecordAccess();
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//SequenceType returns BasicType::SequenceType:
	//	"SequenceType" name=ID ":" elementType=[BasicType::PrimitiveType];
	public CCSLLibraryGrammarAccess.SequenceTypeElements getSequenceTypeAccess() {
		return gaCCSLLibrary.getSequenceTypeAccess();
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//DiscreteClockType_Impl returns BasicType::DiscreteClockType:
	//	"DiscreteClockType" name=ID;
	public CCSLLibraryGrammarAccess.DiscreteClockType_ImplElements getDiscreteClockType_ImplAccess() {
		return gaCCSLLibrary.getDiscreteClockType_ImplAccess();
	}
	
	public ParserRule getDiscreteClockType_ImplRule() {
		return getDiscreteClockType_ImplAccess().getRule();
	}

	//DenseClockType returns BasicType::DenseClockType:
	//	"DenseClockType" name=ID "{" ("baseUnit" baseUnit=String0)? ("physicalMagnitude" physicalMagnitude=String0)? "}";
	public CCSLLibraryGrammarAccess.DenseClockTypeElements getDenseClockTypeAccess() {
		return gaCCSLLibrary.getDenseClockTypeAccess();
	}
	
	public ParserRule getDenseClockTypeRule() {
		return getDenseClockTypeAccess().getRule();
	}

	//EnumerationType returns BasicType::EnumerationType:
	//	"EnumerationType" "{" ("name" name=ID)? "enumLiteral" "{" enumLiteral+=String0 ("," enumLiteral+=String0)* "}" "}";
	public CCSLLibraryGrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaCCSLLibrary.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//Field returns BasicType::Field:
	//	"Field" "{" ("name" name=ID)? "type" type=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.FieldElements getFieldAccess() {
		return gaCCSLLibrary.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public CCSLLibraryGrammarAccess.EStringElements getEStringAccess() {
		return gaCCSLLibrary.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////This is only for the kernel.ccslLib !!!
	// SubClock returns KernelRelation::SubClock:
	//	"_SubClock" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.SubClockElements getSubClockAccess() {
		return gaCCSLLibrary.getSubClockAccess();
	}
	
	public ParserRule getSubClockRule() {
		return getSubClockAccess().getRule();
	}

	//Coincidence returns KernelRelation::Coincidence:
	//	"_Coincidence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.CoincidenceElements getCoincidenceAccess() {
		return gaCCSLLibrary.getCoincidenceAccess();
	}
	
	public ParserRule getCoincidenceRule() {
		return getCoincidenceAccess().getRule();
	}

	//Exclusion returns KernelRelation::Exclusion:
	//	"_Exclusion" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.ExclusionElements getExclusionAccess() {
		return gaCCSLLibrary.getExclusionAccess();
	}
	
	public ParserRule getExclusionRule() {
		return getExclusionAccess().getRule();
	}

	//Precedence returns KernelRelation::Precedence:
	//	"_Precedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.PrecedenceElements getPrecedenceAccess() {
		return gaCCSLLibrary.getPrecedenceAccess();
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}

	//NonStrictPrecedence returns KernelRelation::NonStrictPrecedence:
	//	"_NonStrictPrecedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity"
	//	leftEntity=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictPrecedenceElements getNonStrictPrecedenceAccess() {
		return gaCCSLLibrary.getNonStrictPrecedenceAccess();
	}
	
	public ParserRule getNonStrictPrecedenceRule() {
		return getNonStrictPrecedenceAccess().getRule();
	}

	//UpTo returns KernelExpression::UpTo:
	//	"_UpTo" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clockToFollow"
	//	clockToFollow=AbstractEntity "killerClock" killerClock=AbstractEntity "isPreemptive" isPreemptive=Boolean0 "}";
	public CCSLLibraryGrammarAccess.UpToElements getUpToAccess() {
		return gaCCSLLibrary.getUpToAccess();
	}
	
	public ParserRule getUpToRule() {
		return getUpToAccess().getRule();
	}

	//Defer returns KernelExpression::Defer:
	//	"_Defer" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "baseClock" baseClock=AbstractEntity
	//	"delayClock" delayClock=AbstractEntity "delayPattern" delayPattern=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DeferElements getDeferAccess() {
		return gaCCSLLibrary.getDeferAccess();
	}
	
	public ParserRule getDeferRule() {
		return getDeferAccess().getRule();
	}

	//StrictSampling returns KernelExpression::StrictSampling:
	//	"_StrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.StrictSamplingElements getStrictSamplingAccess() {
		return gaCCSLLibrary.getStrictSamplingAccess();
	}
	
	public ParserRule getStrictSamplingRule() {
		return getStrictSamplingAccess().getRule();
	}

	//Concatenation returns KernelExpression::Concatenation:
	//	"_Concatenation" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "leftClock"
	//	leftClock=AbstractEntity "rightClock" rightClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.ConcatenationElements getConcatenationAccess() {
		return gaCCSLLibrary.getConcatenationAccess();
	}
	
	public ParserRule getConcatenationRule() {
		return getConcatenationAccess().getRule();
	}

	//Union returns KernelExpression::Union:
	//	"_Union" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.UnionElements getUnionAccess() {
		return gaCCSLLibrary.getUnionAccess();
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//Intersection returns KernelExpression::Intersection:
	//	"_Intersection" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1"
	//	clock1=AbstractEntity "clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.IntersectionElements getIntersectionAccess() {
		return gaCCSLLibrary.getIntersectionAccess();
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}

	//Sup returns KernelExpression::Sup:
	//	"_Sup" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.SupElements getSupAccess() {
		return gaCCSLLibrary.getSupAccess();
	}
	
	public ParserRule getSupRule() {
		return getSupAccess().getRule();
	}

	//Inf returns KernelExpression::Inf:
	//	"_Inf" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.InfElements getInfAccess() {
		return gaCCSLLibrary.getInfAccess();
	}
	
	public ParserRule getInfRule() {
		return getInfAccess().getRule();
	}

	//NonStrictSampling returns KernelExpression::NonStrictSampling:
	//	"_NonStrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictSamplingElements getNonStrictSamplingAccess() {
		return gaCCSLLibrary.getNonStrictSamplingAccess();
	}
	
	public ParserRule getNonStrictSamplingRule() {
		return getNonStrictSamplingAccess().getRule();
	}

	//Wait returns KernelExpression::Wait:
	//	"_Wait" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "waitingClock"
	//	waitingClock=AbstractEntity "waitingValue" waitingValue=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.WaitElements getWaitAccess() {
		return gaCCSLLibrary.getWaitAccess();
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}

	//Discretization returns KernelExpression::Discretization:
	//	"_Discretization" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "denseClock"
	//	denseClock=AbstractEntity "discretizationFactor" discretizationFactor=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DiscretizationElements getDiscretizationAccess() {
		return gaCCSLLibrary.getDiscretizationAccess();
	}
	
	public ParserRule getDiscretizationRule() {
		return getDiscretizationAccess().getRule();
	}

	//Death returns KernelExpression::Death:
	//	"_Death" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.DeathElements getDeathAccess() {
		return gaCCSLLibrary.getDeathAccess();
	}
	
	public ParserRule getDeathRule() {
		return getDeathAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCCSLLibrary.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCCSLLibrary.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCCSLLibrary.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCCSLLibrary.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCCSLLibrary.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCCSLLibrary.getANY_OTHERRule();
	} 
}
