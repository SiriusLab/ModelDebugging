/*
* generated by Xtext
*/
package org.gemoc.mocc.ccslmocc.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.gemoc.mocc.cometafsm.model.xtext.services.FSMDslGrammarAccess;
import fr.inria.aoste.timesquare.ccslkernel.library.xtext.services.CCSLLibraryGrammarAccess;

@Singleton
public class MoCDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateRelationBasedLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRelationBasedLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateRelationBasedLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateRelationBasedLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cImportsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cImportsAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_4_0_2_0 = (RuleCall)cImportsAssignment_4_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cExpressionLibrariesAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0 = (RuleCall)cExpressionLibrariesAssignment_4_1_0.eContents().get(0);
		private final Assignment cRelationLibrariesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0 = (RuleCall)cRelationLibrariesAssignment_4_1_1.eContents().get(0);
		private final Assignment cPredefinedTypesAssignment_4_1_2 = (Assignment)cAlternatives_4_1.eContents().get(2);
		private final RuleCall cPredefinedTypesTypeParserRuleCall_4_1_2_0 = (RuleCall)cPredefinedTypesAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateRelationBasedLibrary returns ccslmoc::StateRelationBasedLibrary:
		//	{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
		//	imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
		//	predefinedTypes+=Type)*) "}";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
		//imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
		//predefinedTypes+=Type)*) "}"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StateRelationBasedLibrary}
		public Action getStateRelationBasedLibraryAction_0() { return cStateRelationBasedLibraryAction_0; }

		//"StateRelationBasedLibrary"
		public Keyword getStateRelationBasedLibraryKeyword_1() { return cStateRelationBasedLibraryKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
		//relationLibraries+=RelationLibrary | predefinedTypes+=Type)*
		public Group getGroup_4() { return cGroup_4; }

		//("imports" "{" imports+=ImportStatement* "}")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"imports"
		public Keyword getImportsKeyword_4_0_0() { return cImportsKeyword_4_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1() { return cLeftCurlyBracketKeyword_4_0_1; }

		//imports+=ImportStatement*
		public Assignment getImportsAssignment_4_0_2() { return cImportsAssignment_4_0_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_4_0_2_0() { return cImportsImportStatementParserRuleCall_4_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_3() { return cRightCurlyBracketKeyword_4_0_3; }

		//(expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary | predefinedTypes+=Type)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//expressionLibraries+=ExpressionLibrary
		public Assignment getExpressionLibrariesAssignment_4_1_0() { return cExpressionLibrariesAssignment_4_1_0; }

		//ExpressionLibrary
		public RuleCall getExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0() { return cExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0; }

		//relationLibraries+=RelationLibrary
		public Assignment getRelationLibrariesAssignment_4_1_1() { return cRelationLibrariesAssignment_4_1_1; }

		//RelationLibrary
		public RuleCall getRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0() { return cRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0; }

		//predefinedTypes+=Type
		public Assignment getPredefinedTypesAssignment_4_1_2() { return cPredefinedTypesAssignment_4_1_2; }

		//Type
		public RuleCall getPredefinedTypesTypeParserRuleCall_4_1_2_0() { return cPredefinedTypesTypeParserRuleCall_4_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasString0ParserRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ImportStatement returns TimeModel::ImportStatement:
		//	"import" importURI=STRING "as" alias=String0 ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING "as" alias=String0 ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//alias=String0
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }

		//String0
		public RuleCall getAliasString0ParserRuleCall_3_0() { return cAliasString0ParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RelationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserRelationDefinition_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalRelationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalRelationDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCCSLStateMachineRelationDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// <--- Override --->	
		//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
		//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
		//	CCSLStateMachineRelationDefinition;
		public ParserRule getRule() { return rule; }

		//UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
		//CCSLStateMachineRelationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserRelationDefinition_Impl
		public RuleCall getUserRelationDefinition_ImplParserRuleCall_0() { return cUserRelationDefinition_ImplParserRuleCall_0; }

		//ConditionalRelationDefinition
		public RuleCall getConditionalRelationDefinitionParserRuleCall_1() { return cConditionalRelationDefinitionParserRuleCall_1; }

		//ExternalRelationDefinition
		public RuleCall getExternalRelationDefinitionParserRuleCall_2() { return cExternalRelationDefinitionParserRuleCall_2; }

		//CCSLStateMachineRelationDefinition
		public RuleCall getCCSLStateMachineRelationDefinitionParserRuleCall_3() { return cCCSLStateMachineRelationDefinitionParserRuleCall_3; }
	}

	public class CCSLStateMachineRelationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CCSLStateMachineRelationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineRelationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateBasedRelationDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVersionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVersionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVersionEStringParserRuleCall_3_1_0 = (RuleCall)cVersionAssignment_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDefinitionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionEStringParserRuleCall_4_1_0 = (RuleCall)cDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDeclarationRelationDeclarationCrossReference_6_0 = (CrossReference)cDeclarationAssignment_6.eContents().get(0);
		private final RuleCall cDeclarationRelationDeclarationEStringParserRuleCall_6_0_1 = (RuleCall)cDeclarationRelationDeclarationCrossReference_6_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDeclarationBlockAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDeclarationBlockDeclarationBlockParserRuleCall_9_0 = (RuleCall)cDeclarationBlockAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cInitKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cInitialStateAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cInitialStateStateCrossReference_10_1_0 = (CrossReference)cInitialStateAssignment_10_1.eContents().get(0);
		private final RuleCall cInitialStateStateEStringParserRuleCall_10_1_0_1 = (RuleCall)cInitialStateStateCrossReference_10_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cFinalsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cFinalStatesAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final CrossReference cFinalStatesStateCrossReference_12_2_0 = (CrossReference)cFinalStatesAssignment_12_2.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_12_2_0_1 = (RuleCall)cFinalStatesStateCrossReference_12_2_0.eContents().get(1);
		private final Group cGroup_12_3 = (Group)cGroup_12.eContents().get(3);
		private final Keyword cCommaKeyword_12_3_0 = (Keyword)cGroup_12_3.eContents().get(0);
		private final Assignment cFinalStatesAssignment_12_3_1 = (Assignment)cGroup_12_3.eContents().get(1);
		private final CrossReference cFinalStatesStateCrossReference_12_3_1_0 = (CrossReference)cFinalStatesAssignment_12_3_1.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_12_3_1_0_1 = (RuleCall)cFinalStatesStateCrossReference_12_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_12_4 = (Keyword)cGroup_12.eContents().get(4);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Assignment cStatesAssignment_13_0 = (Assignment)cAlternatives_13.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_13_0_0 = (RuleCall)cStatesAssignment_13_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_13_1 = (Assignment)cAlternatives_13.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_13_1_0 = (RuleCall)cTransitionsAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//CCSLStateMachineRelationDefinition returns ccslmoc::StateMachineRelationDefinition:
		//	{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString ("-version" version=EString
		//	"-")? ("|definition" definition=EString "|")? "["
		//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{" declarationBlock=DeclarationBlock?
		//	("init" initialState=[cometafsm::State|EString]) ";" ("finals" ":" finalStates+=[cometafsm::State|EString] (","
		//	finalStates+=[cometafsm::State|EString])* ";")? (states+=State | transitions+=Transition)+ "}";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString ("-version" version=EString "-")?
		//("|definition" definition=EString "|")? "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"
		//"{" declarationBlock=DeclarationBlock? ("init" initialState=[cometafsm::State|EString]) ";" ("finals" ":"
		//finalStates+=[cometafsm::State|EString] ("," finalStates+=[cometafsm::State|EString])* ";")? (states+=State |
		//transitions+=Transition)+ "}"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StateMachineRelationDefinition}
		public Action getStateMachineRelationDefinitionAction_0() { return cStateMachineRelationDefinitionAction_0; }

		//"StateBasedRelationDefinition"
		public Keyword getStateBasedRelationDefinitionKeyword_1() { return cStateBasedRelationDefinitionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("-version" version=EString "-")?
		public Group getGroup_3() { return cGroup_3; }

		//"-version"
		public Keyword getVersionKeyword_3_0() { return cVersionKeyword_3_0; }

		//version=EString
		public Assignment getVersionAssignment_3_1() { return cVersionAssignment_3_1; }

		//EString
		public RuleCall getVersionEStringParserRuleCall_3_1_0() { return cVersionEStringParserRuleCall_3_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_2() { return cHyphenMinusKeyword_3_2; }

		//("|definition" definition=EString "|")?
		public Group getGroup_4() { return cGroup_4; }

		//"|definition"
		public Keyword getDefinitionKeyword_4_0() { return cDefinitionKeyword_4_0; }

		//definition=EString
		public Assignment getDefinitionAssignment_4_1() { return cDefinitionAssignment_4_1; }

		//EString
		public RuleCall getDefinitionEStringParserRuleCall_4_1_0() { return cDefinitionEStringParserRuleCall_4_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4_2() { return cVerticalLineKeyword_4_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//declaration=[ClockExpressionAndRelation::RelationDeclaration|EString]
		public Assignment getDeclarationAssignment_6() { return cDeclarationAssignment_6; }

		//[ClockExpressionAndRelation::RelationDeclaration|EString]
		public CrossReference getDeclarationRelationDeclarationCrossReference_6_0() { return cDeclarationRelationDeclarationCrossReference_6_0; }

		//EString
		public RuleCall getDeclarationRelationDeclarationEStringParserRuleCall_6_0_1() { return cDeclarationRelationDeclarationEStringParserRuleCall_6_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//declarationBlock=DeclarationBlock?
		public Assignment getDeclarationBlockAssignment_9() { return cDeclarationBlockAssignment_9; }

		//DeclarationBlock
		public RuleCall getDeclarationBlockDeclarationBlockParserRuleCall_9_0() { return cDeclarationBlockDeclarationBlockParserRuleCall_9_0; }

		//"init" initialState=[cometafsm::State|EString]
		public Group getGroup_10() { return cGroup_10; }

		//"init"
		public Keyword getInitKeyword_10_0() { return cInitKeyword_10_0; }

		//initialState=[cometafsm::State|EString]
		public Assignment getInitialStateAssignment_10_1() { return cInitialStateAssignment_10_1; }

		//[cometafsm::State|EString]
		public CrossReference getInitialStateStateCrossReference_10_1_0() { return cInitialStateStateCrossReference_10_1_0; }

		//EString
		public RuleCall getInitialStateStateEStringParserRuleCall_10_1_0_1() { return cInitialStateStateEStringParserRuleCall_10_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }

		//("finals" ":" finalStates+=[cometafsm::State|EString] ("," finalStates+=[cometafsm::State|EString])* ";")?
		public Group getGroup_12() { return cGroup_12; }

		//"finals"
		public Keyword getFinalsKeyword_12_0() { return cFinalsKeyword_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//finalStates+=[cometafsm::State|EString]
		public Assignment getFinalStatesAssignment_12_2() { return cFinalStatesAssignment_12_2; }

		//[cometafsm::State|EString]
		public CrossReference getFinalStatesStateCrossReference_12_2_0() { return cFinalStatesStateCrossReference_12_2_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_12_2_0_1() { return cFinalStatesStateEStringParserRuleCall_12_2_0_1; }

		//("," finalStates+=[cometafsm::State|EString])*
		public Group getGroup_12_3() { return cGroup_12_3; }

		//","
		public Keyword getCommaKeyword_12_3_0() { return cCommaKeyword_12_3_0; }

		//finalStates+=[cometafsm::State|EString]
		public Assignment getFinalStatesAssignment_12_3_1() { return cFinalStatesAssignment_12_3_1; }

		//[cometafsm::State|EString]
		public CrossReference getFinalStatesStateCrossReference_12_3_1_0() { return cFinalStatesStateCrossReference_12_3_1_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_12_3_1_0_1() { return cFinalStatesStateEStringParserRuleCall_12_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_12_4() { return cSemicolonKeyword_12_4; }

		//(states+=State | transitions+=Transition)+
		public Alternatives getAlternatives_13() { return cAlternatives_13; }

		//states+=State
		public Assignment getStatesAssignment_13_0() { return cStatesAssignment_13_0; }

		//State
		public RuleCall getStatesStateParserRuleCall_13_0_0() { return cStatesStateParserRuleCall_13_0_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_13_1() { return cTransitionsAssignment_13_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_13_1_0() { return cTransitionsTransitionParserRuleCall_13_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTrueTriggersAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTrueTriggersClockCrossReference_1_0_0 = (CrossReference)cTrueTriggersAssignment_1_0.eContents().get(0);
		private final RuleCall cTrueTriggersClockEStringParserRuleCall_1_0_0_1 = (RuleCall)cTrueTriggersClockCrossReference_1_0_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cFalseTriggersAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final CrossReference cFalseTriggersClockCrossReference_1_1_0_2_0 = (CrossReference)cFalseTriggersAssignment_1_1_0_2.eContents().get(0);
		private final RuleCall cFalseTriggersClockEStringParserRuleCall_1_1_0_2_0_1 = (RuleCall)cFalseTriggersClockCrossReference_1_1_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTrueTriggersAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cTrueTriggersClockCrossReference_2_0_1_0 = (CrossReference)cTrueTriggersAssignment_2_0_1.eContents().get(0);
		private final RuleCall cTrueTriggersClockEStringParserRuleCall_2_0_1_0_1 = (RuleCall)cTrueTriggersClockCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Keyword cNotKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cFalseTriggersAssignment_2_1_0_2 = (Assignment)cGroup_2_1_0.eContents().get(2);
		private final CrossReference cFalseTriggersClockCrossReference_2_1_0_2_0 = (CrossReference)cFalseTriggersAssignment_2_1_0_2.eContents().get(0);
		private final RuleCall cFalseTriggersClockEStringParserRuleCall_2_1_0_2_0_1 = (RuleCall)cFalseTriggersClockCrossReference_2_1_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//// <--- Override --->    
		////('and' trigger+=[TimeModel::Clock|EString])*
		//Trigger returns cometafsm::Trigger:
		//	{cometafsm::Trigger} (trueTriggers+=[TimeModel::Clock|EString] | ("not" "("
		//	falseTriggers+=[TimeModel::Clock|EString]) ")")+ ("." trueTriggers+=[TimeModel::Clock|EString] | ("not" "("
		//	falseTriggers+=[TimeModel::Clock|EString]) ")")*;
		public ParserRule getRule() { return rule; }

		//{cometafsm::Trigger} (trueTriggers+=[TimeModel::Clock|EString] | ("not" "(" falseTriggers+=[TimeModel::Clock|EString])
		//")")+ ("." trueTriggers+=[TimeModel::Clock|EString] | ("not" "(" falseTriggers+=[TimeModel::Clock|EString]) ")")*
		public Group getGroup() { return cGroup; }

		//{cometafsm::Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//(trueTriggers+=[TimeModel::Clock|EString] | ("not" "(" falseTriggers+=[TimeModel::Clock|EString]) ")")+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//trueTriggers+=[TimeModel::Clock|EString]
		public Assignment getTrueTriggersAssignment_1_0() { return cTrueTriggersAssignment_1_0; }

		//[TimeModel::Clock|EString]
		public CrossReference getTrueTriggersClockCrossReference_1_0_0() { return cTrueTriggersClockCrossReference_1_0_0; }

		//EString
		public RuleCall getTrueTriggersClockEStringParserRuleCall_1_0_0_1() { return cTrueTriggersClockEStringParserRuleCall_1_0_0_1; }

		//("not" "(" falseTriggers+=[TimeModel::Clock|EString]) ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"not" "(" falseTriggers+=[TimeModel::Clock|EString]
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"not"
		public Keyword getNotKeyword_1_1_0_0() { return cNotKeyword_1_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0_1() { return cLeftParenthesisKeyword_1_1_0_1; }

		//falseTriggers+=[TimeModel::Clock|EString]
		public Assignment getFalseTriggersAssignment_1_1_0_2() { return cFalseTriggersAssignment_1_1_0_2; }

		//[TimeModel::Clock|EString]
		public CrossReference getFalseTriggersClockCrossReference_1_1_0_2_0() { return cFalseTriggersClockCrossReference_1_1_0_2_0; }

		//EString
		public RuleCall getFalseTriggersClockEStringParserRuleCall_1_1_0_2_0_1() { return cFalseTriggersClockEStringParserRuleCall_1_1_0_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1() { return cRightParenthesisKeyword_1_1_1; }

		//("." trueTriggers+=[TimeModel::Clock|EString] | ("not" "(" falseTriggers+=[TimeModel::Clock|EString]) ")")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"." trueTriggers+=[TimeModel::Clock|EString]
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//trueTriggers+=[TimeModel::Clock|EString]
		public Assignment getTrueTriggersAssignment_2_0_1() { return cTrueTriggersAssignment_2_0_1; }

		//[TimeModel::Clock|EString]
		public CrossReference getTrueTriggersClockCrossReference_2_0_1_0() { return cTrueTriggersClockCrossReference_2_0_1_0; }

		//EString
		public RuleCall getTrueTriggersClockEStringParserRuleCall_2_0_1_0_1() { return cTrueTriggersClockEStringParserRuleCall_2_0_1_0_1; }

		//("not" "(" falseTriggers+=[TimeModel::Clock|EString]) ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"not" "(" falseTriggers+=[TimeModel::Clock|EString]
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"not"
		public Keyword getNotKeyword_2_1_0_0() { return cNotKeyword_2_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0_1() { return cLeftParenthesisKeyword_2_1_0_1; }

		//falseTriggers+=[TimeModel::Clock|EString]
		public Assignment getFalseTriggersAssignment_2_1_0_2() { return cFalseTriggersAssignment_2_1_0_2; }

		//[TimeModel::Clock|EString]
		public CrossReference getFalseTriggersClockCrossReference_2_1_0_2_0() { return cFalseTriggersClockCrossReference_2_1_0_2_0; }

		//EString
		public RuleCall getFalseTriggersClockEStringParserRuleCall_2_1_0_2_0_1() { return cFalseTriggersClockEStringParserRuleCall_2_1_0_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_1() { return cRightParenthesisKeyword_2_1_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFinishClockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartClockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// <--- Override --->
		//Action returns cometafsm::AbstractAction:
		//	FinishClock | StartClock | IntegerAssignement;
		public ParserRule getRule() { return rule; }

		//FinishClock | StartClock | IntegerAssignement
		public Alternatives getAlternatives() { return cAlternatives; }

		//FinishClock
		public RuleCall getFinishClockParserRuleCall_0() { return cFinishClockParserRuleCall_0; }

		//StartClock
		public RuleCall getStartClockParserRuleCall_1() { return cStartClockParserRuleCall_1; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall_2() { return cIntegerAssignementParserRuleCall_2; }
	}

	public class FinishClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinishClock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinishClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKillKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClockClockCrossReference_3_0 = (CrossReference)cClockAssignment_3.eContents().get(0);
		private final RuleCall cClockClockEStringParserRuleCall_3_0_1 = (RuleCall)cClockClockCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FinishClock returns ccslmoc::FinishClock:
		//	{ccslmoc::FinishClock} "kill" "(" clock=[TimeModel::Clock|EString] ")";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::FinishClock} "kill" "(" clock=[TimeModel::Clock|EString] ")"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::FinishClock}
		public Action getFinishClockAction_0() { return cFinishClockAction_0; }

		//"kill"
		public Keyword getKillKeyword_1() { return cKillKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//clock=[TimeModel::Clock|EString]
		public Assignment getClockAssignment_3() { return cClockAssignment_3; }

		//[TimeModel::Clock|EString]
		public CrossReference getClockClockCrossReference_3_0() { return cClockClockCrossReference_3_0; }

		//EString
		public RuleCall getClockClockEStringParserRuleCall_3_0_1() { return cClockClockEStringParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class StartClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartClock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClockClockCrossReference_3_0 = (CrossReference)cClockAssignment_3.eContents().get(0);
		private final RuleCall cClockClockEStringParserRuleCall_3_0_1 = (RuleCall)cClockClockCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StartClock returns ccslmoc::StartClock:
		//	{ccslmoc::StartClock} "start" "(" clock=[TimeModel::Clock|EString] ")";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StartClock} "start" "(" clock=[TimeModel::Clock|EString] ")"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StartClock}
		public Action getStartClockAction_0() { return cStartClockAction_0; }

		//"start"
		public Keyword getStartKeyword_1() { return cStartKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//clock=[TimeModel::Clock|EString]
		public Assignment getClockAssignment_3() { return cClockAssignment_3; }

		//[TimeModel::Clock|EString]
		public CrossReference getClockClockCrossReference_3_0() { return cClockClockCrossReference_3_0; }

		//EString
		public RuleCall getClockClockEStringParserRuleCall_3_0_1() { return cClockClockEStringParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private StateRelationBasedLibraryElements pStateRelationBasedLibrary;
	private ImportStatementElements pImportStatement;
	private RelationDefinitionElements pRelationDefinition;
	private CCSLStateMachineRelationDefinitionElements pCCSLStateMachineRelationDefinition;
	private TriggerElements pTrigger;
	private ActionElements pAction;
	private FinishClockElements pFinishClock;
	private StartClockElements pStartClock;
	
	private final Grammar grammar;

	private FSMDslGrammarAccess gaFSMDsl;

	@Inject
	public MoCDslGrammarAccess(GrammarProvider grammarProvider,
		FSMDslGrammarAccess gaFSMDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFSMDsl = gaFSMDsl;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.mocc.ccslmocc.model.xtext.MoCDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public FSMDslGrammarAccess getFSMDslGrammarAccess() {
		return gaFSMDsl;
	}

	
	//StateRelationBasedLibrary returns ccslmoc::StateRelationBasedLibrary:
	//	{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
	//	imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
	//	predefinedTypes+=Type)*) "}";
	public StateRelationBasedLibraryElements getStateRelationBasedLibraryAccess() {
		return (pStateRelationBasedLibrary != null) ? pStateRelationBasedLibrary : (pStateRelationBasedLibrary = new StateRelationBasedLibraryElements());
	}
	
	public ParserRule getStateRelationBasedLibraryRule() {
		return getStateRelationBasedLibraryAccess().getRule();
	}

	//ImportStatement returns TimeModel::ImportStatement:
	//	"import" importURI=STRING "as" alias=String0 ";";
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//// <--- Override --->	
	//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
	//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
	//	CCSLStateMachineRelationDefinition;
	public RelationDefinitionElements getRelationDefinitionAccess() {
		return (pRelationDefinition != null) ? pRelationDefinition : (pRelationDefinition = new RelationDefinitionElements());
	}
	
	public ParserRule getRelationDefinitionRule() {
		return getRelationDefinitionAccess().getRule();
	}

	//CCSLStateMachineRelationDefinition returns ccslmoc::StateMachineRelationDefinition:
	//	{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString ("-version" version=EString
	//	"-")? ("|definition" definition=EString "|")? "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{" declarationBlock=DeclarationBlock?
	//	("init" initialState=[cometafsm::State|EString]) ";" ("finals" ":" finalStates+=[cometafsm::State|EString] (","
	//	finalStates+=[cometafsm::State|EString])* ";")? (states+=State | transitions+=Transition)+ "}";
	public CCSLStateMachineRelationDefinitionElements getCCSLStateMachineRelationDefinitionAccess() {
		return (pCCSLStateMachineRelationDefinition != null) ? pCCSLStateMachineRelationDefinition : (pCCSLStateMachineRelationDefinition = new CCSLStateMachineRelationDefinitionElements());
	}
	
	public ParserRule getCCSLStateMachineRelationDefinitionRule() {
		return getCCSLStateMachineRelationDefinitionAccess().getRule();
	}

	//// <--- Override --->    
	////('and' trigger+=[TimeModel::Clock|EString])*
	//Trigger returns cometafsm::Trigger:
	//	{cometafsm::Trigger} (trueTriggers+=[TimeModel::Clock|EString] | ("not" "("
	//	falseTriggers+=[TimeModel::Clock|EString]) ")")+ ("." trueTriggers+=[TimeModel::Clock|EString] | ("not" "("
	//	falseTriggers+=[TimeModel::Clock|EString]) ")")*;
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//// <--- Override --->
	//Action returns cometafsm::AbstractAction:
	//	FinishClock | StartClock | IntegerAssignement;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//FinishClock returns ccslmoc::FinishClock:
	//	{ccslmoc::FinishClock} "kill" "(" clock=[TimeModel::Clock|EString] ")";
	public FinishClockElements getFinishClockAccess() {
		return (pFinishClock != null) ? pFinishClock : (pFinishClock = new FinishClockElements());
	}
	
	public ParserRule getFinishClockRule() {
		return getFinishClockAccess().getRule();
	}

	//StartClock returns ccslmoc::StartClock:
	//	{ccslmoc::StartClock} "start" "(" clock=[TimeModel::Clock|EString] ")";
	public StartClockElements getStartClockAccess() {
		return (pStartClock != null) ? pStartClock : (pStartClock = new StartClockElements());
	}
	
	public ParserRule getStartClockRule() {
		return getStartClockAccess().getRule();
	}

	//StateMachineDefinition returns cometa::StateMachineDefinition:
	//	{cometa::StateMachineDefinition} "StateMachineDefinition" name=EString ("-version" version=EString "-")?
	//	("|definition" definition=EString "|")? "{" declarationBlock=DeclarationBlock? ("init"
	//	initialState=[cometa::State|EString]) ";" ("finals" ":" finalStates+=[cometa::State|EString] (","
	//	finalStates+=[cometa::State|EString])* ";")? (states+=State | transitions+=Transition)+ "}";
	public FSMDslGrammarAccess.StateMachineDefinitionElements getStateMachineDefinitionAccess() {
		return gaFSMDsl.getStateMachineDefinitionAccess();
	}
	
	public ParserRule getStateMachineDefinitionRule() {
		return getStateMachineDefinitionAccess().getRule();
	}

	//DeclarationBlock returns cometa::DeclarationBlock:
	//	{cometa::DeclarationBlock} "Declarations {" concreteEntities+=ConcreteEntity*
	//	classicalExpressions+=BooleanExpression* "}";
	public FSMDslGrammarAccess.DeclarationBlockElements getDeclarationBlockAccess() {
		return gaFSMDsl.getDeclarationBlockAccess();
	}
	
	public ParserRule getDeclarationBlockRule() {
		return getDeclarationBlockAccess().getRule();
	}

	//Transition returns cometa::Transition:
	//	{cometa::Transition} "from" source=[cometa::State|EString] "to" target=[cometa::State|EString] ":" name=EString
	//	("-version" version=EString "-")? ("|definition" definition=EString "|")? "(" ("if" guard=Guard)? ("when"
	//	trigger=Trigger)? ("do" actions+=Action)* ")";
	public FSMDslGrammarAccess.TransitionElements getTransitionAccess() {
		return gaFSMDsl.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//State returns cometa::State:
	//	{cometa::State} "State" name=EString ("-version" version=EString "-")? ("|definition" definition=EString "|")? "("
	//	("in" ":" inputTransitions+=[cometa::Transition|EString] ("," inputTransitions+=[cometa::Transition|EString])* ";")?
	//	("out" ":" outputTransitions+=[cometa::Transition|EString] ("," outputTransitions+=[cometa::Transition|EString])*
	//	";")? ")";
	public FSMDslGrammarAccess.StateElements getStateAccess() {
		return gaFSMDsl.getStateAccess();
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Guard returns cometa::Guard:
	//	{cometa::Guard} ("[" value=[ClassicalExpression::BooleanExpression|EString] "]")?;
	public FSMDslGrammarAccess.GuardElements getGuardAccess() {
		return gaFSMDsl.getGuardAccess();
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement;
	public FSMDslGrammarAccess.BinaryIntegerExpressionElements getBinaryIntegerExpressionAccess() {
		return gaFSMDsl.getBinaryIntegerExpressionAccess();
	}
	
	public ParserRule getBinaryIntegerExpressionRule() {
		return getBinaryIntegerExpressionAccess().getRule();
	}

	//IntegerAssignement returns cometa::IntegerAssignement:
	//	{cometa::IntegerAssignement} "Assign" name=EString "(" leftValue=IntegerRef ":=" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntegerAssignementElements getIntegerAssignementAccess() {
		return gaFSMDsl.getIntegerAssignementAccess();
	}
	
	public ParserRule getIntegerAssignementRule() {
		return getIntegerAssignementAccess().getRule();
	}

	//IntegerExpression returns ClassicalExpression::IntegerExpression:
	//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
	public FSMDslGrammarAccess.IntegerExpressionElements getIntegerExpressionAccess() {
		return gaFSMDsl.getIntegerExpressionAccess();
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}

	//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
	//	UnaryIntPlus | UnaryIntMinus;
	public FSMDslGrammarAccess.UnaryIntegerExpressionElements getUnaryIntegerExpressionAccess() {
		return gaFSMDsl.getUnaryIntegerExpressionAccess();
	}
	
	public ParserRule getUnaryIntegerExpressionRule() {
		return getUnaryIntegerExpressionAccess().getRule();
	}

	//IntEqual returns ClassicalExpression::IntEqual:
	//	"IntEqual" ("name" name=ID)? "(" leftValue=IntegerExpression "==" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntEqualElements getIntEqualAccess() {
		return gaFSMDsl.getIntEqualAccess();
	}
	
	public ParserRule getIntEqualRule() {
		return getIntEqualAccess().getRule();
	}

	//Library returns ClockExpressionAndRelation::Library:
	//	"Library" name=ID "{" (("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
	//	relationLibraries+=RelationLibrary | predefinedTypes+=Type)*) "}";
	public CCSLLibraryGrammarAccess.LibraryElements getLibraryAccess() {
		return gaFSMDsl.getLibraryAccess();
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//ExpressionLibrary returns ClockExpressionAndRelation::ExpressionLibrary:
	//	"ExpressionLibrary" name=ID "{" (elements+=Element | expressionDeclarations+=(ExpressionDeclaration |
	//	kernelExpressionDecl) | expressionDefinitions+=ExpressionDefinition)+ "}";
	public CCSLLibraryGrammarAccess.ExpressionLibraryElements getExpressionLibraryAccess() {
		return gaFSMDsl.getExpressionLibraryAccess();
	}
	
	public ParserRule getExpressionLibraryRule() {
		return getExpressionLibraryAccess().getRule();
	}

	//RelationLibrary returns ClockExpressionAndRelation::RelationLibrary:
	//	"RelationLibrary" name=ID "{" (elements+=Element | relationDeclarations+=(RelationDeclaration | kernelRelationDecl) |
	//	relationDefinitions+=RelationDefinition)+ "}";
	public CCSLLibraryGrammarAccess.RelationLibraryElements getRelationLibraryAccess() {
		return gaFSMDsl.getRelationLibraryAccess();
	}
	
	public ParserRule getRelationLibraryRule() {
		return getRelationLibraryAccess().getRule();
	}

	//ExpressionDeclaration returns ClockExpressionAndRelation::ExpressionDeclaration:
	//	"ExpressionDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")" ":"
	//	returnType=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return gaFSMDsl.getExpressionDeclarationAccess();
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}

	//RelationDeclaration returns ClockExpressionAndRelation::RelationDeclaration:
	//	"RelationDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")";
	public CCSLLibraryGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaFSMDsl.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}

	//UserExpressionDefinition_Impl returns ClockExpressionAndRelation::UserExpressionDefinition:
	//	"ExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]" "{"
	//	("root" "=" rootExpression=[ClockExpressionAndRelation::Expression|EString] (concreteEntities+=ConcreteEntity |
	//	classicalExpressions+=ClassicalExpression0)+) "}";
	public CCSLLibraryGrammarAccess.UserExpressionDefinition_ImplElements getUserExpressionDefinition_ImplAccess() {
		return gaFSMDsl.getUserExpressionDefinition_ImplAccess();
	}
	
	public ParserRule getUserExpressionDefinition_ImplRule() {
		return getUserExpressionDefinition_ImplAccess().getRule();
	}

	//ConditionalExpressionDefinition returns ClockExpressionAndRelation::ConditionalExpressionDefinition:
	//	"ConditionalExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString]
	//	"]" "{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & "switch" "{"
	//	exprCases+=ExprCase exprCases+=ExprCase* "}" ("default" defaultExpression=Expression)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalExpressionDefinitionElements getConditionalExpressionDefinitionAccess() {
		return gaFSMDsl.getConditionalExpressionDefinitionAccess();
	}
	
	public ParserRule getConditionalExpressionDefinitionRule() {
		return getConditionalExpressionDefinitionAccess().getRule();
	}

	//ExternalExpressionDefinition returns ClockExpressionAndRelation::ExternalExpressionDefinition:
	//	("Extern" | "External") "ExpressionDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalExpressionDefinitionElements getExternalExpressionDefinitionAccess() {
		return gaFSMDsl.getExternalExpressionDefinitionAccess();
	}
	
	public ParserRule getExternalExpressionDefinitionRule() {
		return getExternalExpressionDefinitionAccess().getRule();
	}

	//ConditionalRelationDefinition returns ClockExpressionAndRelation::ConditionalRelationDefinition:
	//	"ConditionalRelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"
	//	"{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & ("switch" "{"
	//	relCases+=RelCase relCases+=RelCase* "}" "default" defaultRelation+=Relation*)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalRelationDefinitionElements getConditionalRelationDefinitionAccess() {
		return gaFSMDsl.getConditionalRelationDefinitionAccess();
	}
	
	public ParserRule getConditionalRelationDefinitionRule() {
		return getConditionalRelationDefinitionAccess().getRule();
	}

	//ExternalRelationDefinition returns ClockExpressionAndRelation::ExternalRelationDefinition:
	//	("Extern" | "External") "RelationDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalRelationDefinitionElements getExternalRelationDefinitionAccess() {
		return gaFSMDsl.getExternalRelationDefinitionAccess();
	}
	
	public ParserRule getExternalRelationDefinitionRule() {
		return getExternalRelationDefinitionAccess().getRule();
	}

	//Relation returns ClockExpressionAndRelation::Relation:
	//	isAnAssertion?="assert"? "Relation" (name=ID "[")? type=[ClockExpressionAndRelation::RelationDeclaration|EString]
	//	"]"? "(" (bindings+=Binding ("," bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.RelationElements getRelationAccess() {
		return gaFSMDsl.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Expression returns ClockExpressionAndRelation::Expression:
	//	"Expression" name=ID "=" type=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "(" (bindings+=Binding (","
	//	bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaFSMDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Binding returns ClockExpressionAndRelation::Binding:
	//	abstract=[ClockExpressionAndRelation::AbstractEntity|EString] "->"
	//	bindable=[ClockExpressionAndRelation::BindableEntity|EString];
	public CCSLLibraryGrammarAccess.BindingElements getBindingAccess() {
		return gaFSMDsl.getBindingAccess();
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Clock:
	//	"Clock" name=ID ":" type=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ClockElements getClockAccess() {
		return gaFSMDsl.getClockAccess();
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	//Type returns BasicType::Type:
	//	String1 | Boolean | Integer | Real | Char | Record | SequenceType | DiscreteClockType_Impl | DenseClockType |
	//	EnumerationType;
	public CCSLLibraryGrammarAccess.TypeElements getTypeAccess() {
		return gaFSMDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ExpressionDefinition returns ClockExpressionAndRelation::ExpressionDefinition:
	//	UserExpressionDefinition_Impl | ConditionalExpressionDefinition | ExternalExpressionDefinition;
	public CCSLLibraryGrammarAccess.ExpressionDefinitionElements getExpressionDefinitionAccess() {
		return gaFSMDsl.getExpressionDefinitionAccess();
	}
	
	public ParserRule getExpressionDefinitionRule() {
		return getExpressionDefinitionAccess().getRule();
	}

	//Element returns BasicType::Element:
	//	Clock / *| CharElement * / | StringElement | BooleanElement | IntegerElement | RealElement | RecordElement |
	//	SequenceElement;
	public CCSLLibraryGrammarAccess.ElementElements getElementAccess() {
		return gaFSMDsl.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//ExprCase returns ClockExpressionAndRelation::ExprCase:
	//	"case" condition=BooleanExpression ":" expression=Expression;
	public CCSLLibraryGrammarAccess.ExprCaseElements getExprCaseAccess() {
		return gaFSMDsl.getExprCaseAccess();
	}
	
	public ParserRule getExprCaseRule() {
		return getExprCaseAccess().getRule();
	}

	//RelCase returns ClockExpressionAndRelation::RelCase:
	//	"case" condition=BooleanExpression ":" relation+=Relation*;
	public CCSLLibraryGrammarAccess.RelCaseElements getRelCaseAccess() {
		return gaFSMDsl.getRelCaseAccess();
	}
	
	public ParserRule getRelCaseRule() {
		return getRelCaseAccess().getRule();
	}

	//UserRelationDefinition_Impl returns ClockExpressionAndRelation::UserRelationDefinition:
	//	"RelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{"
	//	(concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)+ "}";
	public CCSLLibraryGrammarAccess.UserRelationDefinition_ImplElements getUserRelationDefinition_ImplAccess() {
		return gaFSMDsl.getUserRelationDefinition_ImplAccess();
	}
	
	public ParserRule getUserRelationDefinition_ImplRule() {
		return getUserRelationDefinition_ImplAccess().getRule();
	}

	//ConcreteEntity returns ClockExpressionAndRelation::ConcreteEntity:
	//	Expression | Relation | Clock | Element;
	public CCSLLibraryGrammarAccess.ConcreteEntityElements getConcreteEntityAccess() {
		return gaFSMDsl.getConcreteEntityAccess();
	}
	
	public ParserRule getConcreteEntityRule() {
		return getConcreteEntityAccess().getRule();
	}

	//ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
	//	BooleanRef | RealRef | IntegerRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply |
	//	UnaryIntPlus | UnaryIntMinus | IntPlus | IntMinus | IntMultiply | IntDivide | Not | And | Or | Xor | RealEqual |
	//	RealInf | RealSup | IntEqual | IntInf | IntSup | SeqIsEmpty | SeqGetTail | SeqGetHead | SeqDecr | SeqSched |
	//	BooleanVariableRef | IntegerVariableRef | RealVariableRef | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.ClassicalExpression0Elements getClassicalExpression0Access() {
		return gaFSMDsl.getClassicalExpression0Access();
	}
	
	public ParserRule getClassicalExpression0Rule() {
		return getClassicalExpression0Access().getRule();
	}

	//SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
	//	"SeqIsEmpty" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqIsEmptyElements getSeqIsEmptyAccess() {
		return gaFSMDsl.getSeqIsEmptyAccess();
	}
	
	public ParserRule getSeqIsEmptyRule() {
		return getSeqIsEmptyAccess().getRule();
	}

	//SeqGetTail returns ClassicalExpression::SeqGetTail:
	//	"SeqGetTail" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqGetTailElements getSeqGetTailAccess() {
		return gaFSMDsl.getSeqGetTailAccess();
	}
	
	public ParserRule getSeqGetTailRule() {
		return getSeqGetTailAccess().getRule();
	}

	//SeqGetHead returns ClassicalExpression::SeqGetHead:
	//	"SeqGetHead" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqGetHeadElements getSeqGetHeadAccess() {
		return gaFSMDsl.getSeqGetHeadAccess();
	}
	
	public ParserRule getSeqGetHeadRule() {
		return getSeqGetHeadAccess().getRule();
	}

	//BindableEntity returns ClockExpressionAndRelation::BindableEntity:
	//	Expression | Relation | AbstractEntity;
	public CCSLLibraryGrammarAccess.BindableEntityElements getBindableEntityAccess() {
		return gaFSMDsl.getBindableEntityAccess();
	}
	
	public ParserRule getBindableEntityRule() {
		return getBindableEntityAccess().getRule();
	}

	//RealExpression returns ClassicalExpression::RealExpression:
	//	RealRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply | RealVariableRef;
	public CCSLLibraryGrammarAccess.RealExpressionElements getRealExpressionAccess() {
		return gaFSMDsl.getRealExpressionAccess();
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}

	//BooleanExpression returns ClassicalExpression::BooleanExpression:
	//	BooleanRef | Not | And | Or | Xor | RealEqual | RealInf | RealSup | IntEqual | IntInf | IntSup | SeqIsEmpty |
	//	BooleanVariableRef;
	public CCSLLibraryGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaFSMDsl.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//SeqExpression returns ClassicalExpression::SeqExpression:
	//	SeqGetTail | SeqDecr | SeqSched | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.SeqExpressionElements getSeqExpressionAccess() {
		return gaFSMDsl.getSeqExpressionAccess();
	}
	
	public ParserRule getSeqExpressionRule() {
		return getSeqExpressionAccess().getRule();
	}

	////| CharElement;
	// PrimitiveElement returns BasicType::PrimitiveElement:
	//	StringElement | BooleanElement | IntegerElement | IntegerVariableRef | RealElement;
	public CCSLLibraryGrammarAccess.PrimitiveElementElements getPrimitiveElementAccess() {
		return gaFSMDsl.getPrimitiveElementAccess();
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//PrimitiveType returns BasicType::PrimitiveType:
	//	String1 | Boolean | Integer | Real | Char | EnumerationType;
	public CCSLLibraryGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaFSMDsl.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//kernelExpressionDecl returns KernelExpression::KernelExpressionDeclaration:
	//	Death | UpTo | Union | Intersection | Inf | Sup | Concatenation | StrictSampling | NonStrictSampling | Defer |
	//	Discretization | Wait;
	public CCSLLibraryGrammarAccess.KernelExpressionDeclElements getKernelExpressionDeclAccess() {
		return gaFSMDsl.getKernelExpressionDeclAccess();
	}
	
	public ParserRule getKernelExpressionDeclRule() {
		return getKernelExpressionDeclAccess().getRule();
	}

	//kernelRelationDecl returns KernelRelation::KernelRelationDeclaration:
	//	Precedence | NonStrictPrecedence | Coincidence | SubClock | Exclusion;
	public CCSLLibraryGrammarAccess.KernelRelationDeclElements getKernelRelationDeclAccess() {
		return gaFSMDsl.getKernelRelationDeclAccess();
	}
	
	public ParserRule getKernelRelationDeclRule() {
		return getKernelRelationDeclAccess().getRule();
	}

	//String0 returns ecore::EString:
	//	"String" STRING | ID;
	public CCSLLibraryGrammarAccess.String0Elements getString0Access() {
		return gaFSMDsl.getString0Access();
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//AbstractEntity returns ClockExpressionAndRelation::AbstractEntity:
	//	name=ID ":" type=[BasicType::Type|EString] desiredEventKind=EventKind?;
	public CCSLLibraryGrammarAccess.AbstractEntityElements getAbstractEntityAccess() {
		return gaFSMDsl.getAbstractEntityAccess();
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//enum EventKind:
	//	start | finish | finish="stop" | consume | produce | receive | send | undefined="any" | undefined="all" | undefined;
	public CCSLLibraryGrammarAccess.EventKindElements getEventKindAccess() {
		return gaFSMDsl.getEventKindAccess();
	}
	
	public EnumRule getEventKindRule() {
		return getEventKindAccess().getRule();
	}

	////ConcreteEntity_Impl returns ClockExpressionAndRelation::ConcreteEntity:
	//
	////	{ClockExpressionAndRelation::ConcreteEntity}
	// //	'ConcreteEntity' name=ID;
	// Boolean0 returns ecore::EBoolean:
	//	"True" | "False";
	public CCSLLibraryGrammarAccess.Boolean0Elements getBoolean0Access() {
		return gaFSMDsl.getBoolean0Access();
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}

	////Integer0 returns ecore::EInt:
	// //	'Integer' INT | ID;
	// BooleanRef returns ClassicalExpression::BooleanRef:
	//	"BooleanRef" "{" ("name" name=ID)? "referencedBool" referencedBool=[BasicType::BooleanElement|EString] "}";
	public CCSLLibraryGrammarAccess.BooleanRefElements getBooleanRefAccess() {
		return gaFSMDsl.getBooleanRefAccess();
	}
	
	public ParserRule getBooleanRefRule() {
		return getBooleanRefAccess().getRule();
	}

	//RealRef returns ClassicalExpression::RealRef:
	//	"RealRef" "{" ("name" name=ID)? "realElem" realElem=[BasicType::RealElement|EString] "}";
	public CCSLLibraryGrammarAccess.RealRefElements getRealRefAccess() {
		return gaFSMDsl.getRealRefAccess();
	}
	
	public ParserRule getRealRefRule() {
		return getRealRefAccess().getRule();
	}

	//IntegerRef returns ClassicalExpression::IntegerRef:
	//	"IntegerRef" ("name" name=ID)? "[" integerElem=[BasicType::IntegerElement|EString] "]";
	public CCSLLibraryGrammarAccess.IntegerRefElements getIntegerRefAccess() {
		return gaFSMDsl.getIntegerRefAccess();
	}
	
	public ParserRule getIntegerRefRule() {
		return getIntegerRefAccess().getRule();
	}

	//UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	"UnaryRealPlus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand" operand=RealExpression
	//	"}";
	public CCSLLibraryGrammarAccess.UnaryRealPlusElements getUnaryRealPlusAccess() {
		return gaFSMDsl.getUnaryRealPlusAccess();
	}
	
	public ParserRule getUnaryRealPlusRule() {
		return getUnaryRealPlusAccess().getRule();
	}

	//UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	"UnaryRealMinus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand"
	//	operand=RealExpression "}";
	public CCSLLibraryGrammarAccess.UnaryRealMinusElements getUnaryRealMinusAccess() {
		return gaFSMDsl.getUnaryRealMinusAccess();
	}
	
	public ParserRule getUnaryRealMinusRule() {
		return getUnaryRealMinusAccess().getRule();
	}

	//RealPlus returns ClassicalExpression::RealPlus:
	//	"RealPlus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealPlusElements getRealPlusAccess() {
		return gaFSMDsl.getRealPlusAccess();
	}
	
	public ParserRule getRealPlusRule() {
		return getRealPlusAccess().getRule();
	}

	//RealMinus returns ClassicalExpression::RealMinus:
	//	"RealMinus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMinusElements getRealMinusAccess() {
		return gaFSMDsl.getRealMinusAccess();
	}
	
	public ParserRule getRealMinusRule() {
		return getRealMinusAccess().getRule();
	}

	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	"RealMultiply" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMultiplyElements getRealMultiplyAccess() {
		return gaFSMDsl.getRealMultiplyAccess();
	}
	
	public ParserRule getRealMultiplyRule() {
		return getRealMultiplyAccess().getRule();
	}

	//UnaryIntPlus returns ClassicalExpression::UnaryIntPlus:
	//	"UnaryIntPlus" "{" ("name" name=ID)? "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.UnaryIntPlusElements getUnaryIntPlusAccess() {
		return gaFSMDsl.getUnaryIntPlusAccess();
	}
	
	public ParserRule getUnaryIntPlusRule() {
		return getUnaryIntPlusAccess().getRule();
	}

	//UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
	//	"UnaryIntMinus" "{" ("name" name=ID)? "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.UnaryIntMinusElements getUnaryIntMinusAccess() {
		return gaFSMDsl.getUnaryIntMinusAccess();
	}
	
	public ParserRule getUnaryIntMinusRule() {
		return getUnaryIntMinusAccess().getRule();
	}

	//IntPlus returns ClassicalExpression::IntPlus:
	//	"IntPlus" name=ID? "(" leftValue=IntegerExpression "," rightValue=IntegerExpression ")";
	public CCSLLibraryGrammarAccess.IntPlusElements getIntPlusAccess() {
		return gaFSMDsl.getIntPlusAccess();
	}
	
	public ParserRule getIntPlusRule() {
		return getIntPlusAccess().getRule();
	}

	//IntMinus returns ClassicalExpression::IntMinus:
	//	"IntMinus" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntMinusElements getIntMinusAccess() {
		return gaFSMDsl.getIntMinusAccess();
	}
	
	public ParserRule getIntMinusRule() {
		return getIntMinusAccess().getRule();
	}

	//IntMultiply returns ClassicalExpression::IntMultiply:
	//	"IntMultiply" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntMultiplyElements getIntMultiplyAccess() {
		return gaFSMDsl.getIntMultiplyAccess();
	}
	
	public ParserRule getIntMultiplyRule() {
		return getIntMultiplyAccess().getRule();
	}

	//IntDivide returns ClassicalExpression::IntDivide:
	//	"IntDivide" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression
	//	"}";
	public CCSLLibraryGrammarAccess.IntDivideElements getIntDivideAccess() {
		return gaFSMDsl.getIntDivideAccess();
	}
	
	public ParserRule getIntDivideRule() {
		return getIntDivideAccess().getRule();
	}

	//Not returns ClassicalExpression::Not:
	//	"Not" name=ID? "(" operand=BooleanExpression ")";
	public CCSLLibraryGrammarAccess.NotElements getNotAccess() {
		return gaFSMDsl.getNotAccess();
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//And returns ClassicalExpression::And:
	//	"And" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.AndElements getAndAccess() {
		return gaFSMDsl.getAndAccess();
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or returns ClassicalExpression::Or:
	//	"Or" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.OrElements getOrAccess() {
		return gaFSMDsl.getOrAccess();
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor returns ClassicalExpression::Xor:
	//	"Xor" "{" ("name" name=ID)? "leftValue" leftValue=BooleanExpression "rightValue" rightValue=BooleanExpression "}";
	public CCSLLibraryGrammarAccess.XorElements getXorAccess() {
		return gaFSMDsl.getXorAccess();
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	//RealEqual returns ClassicalExpression::RealEqual:
	//	"RealEqual" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealEqualElements getRealEqualAccess() {
		return gaFSMDsl.getRealEqualAccess();
	}
	
	public ParserRule getRealEqualRule() {
		return getRealEqualAccess().getRule();
	}

	//RealInf returns ClassicalExpression::RealInf:
	//	"RealInf" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealInfElements getRealInfAccess() {
		return gaFSMDsl.getRealInfAccess();
	}
	
	public ParserRule getRealInfRule() {
		return getRealInfAccess().getRule();
	}

	//RealSup returns ClassicalExpression::RealSup:
	//	"RealSup" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealSupElements getRealSupAccess() {
		return gaFSMDsl.getRealSupAccess();
	}
	
	public ParserRule getRealSupRule() {
		return getRealSupAccess().getRule();
	}

	//IntInf returns ClassicalExpression::IntInf:
	//	"IntInf" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.IntInfElements getIntInfAccess() {
		return gaFSMDsl.getIntInfAccess();
	}
	
	public ParserRule getIntInfRule() {
		return getIntInfAccess().getRule();
	}

	//IntSup returns ClassicalExpression::IntSup:
	//	"IntSup" "{" ("name" name=ID)? "leftValue" leftValue=IntegerExpression "rightValue" rightValue=IntegerExpression "}";
	public CCSLLibraryGrammarAccess.IntSupElements getIntSupAccess() {
		return gaFSMDsl.getIntSupAccess();
	}
	
	public ParserRule getIntSupRule() {
		return getIntSupAccess().getRule();
	}

	//SeqDecr returns ClassicalExpression::SeqDecr:
	//	"SeqDecr" name=ID? "(" operand=SeqExpression ")";
	public CCSLLibraryGrammarAccess.SeqDecrElements getSeqDecrAccess() {
		return gaFSMDsl.getSeqDecrAccess();
	}
	
	public ParserRule getSeqDecrRule() {
		return getSeqDecrAccess().getRule();
	}

	//SeqSched returns ClassicalExpression::SeqSched:
	//	"SeqSched" name=ID? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")";
	public CCSLLibraryGrammarAccess.SeqSchedElements getSeqSchedAccess() {
		return gaFSMDsl.getSeqSchedAccess();
	}
	
	public ParserRule getSeqSchedRule() {
		return getSeqSchedAccess().getRule();
	}

	//BooleanVariableRef returns ClassicalExpression::BooleanVariableRef:
	//	"BooleanVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.BooleanVariableRefElements getBooleanVariableRefAccess() {
		return gaFSMDsl.getBooleanVariableRefAccess();
	}
	
	public ParserRule getBooleanVariableRefRule() {
		return getBooleanVariableRefAccess().getRule();
	}

	//IntegerVariableRef returns ClassicalExpression::IntegerVariableRef:
	//	"IntegerVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.IntegerVariableRefElements getIntegerVariableRefAccess() {
		return gaFSMDsl.getIntegerVariableRefAccess();
	}
	
	public ParserRule getIntegerVariableRefRule() {
		return getIntegerVariableRefAccess().getRule();
	}

	//RealVariableRef returns ClassicalExpression::RealVariableRef:
	//	"RealVariableRef" ("name" name=ID)? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.RealVariableRefElements getRealVariableRefAccess() {
		return gaFSMDsl.getRealVariableRefAccess();
	}
	
	public ParserRule getRealVariableRefRule() {
		return getRealVariableRefAccess().getRule();
	}

	//NumberSeqRef returns ClassicalExpression::NumberSeqRef:
	//	"SeqRef" ("name" name=ID)? "[" referencedNumberSeq=[BasicType::SequenceElement|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqRefElements getNumberSeqRefAccess() {
		return gaFSMDsl.getNumberSeqRefAccess();
	}
	
	public ParserRule getNumberSeqRefRule() {
		return getNumberSeqRefAccess().getRule();
	}

	//NumberSeqVariableRef returns ClassicalExpression::NumberSeqVariableRef:
	//	"SeqVarRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqVariableRefElements getNumberSeqVariableRefAccess() {
		return gaFSMDsl.getNumberSeqVariableRefAccess();
	}
	
	public ParserRule getNumberSeqVariableRefRule() {
		return getNumberSeqVariableRefAccess().getRule();
	}

	//RealElement returns BasicType::RealElement:
	//	"Real" name=ID (":" type=[BasicType::Type|EString])? "=" value=Real0;
	public CCSLLibraryGrammarAccess.RealElementElements getRealElementAccess() {
		return gaFSMDsl.getRealElementAccess();
	}
	
	public ParserRule getRealElementRule() {
		return getRealElementAccess().getRule();
	}

	//terminal Real0 returns ecore::EFloat:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getReal0Rule() {
		return gaFSMDsl.getReal0Rule();
	} 

	////Real0 returns Real:
	// //	'Real' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// IntegerElement
	//returns BasicType::IntegerElement:
	//	"Integer" name=ID (":" type=[BasicType::Type|EString])? "=" value=INT | name=ID "=" value=INT | value=INT;
	public CCSLLibraryGrammarAccess.IntegerElementElements getIntegerElementAccess() {
		return gaFSMDsl.getIntegerElementAccess();
	}
	
	public ParserRule getIntegerElementRule() {
		return getIntegerElementAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaFSMDsl.getINTRule();
	} 

	//BooleanElement returns BasicType::BooleanElement:
	//	"BooleanElement" name=ID (":" type=[BasicType::Type] | EString)? "=" value=Boolean0;
	public CCSLLibraryGrammarAccess.BooleanElementElements getBooleanElementAccess() {
		return gaFSMDsl.getBooleanElementAccess();
	}
	
	public ParserRule getBooleanElementRule() {
		return getBooleanElementAccess().getRule();
	}

	//SequenceElement returns BasicType::SequenceElement:
	//	{BasicType::SequenceElement} "Sequence" name=ID? (":" type=[BasicType::Type|EString])? "="
	//	(finitePart+=PrimitiveElement (";" finitePart+=PrimitiveElement)* ";"?)? ("(" nonFinitePart+=PrimitiveElement (";"
	//	nonFinitePart+=PrimitiveElement)* ")")?;
	public CCSLLibraryGrammarAccess.SequenceElementElements getSequenceElementAccess() {
		return gaFSMDsl.getSequenceElementAccess();
	}
	
	public ParserRule getSequenceElementRule() {
		return getSequenceElementAccess().getRule();
	}

	//StringElement returns BasicType::StringElement:
	//	"String" name=ID "=" value=String0;
	public CCSLLibraryGrammarAccess.StringElementElements getStringElementAccess() {
		return gaFSMDsl.getStringElementAccess();
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	////		('type' type=[BasicType::Type|EString])?
	// //CharElement returns BasicType::CharElement:
	// //	'CharElement'
	// //	'{'
	//
	////		('name' name=ID)?
	// //		'value' value=Char0
	// //		('type' type=[BasicType::Type|EString])?
	// //    '}';
	//
	////Char0 returns Char:
	// //	'Char' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// RecordElement
	//returns BasicType::RecordElement:
	//	"RecordElement" "{" ("name" name=ID)? ("type" type=[BasicType::Type|EString])? "box" "{" box+=Box ("," box+=Box)* "}"
	//	"}";
	public CCSLLibraryGrammarAccess.RecordElementElements getRecordElementAccess() {
		return gaFSMDsl.getRecordElementAccess();
	}
	
	public ParserRule getRecordElementRule() {
		return getRecordElementAccess().getRule();
	}

	//Box returns BasicType::Box:
	//	"Box" "{" "containment" containment=Element "}";
	public CCSLLibraryGrammarAccess.BoxElements getBoxAccess() {
		return gaFSMDsl.getBoxAccess();
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}

	//String1 returns BasicType::String:
	//	"StringType" name=ID;
	public CCSLLibraryGrammarAccess.String1Elements getString1Access() {
		return gaFSMDsl.getString1Access();
	}
	
	public ParserRule getString1Rule() {
		return getString1Access().getRule();
	}

	//Boolean returns BasicType::Boolean:
	//	"BooleanType" name=ID;
	public CCSLLibraryGrammarAccess.BooleanElements getBooleanAccess() {
		return gaFSMDsl.getBooleanAccess();
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Integer returns BasicType::Integer:
	//	"IntegerType" name=ID;
	public CCSLLibraryGrammarAccess.IntegerElements getIntegerAccess() {
		return gaFSMDsl.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Real returns BasicType::Real:
	//	"RealType" name=ID;
	public CCSLLibraryGrammarAccess.RealElements getRealAccess() {
		return gaFSMDsl.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Char returns BasicType::Char:
	//	"CharType" name=ID;
	public CCSLLibraryGrammarAccess.CharElements getCharAccess() {
		return gaFSMDsl.getCharAccess();
	}
	
	public ParserRule getCharRule() {
		return getCharAccess().getRule();
	}

	//Record returns BasicType::Record:
	//	"RecordType" name=ID "{" field+=Field ("," field+=Field)* "}";
	public CCSLLibraryGrammarAccess.RecordElements getRecordAccess() {
		return gaFSMDsl.getRecordAccess();
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//SequenceType returns BasicType::SequenceType:
	//	"SequenceType" name=ID ":" elementType=[BasicType::PrimitiveType];
	public CCSLLibraryGrammarAccess.SequenceTypeElements getSequenceTypeAccess() {
		return gaFSMDsl.getSequenceTypeAccess();
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//DiscreteClockType_Impl returns BasicType::DiscreteClockType:
	//	"DiscreteClockType" name=ID;
	public CCSLLibraryGrammarAccess.DiscreteClockType_ImplElements getDiscreteClockType_ImplAccess() {
		return gaFSMDsl.getDiscreteClockType_ImplAccess();
	}
	
	public ParserRule getDiscreteClockType_ImplRule() {
		return getDiscreteClockType_ImplAccess().getRule();
	}

	//DenseClockType returns BasicType::DenseClockType:
	//	"DenseClockType" name=ID "{" ("baseUnit" baseUnit=String0)? ("physicalMagnitude" physicalMagnitude=String0)? "}";
	public CCSLLibraryGrammarAccess.DenseClockTypeElements getDenseClockTypeAccess() {
		return gaFSMDsl.getDenseClockTypeAccess();
	}
	
	public ParserRule getDenseClockTypeRule() {
		return getDenseClockTypeAccess().getRule();
	}

	//EnumerationType returns BasicType::EnumerationType:
	//	"EnumerationType" "{" ("name" name=ID)? "enumLiteral" "{" enumLiteral+=String0 ("," enumLiteral+=String0)* "}" "}";
	public CCSLLibraryGrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaFSMDsl.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//Field returns BasicType::Field:
	//	"Field" "{" ("name" name=ID)? "type" type=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.FieldElements getFieldAccess() {
		return gaFSMDsl.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public CCSLLibraryGrammarAccess.EStringElements getEStringAccess() {
		return gaFSMDsl.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////This is only for the kernel.ccslLib !!!
	// SubClock returns KernelRelation::SubClock:
	//	"_SubClock" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.SubClockElements getSubClockAccess() {
		return gaFSMDsl.getSubClockAccess();
	}
	
	public ParserRule getSubClockRule() {
		return getSubClockAccess().getRule();
	}

	//Coincidence returns KernelRelation::Coincidence:
	//	"_Coincidence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.CoincidenceElements getCoincidenceAccess() {
		return gaFSMDsl.getCoincidenceAccess();
	}
	
	public ParserRule getCoincidenceRule() {
		return getCoincidenceAccess().getRule();
	}

	//Exclusion returns KernelRelation::Exclusion:
	//	"_Exclusion" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.ExclusionElements getExclusionAccess() {
		return gaFSMDsl.getExclusionAccess();
	}
	
	public ParserRule getExclusionRule() {
		return getExclusionAccess().getRule();
	}

	//Precedence returns KernelRelation::Precedence:
	//	"_Precedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.PrecedenceElements getPrecedenceAccess() {
		return gaFSMDsl.getPrecedenceAccess();
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}

	//NonStrictPrecedence returns KernelRelation::NonStrictPrecedence:
	//	"_NonStrictPrecedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity"
	//	leftEntity=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictPrecedenceElements getNonStrictPrecedenceAccess() {
		return gaFSMDsl.getNonStrictPrecedenceAccess();
	}
	
	public ParserRule getNonStrictPrecedenceRule() {
		return getNonStrictPrecedenceAccess().getRule();
	}

	//UpTo returns KernelExpression::UpTo:
	//	"_UpTo" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clockToFollow"
	//	clockToFollow=AbstractEntity "killerClock" killerClock=AbstractEntity "isPreemptive" isPreemptive=Boolean0 "}";
	public CCSLLibraryGrammarAccess.UpToElements getUpToAccess() {
		return gaFSMDsl.getUpToAccess();
	}
	
	public ParserRule getUpToRule() {
		return getUpToAccess().getRule();
	}

	//Defer returns KernelExpression::Defer:
	//	"_Defer" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "baseClock" baseClock=AbstractEntity
	//	"delayClock" delayClock=AbstractEntity "delayPattern" delayPattern=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DeferElements getDeferAccess() {
		return gaFSMDsl.getDeferAccess();
	}
	
	public ParserRule getDeferRule() {
		return getDeferAccess().getRule();
	}

	//StrictSampling returns KernelExpression::StrictSampling:
	//	"_StrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.StrictSamplingElements getStrictSamplingAccess() {
		return gaFSMDsl.getStrictSamplingAccess();
	}
	
	public ParserRule getStrictSamplingRule() {
		return getStrictSamplingAccess().getRule();
	}

	//Concatenation returns KernelExpression::Concatenation:
	//	"_Concatenation" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "leftClock"
	//	leftClock=AbstractEntity "rightClock" rightClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.ConcatenationElements getConcatenationAccess() {
		return gaFSMDsl.getConcatenationAccess();
	}
	
	public ParserRule getConcatenationRule() {
		return getConcatenationAccess().getRule();
	}

	//Union returns KernelExpression::Union:
	//	"_Union" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.UnionElements getUnionAccess() {
		return gaFSMDsl.getUnionAccess();
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//Intersection returns KernelExpression::Intersection:
	//	"_Intersection" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1"
	//	clock1=AbstractEntity "clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.IntersectionElements getIntersectionAccess() {
		return gaFSMDsl.getIntersectionAccess();
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}

	//Sup returns KernelExpression::Sup:
	//	"_Sup" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.SupElements getSupAccess() {
		return gaFSMDsl.getSupAccess();
	}
	
	public ParserRule getSupRule() {
		return getSupAccess().getRule();
	}

	//Inf returns KernelExpression::Inf:
	//	"_Inf" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.InfElements getInfAccess() {
		return gaFSMDsl.getInfAccess();
	}
	
	public ParserRule getInfRule() {
		return getInfAccess().getRule();
	}

	//NonStrictSampling returns KernelExpression::NonStrictSampling:
	//	"_NonStrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictSamplingElements getNonStrictSamplingAccess() {
		return gaFSMDsl.getNonStrictSamplingAccess();
	}
	
	public ParserRule getNonStrictSamplingRule() {
		return getNonStrictSamplingAccess().getRule();
	}

	//Wait returns KernelExpression::Wait:
	//	"_Wait" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "waitingClock"
	//	waitingClock=AbstractEntity "waitingValue" waitingValue=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.WaitElements getWaitAccess() {
		return gaFSMDsl.getWaitAccess();
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}

	//Discretization returns KernelExpression::Discretization:
	//	"_Discretization" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "denseClock"
	//	denseClock=AbstractEntity "discretizationFactor" discretizationFactor=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DiscretizationElements getDiscretizationAccess() {
		return gaFSMDsl.getDiscretizationAccess();
	}
	
	public ParserRule getDiscretizationRule() {
		return getDiscretizationAccess().getRule();
	}

	//Death returns KernelExpression::Death:
	//	"_Death" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.DeathElements getDeathAccess() {
		return gaFSMDsl.getDeathAccess();
	}
	
	public ParserRule getDeathRule() {
		return getDeathAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaFSMDsl.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaFSMDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaFSMDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaFSMDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaFSMDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaFSMDsl.getANY_OTHERRule();
	} 
}
