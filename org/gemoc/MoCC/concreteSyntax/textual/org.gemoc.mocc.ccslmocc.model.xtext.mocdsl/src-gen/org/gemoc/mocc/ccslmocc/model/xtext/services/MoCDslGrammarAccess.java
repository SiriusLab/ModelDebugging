/*
* generated by Xtext
*/
package org.gemoc.mocc.ccslmocc.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.gemoc.mocc.fsmkernel.model.xtext.services.FSMDslGrammarAccess;
import fr.inria.aoste.timesquare.ccslkernel.library.xtext.services.CCSLLibraryGrammarAccess;

@Singleton
public class MoCDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateRelationBasedLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRelationBasedLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateRelationBasedLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateRelationBasedLibraryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cImportsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cImportsAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_4_0_2_0 = (RuleCall)cImportsAssignment_4_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_0_3 = (Keyword)cGroup_4_0.eContents().get(3);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cExpressionLibrariesAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0 = (RuleCall)cExpressionLibrariesAssignment_4_1_0.eContents().get(0);
		private final Assignment cRelationLibrariesAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0 = (RuleCall)cRelationLibrariesAssignment_4_1_1.eContents().get(0);
		private final Assignment cPredefinedTypesAssignment_4_1_2 = (Assignment)cAlternatives_4_1.eContents().get(2);
		private final RuleCall cPredefinedTypesTypeParserRuleCall_4_1_2_0 = (RuleCall)cPredefinedTypesAssignment_4_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StateRelationBasedLibrary returns ccslmoc::StateRelationBasedLibrary:
		//	{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
		//	imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
		//	predefinedTypes+=Type)*) "}";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
		//imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
		//predefinedTypes+=Type)*) "}"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StateRelationBasedLibrary}
		public Action getStateRelationBasedLibraryAction_0() { return cStateRelationBasedLibraryAction_0; }

		//"StateRelationBasedLibrary"
		public Keyword getStateRelationBasedLibraryKeyword_1() { return cStateRelationBasedLibraryKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
		//relationLibraries+=RelationLibrary | predefinedTypes+=Type)*
		public Group getGroup_4() { return cGroup_4; }

		//("imports" "{" imports+=ImportStatement* "}")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"imports"
		public Keyword getImportsKeyword_4_0_0() { return cImportsKeyword_4_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0_1() { return cLeftCurlyBracketKeyword_4_0_1; }

		//imports+=ImportStatement*
		public Assignment getImportsAssignment_4_0_2() { return cImportsAssignment_4_0_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_4_0_2_0() { return cImportsImportStatementParserRuleCall_4_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_0_3() { return cRightCurlyBracketKeyword_4_0_3; }

		//(expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary | predefinedTypes+=Type)*
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//expressionLibraries+=ExpressionLibrary
		public Assignment getExpressionLibrariesAssignment_4_1_0() { return cExpressionLibrariesAssignment_4_1_0; }

		//ExpressionLibrary
		public RuleCall getExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0() { return cExpressionLibrariesExpressionLibraryParserRuleCall_4_1_0_0; }

		//relationLibraries+=RelationLibrary
		public Assignment getRelationLibrariesAssignment_4_1_1() { return cRelationLibrariesAssignment_4_1_1; }

		//RelationLibrary
		public RuleCall getRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0() { return cRelationLibrariesRelationLibraryParserRuleCall_4_1_1_0; }

		//predefinedTypes+=Type
		public Assignment getPredefinedTypesAssignment_4_1_2() { return cPredefinedTypesAssignment_4_1_2; }

		//Type
		public RuleCall getPredefinedTypesTypeParserRuleCall_4_1_2_0() { return cPredefinedTypesTypeParserRuleCall_4_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAliasString0ParserRuleCall_3_0 = (RuleCall)cAliasAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ImportStatement returns TimeModel::ImportStatement:
		//	"import" importURI=STRING "as" alias=String0 ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING "as" alias=String0 ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//alias=String0
		public Assignment getAliasAssignment_3() { return cAliasAssignment_3; }

		//String0
		public RuleCall getAliasString0ParserRuleCall_3_0() { return cAliasString0ParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RelationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUserRelationDefinition_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalRelationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalRelationDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCCSLStateMachineRelationDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// <--- Override --->	
		//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
		//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
		//	CCSLStateMachineRelationDefinition;
		public ParserRule getRule() { return rule; }

		//UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
		//CCSLStateMachineRelationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//UserRelationDefinition_Impl
		public RuleCall getUserRelationDefinition_ImplParserRuleCall_0() { return cUserRelationDefinition_ImplParserRuleCall_0; }

		//ConditionalRelationDefinition
		public RuleCall getConditionalRelationDefinitionParserRuleCall_1() { return cConditionalRelationDefinitionParserRuleCall_1; }

		//ExternalRelationDefinition
		public RuleCall getExternalRelationDefinitionParserRuleCall_2() { return cExternalRelationDefinitionParserRuleCall_2; }

		//CCSLStateMachineRelationDefinition
		public RuleCall getCCSLStateMachineRelationDefinitionParserRuleCall_3() { return cCCSLStateMachineRelationDefinitionParserRuleCall_3; }
	}

	public class CCSLStateMachineRelationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CCSLStateMachineRelationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineRelationDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateBasedRelationDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDeclarationRelationDeclarationCrossReference_4_0 = (CrossReference)cDeclarationAssignment_4.eContents().get(0);
		private final RuleCall cDeclarationRelationDeclarationEStringParserRuleCall_4_0_1 = (RuleCall)cDeclarationRelationDeclarationCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDeclarationBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDeclarationBlockDeclarationBlockParserRuleCall_7_0 = (RuleCall)cDeclarationBlockAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInitKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInitialStatesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cInitialStatesStateCrossReference_8_1_0 = (CrossReference)cInitialStatesAssignment_8_1.eContents().get(0);
		private final RuleCall cInitialStatesStateEStringParserRuleCall_8_1_0_1 = (RuleCall)cInitialStatesStateCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInitialStatesAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cInitialStatesStateCrossReference_9_1_0 = (CrossReference)cInitialStatesAssignment_9_1.eContents().get(0);
		private final RuleCall cInitialStatesStateEStringParserRuleCall_9_1_0_1 = (RuleCall)cInitialStatesStateCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cFinalsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cFinalStatesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cFinalStatesStateCrossReference_10_1_0 = (CrossReference)cFinalStatesAssignment_10_1.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_10_1_0_1 = (RuleCall)cFinalStatesStateCrossReference_10_1_0.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cFinalStatesAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final CrossReference cFinalStatesStateCrossReference_10_2_1_0 = (CrossReference)cFinalStatesAssignment_10_2_1.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_10_2_1_0_1 = (RuleCall)cFinalStatesStateCrossReference_10_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cStatesAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_11_0_0 = (RuleCall)cStatesAssignment_11_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_11_1_0 = (RuleCall)cTransitionsAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CCSLStateMachineRelationDefinition returns ccslmoc::StateMachineRelationDefinition:
		//	{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString "["
		//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{" declarationBlock=DeclarationBlock?
		//	("init: " initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
		//	finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
		//	transitions+=Transition)+ "}";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString "["
		//declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{" declarationBlock=DeclarationBlock?
		//("init: " initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
		//finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
		//transitions+=Transition)+ "}"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StateMachineRelationDefinition}
		public Action getStateMachineRelationDefinitionAction_0() { return cStateMachineRelationDefinitionAction_0; }

		//"StateBasedRelationDefinition"
		public Keyword getStateBasedRelationDefinitionKeyword_1() { return cStateBasedRelationDefinitionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//declaration=[ClockExpressionAndRelation::RelationDeclaration|EString]
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }

		//[ClockExpressionAndRelation::RelationDeclaration|EString]
		public CrossReference getDeclarationRelationDeclarationCrossReference_4_0() { return cDeclarationRelationDeclarationCrossReference_4_0; }

		//EString
		public RuleCall getDeclarationRelationDeclarationEStringParserRuleCall_4_0_1() { return cDeclarationRelationDeclarationEStringParserRuleCall_4_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//declarationBlock=DeclarationBlock?
		public Assignment getDeclarationBlockAssignment_7() { return cDeclarationBlockAssignment_7; }

		//DeclarationBlock
		public RuleCall getDeclarationBlockDeclarationBlockParserRuleCall_7_0() { return cDeclarationBlockDeclarationBlockParserRuleCall_7_0; }

		//"init: " initialStates+=[fsmmodel::State|EString]
		public Group getGroup_8() { return cGroup_8; }

		//"init: "
		public Keyword getInitKeyword_8_0() { return cInitKeyword_8_0; }

		//initialStates+=[fsmmodel::State|EString]
		public Assignment getInitialStatesAssignment_8_1() { return cInitialStatesAssignment_8_1; }

		//[fsmmodel::State|EString]
		public CrossReference getInitialStatesStateCrossReference_8_1_0() { return cInitialStatesStateCrossReference_8_1_0; }

		//EString
		public RuleCall getInitialStatesStateEStringParserRuleCall_8_1_0_1() { return cInitialStatesStateEStringParserRuleCall_8_1_0_1; }

		//("," initialStates+=[fsmmodel::State|EString])*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//initialStates+=[fsmmodel::State|EString]
		public Assignment getInitialStatesAssignment_9_1() { return cInitialStatesAssignment_9_1; }

		//[fsmmodel::State|EString]
		public CrossReference getInitialStatesStateCrossReference_9_1_0() { return cInitialStatesStateCrossReference_9_1_0; }

		//EString
		public RuleCall getInitialStatesStateEStringParserRuleCall_9_1_0_1() { return cInitialStatesStateEStringParserRuleCall_9_1_0_1; }

		//("finals: " finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)?
		public Group getGroup_10() { return cGroup_10; }

		//"finals: "
		public Keyword getFinalsKeyword_10_0() { return cFinalsKeyword_10_0; }

		//finalStates+=[fsmmodel::State|EString]
		public Assignment getFinalStatesAssignment_10_1() { return cFinalStatesAssignment_10_1; }

		//[fsmmodel::State|EString]
		public CrossReference getFinalStatesStateCrossReference_10_1_0() { return cFinalStatesStateCrossReference_10_1_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_10_1_0_1() { return cFinalStatesStateEStringParserRuleCall_10_1_0_1; }

		//("," finalStates+=[fsmmodel::State|EString])*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//","
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }

		//finalStates+=[fsmmodel::State|EString]
		public Assignment getFinalStatesAssignment_10_2_1() { return cFinalStatesAssignment_10_2_1; }

		//[fsmmodel::State|EString]
		public CrossReference getFinalStatesStateCrossReference_10_2_1_0() { return cFinalStatesStateCrossReference_10_2_1_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_10_2_1_0_1() { return cFinalStatesStateEStringParserRuleCall_10_2_1_0_1; }

		//(states+=State | transitions+=Transition)+
		public Alternatives getAlternatives_11() { return cAlternatives_11; }

		//states+=State
		public Assignment getStatesAssignment_11_0() { return cStatesAssignment_11_0; }

		//State
		public RuleCall getStatesStateParserRuleCall_11_0_0() { return cStatesStateParserRuleCall_11_0_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_11_1() { return cTransitionsAssignment_11_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_11_1_0() { return cTransitionsTransitionParserRuleCall_11_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameEStringParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Group cGroup_8_0_0 = (Group)cGroup_8_0.eContents().get(0);
		private final Keyword cWhenKeyword_8_0_0_0 = (Keyword)cGroup_8_0_0.eContents().get(0);
		private final Assignment cTriggerAssignment_8_0_0_1 = (Assignment)cGroup_8_0_0.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_8_0_0_1_0 = (RuleCall)cTriggerAssignment_8_0_0_1.eContents().get(0);
		private final Group cGroup_8_0_1 = (Group)cGroup_8_0.eContents().get(1);
		private final Keyword cIfKeyword_8_0_1_0 = (Keyword)cGroup_8_0_1.eContents().get(0);
		private final Assignment cGuardAssignment_8_0_1_1 = (Assignment)cGroup_8_0_1.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_8_0_1_1_0 = (RuleCall)cGuardAssignment_8_0_1_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Group cGroup_8_1_0 = (Group)cGroup_8_1.eContents().get(0);
		private final Keyword cIfKeyword_8_1_0_0 = (Keyword)cGroup_8_1_0.eContents().get(0);
		private final Assignment cGuardAssignment_8_1_0_1 = (Assignment)cGroup_8_1_0.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_8_1_0_1_0 = (RuleCall)cGuardAssignment_8_1_0_1.eContents().get(0);
		private final Group cGroup_8_1_1 = (Group)cGroup_8_1.eContents().get(1);
		private final Keyword cWhenKeyword_8_1_1_0 = (Keyword)cGroup_8_1_1.eContents().get(0);
		private final Assignment cTriggerAssignment_8_1_1_1 = (Assignment)cGroup_8_1_1.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_8_1_1_1_0 = (RuleCall)cTriggerAssignment_8_1_1_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cDoKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cActionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_9_1_0 = (RuleCall)cActionsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Transition returns fsmmodel::Transition:
		//	{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
		//	"(" (("when" trigger=Trigger) ("if" guard=Guard)? | ("if" guard=Guard) ("when" trigger=Trigger)?)? ("do"
		//	actions+=Action)* ")";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
		//"(" (("when" trigger=Trigger) ("if" guard=Guard)? | ("if" guard=Guard) ("when" trigger=Trigger)?)? ("do"
		//actions+=Action)* ")"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[fsmmodel::State|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[fsmmodel::State|EString]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }

		//EString
		public RuleCall getSourceStateEStringParserRuleCall_2_0_1() { return cSourceStateEStringParserRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=[fsmmodel::State|EString]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[fsmmodel::State|EString]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }

		//EString
		public RuleCall getTargetStateEStringParserRuleCall_4_0_1() { return cTargetStateEStringParserRuleCall_4_0_1; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//name=EString
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//EString
		public RuleCall getNameEStringParserRuleCall_6_0() { return cNameEStringParserRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//(("when" trigger=Trigger) ("if" guard=Guard)? | ("if" guard=Guard) ("when" trigger=Trigger)?)?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//("when" trigger=Trigger) ("if" guard=Guard)?
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"when" trigger=Trigger
		public Group getGroup_8_0_0() { return cGroup_8_0_0; }

		//"when"
		public Keyword getWhenKeyword_8_0_0_0() { return cWhenKeyword_8_0_0_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_8_0_0_1() { return cTriggerAssignment_8_0_0_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_8_0_0_1_0() { return cTriggerTriggerParserRuleCall_8_0_0_1_0; }

		//("if" guard=Guard)?
		public Group getGroup_8_0_1() { return cGroup_8_0_1; }

		//"if"
		public Keyword getIfKeyword_8_0_1_0() { return cIfKeyword_8_0_1_0; }

		//guard=Guard
		public Assignment getGuardAssignment_8_0_1_1() { return cGuardAssignment_8_0_1_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_8_0_1_1_0() { return cGuardGuardParserRuleCall_8_0_1_1_0; }

		//("if" guard=Guard) ("when" trigger=Trigger)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//"if" guard=Guard
		public Group getGroup_8_1_0() { return cGroup_8_1_0; }

		//"if"
		public Keyword getIfKeyword_8_1_0_0() { return cIfKeyword_8_1_0_0; }

		//guard=Guard
		public Assignment getGuardAssignment_8_1_0_1() { return cGuardAssignment_8_1_0_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_8_1_0_1_0() { return cGuardGuardParserRuleCall_8_1_0_1_0; }

		//("when" trigger=Trigger)?
		public Group getGroup_8_1_1() { return cGroup_8_1_1; }

		//"when"
		public Keyword getWhenKeyword_8_1_1_0() { return cWhenKeyword_8_1_1_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_8_1_1_1() { return cTriggerAssignment_8_1_1_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_8_1_1_1_0() { return cTriggerTriggerParserRuleCall_8_1_1_1_0; }

		//("do" actions+=Action)*
		public Group getGroup_9() { return cGroup_9; }

		//"do"
		public Keyword getDoKeyword_9_0() { return cDoKeyword_9_0; }

		//actions+=Action
		public Assignment getActionsAssignment_9_1() { return cActionsAssignment_9_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_9_1_0() { return cActionsActionParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTrueTriggersAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_1_0_0_0 = (CrossReference)cTrueTriggersAssignment_1_0_0.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_1_0_0_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_1_0_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cTrueTriggersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_1_0_1_1_0 = (CrossReference)cTrueTriggersAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_1_0_1_1_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cNotKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFalseTriggersAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_1_1_2_0 = (CrossReference)cFalseTriggersAssignment_1_1_2.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_1_1_2_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_1_1_2_0.eContents().get(1);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cFalseTriggersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_1_1_3_1_0 = (CrossReference)cFalseTriggersAssignment_1_1_3_1.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_1_1_3_1_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_1_1_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		//// <--- Override --->    
		////('.' (trueTriggers+=[TimeModel::Clock|EString])|
		////('not' '(' falseTriggers+=[TimeModel::Clock|EString])')')*
		////('and' trigger+=[TimeModel::Clock|EString])*
		//Trigger returns fsmmodel::Trigger:
		//	{fsmmodel::Trigger} (trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* | "not" "("
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")");
		public ParserRule getRule() { return rule; }

		//{fsmmodel::Trigger} (trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* | "not" "("
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")
		public Group getGroup() { return cGroup; }

		//{fsmmodel::Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* | "not" "("
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_1_0_0() { return cTrueTriggersAssignment_1_0_0; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_1_0_0_0() { return cTrueTriggersBindableEntityCrossReference_1_0_0_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_1_0_0_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_1_0_0_0_1; }

		//("," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_1_0_1_1() { return cTrueTriggersAssignment_1_0_1_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_1_0_1_1_0() { return cTrueTriggersBindableEntityCrossReference_1_0_1_1_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_1_0_1_1_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_1_0_1_1_0_1; }

		//"not" "(" falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"not"
		public Keyword getNotKeyword_1_1_0() { return cNotKeyword_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_1_1_2() { return cFalseTriggersAssignment_1_1_2; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_1_1_2_0() { return cFalseTriggersBindableEntityCrossReference_1_1_2_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_1_1_2_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_1_1_2_0_1; }

		//("," falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//","
		public Keyword getCommaKeyword_1_1_3_0() { return cCommaKeyword_1_1_3_0; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_1_1_3_1() { return cFalseTriggersAssignment_1_1_3_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_1_1_3_1_0() { return cFalseTriggersBindableEntityCrossReference_1_1_3_1_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_1_1_3_1_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_1_1_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_4() { return cRightParenthesisKeyword_1_1_4; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFinishClockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartClockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerAssignementBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// <--- Override --->
		//Action returns fsmmodel::AbstractAction:
		//	FinishClock | StartClock | IntegerAssignement | IntegerAssignementBlock;
		public ParserRule getRule() { return rule; }

		//FinishClock | StartClock | IntegerAssignement | IntegerAssignementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//FinishClock
		public RuleCall getFinishClockParserRuleCall_0() { return cFinishClockParserRuleCall_0; }

		//StartClock
		public RuleCall getStartClockParserRuleCall_1() { return cStartClockParserRuleCall_1; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall_2() { return cIntegerAssignementParserRuleCall_2; }

		//IntegerAssignementBlock
		public RuleCall getIntegerAssignementBlockParserRuleCall_3() { return cIntegerAssignementBlockParserRuleCall_3; }
	}

	public class FinishClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinishClock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinishClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKillKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClockBindableEntityCrossReference_3_0 = (CrossReference)cClockAssignment_3.eContents().get(0);
		private final RuleCall cClockBindableEntityEStringParserRuleCall_3_0_1 = (RuleCall)cClockBindableEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FinishClock returns ccslmoc::FinishClock:
		//	{ccslmoc::FinishClock} "kill" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::FinishClock} "kill" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::FinishClock}
		public Action getFinishClockAction_0() { return cFinishClockAction_0; }

		//"kill"
		public Keyword getKillKeyword_1() { return cKillKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//clock=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getClockAssignment_3() { return cClockAssignment_3; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getClockBindableEntityCrossReference_3_0() { return cClockBindableEntityCrossReference_3_0; }

		//EString
		public RuleCall getClockBindableEntityEStringParserRuleCall_3_0_1() { return cClockBindableEntityEStringParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class StartClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartClock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartClockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cClockBindableEntityCrossReference_3_0 = (CrossReference)cClockAssignment_3.eContents().get(0);
		private final RuleCall cClockBindableEntityEStringParserRuleCall_3_0_1 = (RuleCall)cClockBindableEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StartClock returns ccslmoc::StartClock:
		//	{ccslmoc::StartClock} "start" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")";
		public ParserRule getRule() { return rule; }

		//{ccslmoc::StartClock} "start" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")"
		public Group getGroup() { return cGroup; }

		//{ccslmoc::StartClock}
		public Action getStartClockAction_0() { return cStartClockAction_0; }

		//"start"
		public Keyword getStartKeyword_1() { return cStartKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//clock=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getClockAssignment_3() { return cClockAssignment_3; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getClockBindableEntityCrossReference_3_0() { return cClockBindableEntityCrossReference_3_0; }

		//EString
		public RuleCall getClockBindableEntityEStringParserRuleCall_3_0_1() { return cClockBindableEntityEStringParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	private final StateRelationBasedLibraryElements pStateRelationBasedLibrary;
	private final ImportStatementElements pImportStatement;
	private final RelationDefinitionElements pRelationDefinition;
	private final CCSLStateMachineRelationDefinitionElements pCCSLStateMachineRelationDefinition;
	private final TransitionElements pTransition;
	private final TriggerElements pTrigger;
	private final ActionElements pAction;
	private final FinishClockElements pFinishClock;
	private final StartClockElements pStartClock;
	
	private final Grammar grammar;

	private final FSMDslGrammarAccess gaFSMDsl;

	@Inject
	public MoCDslGrammarAccess(GrammarProvider grammarProvider,
		FSMDslGrammarAccess gaFSMDsl) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaFSMDsl = gaFSMDsl;
		this.pStateRelationBasedLibrary = new StateRelationBasedLibraryElements();
		this.pImportStatement = new ImportStatementElements();
		this.pRelationDefinition = new RelationDefinitionElements();
		this.pCCSLStateMachineRelationDefinition = new CCSLStateMachineRelationDefinitionElements();
		this.pTransition = new TransitionElements();
		this.pTrigger = new TriggerElements();
		this.pAction = new ActionElements();
		this.pFinishClock = new FinishClockElements();
		this.pStartClock = new StartClockElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.mocc.ccslmocc.model.xtext.MoCDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public FSMDslGrammarAccess getFSMDslGrammarAccess() {
		return gaFSMDsl;
	}

	
	//StateRelationBasedLibrary returns ccslmoc::StateRelationBasedLibrary:
	//	{ccslmoc::StateRelationBasedLibrary} "StateRelationBasedLibrary" name=EString "{" (("imports" "{"
	//	imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary | relationLibraries+=RelationLibrary |
	//	predefinedTypes+=Type)*) "}";
	public StateRelationBasedLibraryElements getStateRelationBasedLibraryAccess() {
		return pStateRelationBasedLibrary;
	}
	
	public ParserRule getStateRelationBasedLibraryRule() {
		return getStateRelationBasedLibraryAccess().getRule();
	}

	//ImportStatement returns TimeModel::ImportStatement:
	//	"import" importURI=STRING "as" alias=String0 ";";
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//// <--- Override --->	
	//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
	//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |
	//	CCSLStateMachineRelationDefinition;
	public RelationDefinitionElements getRelationDefinitionAccess() {
		return pRelationDefinition;
	}
	
	public ParserRule getRelationDefinitionRule() {
		return getRelationDefinitionAccess().getRule();
	}

	//CCSLStateMachineRelationDefinition returns ccslmoc::StateMachineRelationDefinition:
	//	{ccslmoc::StateMachineRelationDefinition} "StateBasedRelationDefinition" name=EString "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{" declarationBlock=DeclarationBlock?
	//	("init: " initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
	//	finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
	//	transitions+=Transition)+ "}";
	public CCSLStateMachineRelationDefinitionElements getCCSLStateMachineRelationDefinitionAccess() {
		return pCCSLStateMachineRelationDefinition;
	}
	
	public ParserRule getCCSLStateMachineRelationDefinitionRule() {
		return getCCSLStateMachineRelationDefinitionAccess().getRule();
	}

	//Transition returns fsmmodel::Transition:
	//	{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
	//	"(" (("when" trigger=Trigger) ("if" guard=Guard)? | ("if" guard=Guard) ("when" trigger=Trigger)?)? ("do"
	//	actions+=Action)* ")";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// <--- Override --->    
	////('.' (trueTriggers+=[TimeModel::Clock|EString])|
	////('not' '(' falseTriggers+=[TimeModel::Clock|EString])')')*
	////('and' trigger+=[TimeModel::Clock|EString])*
	//Trigger returns fsmmodel::Trigger:
	//	{fsmmodel::Trigger} (trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* | "not" "("
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")");
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//// <--- Override --->
	//Action returns fsmmodel::AbstractAction:
	//	FinishClock | StartClock | IntegerAssignement | IntegerAssignementBlock;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//FinishClock returns ccslmoc::FinishClock:
	//	{ccslmoc::FinishClock} "kill" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")";
	public FinishClockElements getFinishClockAccess() {
		return pFinishClock;
	}
	
	public ParserRule getFinishClockRule() {
		return getFinishClockAccess().getRule();
	}

	//StartClock returns ccslmoc::StartClock:
	//	{ccslmoc::StartClock} "start" "(" clock=[ClockExpressionAndRelation::BindableEntity|EString] ")";
	public StartClockElements getStartClockAccess() {
		return pStartClock;
	}
	
	public ParserRule getStartClockRule() {
		return getStartClockAccess().getRule();
	}

	//StateMachineDefinition returns fsmmodel::StateMachineDefinition:
	//	{fsmmodel::StateMachineDefinition} "StateMachineDefinition" name=EString "{" declarationBlock=DeclarationBlock?
	//	("init: " initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
	//	finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
	//	transitions+=Transition)+ "}";
	public FSMDslGrammarAccess.StateMachineDefinitionElements getStateMachineDefinitionAccess() {
		return gaFSMDsl.getStateMachineDefinitionAccess();
	}
	
	public ParserRule getStateMachineDefinitionRule() {
		return getStateMachineDefinitionAccess().getRule();
	}

	//DeclarationBlock returns fsmmodel::DeclarationBlock:
	//	{fsmmodel::DeclarationBlock} "Declarations {" concreteEntities+=ConcreteEntity*
	//	classicalExpressions+=BooleanExpression* "}";
	public FSMDslGrammarAccess.DeclarationBlockElements getDeclarationBlockAccess() {
		return gaFSMDsl.getDeclarationBlockAccess();
	}
	
	public ParserRule getDeclarationBlockRule() {
		return getDeclarationBlockAccess().getRule();
	}

	//IntegerAssignementBlock returns extension::IntegerAssignementBlock:
	//	{extension::IntegerAssignementBlock} "#ref" name=EString "{" actions+=IntegerAssignement (","
	//	actions+=IntegerAssignement)* "}";
	public FSMDslGrammarAccess.IntegerAssignementBlockElements getIntegerAssignementBlockAccess() {
		return gaFSMDsl.getIntegerAssignementBlockAccess();
	}
	
	public ParserRule getIntegerAssignementBlockRule() {
		return getIntegerAssignementBlockAccess().getRule();
	}

	//State returns fsmmodel::State:
	//	{fsmmodel::State} "State" name=EString "(" ("in" ":" inputTransitions+=[fsmmodel::Transition|EString] (","
	//	inputTransitions+=[fsmmodel::Transition|EString])*)? ("out" ":" outputTransitions+=[fsmmodel::Transition|EString] (","
	//	outputTransitions+=[fsmmodel::Transition|EString])*)? ")";
	public FSMDslGrammarAccess.StateElements getStateAccess() {
		return gaFSMDsl.getStateAccess();
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Guard returns fsmmodel::Guard:
	//	{fsmmodel::Guard} value=BooleanExpression //[ClassicalExpression::BooleanExpression|EString])']')?
	//;
	public FSMDslGrammarAccess.GuardElements getGuardAccess() {
		return gaFSMDsl.getGuardAccess();
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement | IntSelfPlusAssign | IntSelfMinusAssign |
	//	IntSelfMultAssign | IntSelfDivAssign;
	public FSMDslGrammarAccess.BinaryIntegerExpressionElements getBinaryIntegerExpressionAccess() {
		return gaFSMDsl.getBinaryIntegerExpressionAccess();
	}
	
	public ParserRule getBinaryIntegerExpressionRule() {
		return getBinaryIntegerExpressionAccess().getRule();
	}

	//IntSelfPlusAssign returns extension::IntSelfPlusAssignement:
	//	{extension::IntSelfPlusAssignement} ("#ref" name=EString)? leftValue=IntegerRef "+=" rightValue=IntegerExpression;
	public FSMDslGrammarAccess.IntSelfPlusAssignElements getIntSelfPlusAssignAccess() {
		return gaFSMDsl.getIntSelfPlusAssignAccess();
	}
	
	public ParserRule getIntSelfPlusAssignRule() {
		return getIntSelfPlusAssignAccess().getRule();
	}

	//IntSelfMinusAssign returns extension::IntSelfMinusAssignement:
	//	{extension::IntSelfMinusAssignement} ("#ref" name=EString)? leftValue=IntegerRef "-=" rightValue=IntegerExpression;
	public FSMDslGrammarAccess.IntSelfMinusAssignElements getIntSelfMinusAssignAccess() {
		return gaFSMDsl.getIntSelfMinusAssignAccess();
	}
	
	public ParserRule getIntSelfMinusAssignRule() {
		return getIntSelfMinusAssignAccess().getRule();
	}

	//IntSelfMultAssign returns extension::IntSelfMultiplyAssignement:
	//	{extension::IntSelfMultiplyAssignement} ("#ref" name=EString)? leftValue=IntegerRef "*=" rightValue=IntegerExpression;
	public FSMDslGrammarAccess.IntSelfMultAssignElements getIntSelfMultAssignAccess() {
		return gaFSMDsl.getIntSelfMultAssignAccess();
	}
	
	public ParserRule getIntSelfMultAssignRule() {
		return getIntSelfMultAssignAccess().getRule();
	}

	//IntSelfDivAssign returns extension::IntSelfDivideAssignement:
	//	{extension::IntSelfDivideAssignement} ("#ref" name=EString)? leftValue=IntegerRef "/=" rightValue=IntegerExpression;
	public FSMDslGrammarAccess.IntSelfDivAssignElements getIntSelfDivAssignAccess() {
		return gaFSMDsl.getIntSelfDivAssignAccess();
	}
	
	public ParserRule getIntSelfDivAssignRule() {
		return getIntSelfDivAssignAccess().getRule();
	}

	//IntegerAssignement returns fsmmodel::IntegerAssignement:
	//	{fsmmodel::IntegerAssignement} ("#ref" name=EString)? leftValue=IntegerRef "=" rightValue= //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
	//	IntegerExpression;
	public FSMDslGrammarAccess.IntegerAssignementElements getIntegerAssignementAccess() {
		return gaFSMDsl.getIntegerAssignementAccess();
	}
	
	public ParserRule getIntegerAssignementRule() {
		return getIntegerAssignementAccess().getRule();
	}

	//IntegerExpression returns ClassicalExpression::IntegerExpression:
	//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
	public FSMDslGrammarAccess.IntegerExpressionElements getIntegerExpressionAccess() {
		return gaFSMDsl.getIntegerExpressionAccess();
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}

	//IntegerVariableRef returns ClassicalExpression::IntegerVariableRef:
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ".value" | "get("
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ")" | "IntegerVariableRef" name=ID? "["
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public FSMDslGrammarAccess.IntegerVariableRefElements getIntegerVariableRefAccess() {
		return gaFSMDsl.getIntegerVariableRefAccess();
	}
	
	public ParserRule getIntegerVariableRefRule() {
		return getIntegerVariableRefAccess().getRule();
	}

	//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
	//	UnaryIntPlus | UnaryIntMinus;
	public FSMDslGrammarAccess.UnaryIntegerExpressionElements getUnaryIntegerExpressionAccess() {
		return gaFSMDsl.getUnaryIntegerExpressionAccess();
	}
	
	public ParserRule getUnaryIntegerExpressionRule() {
		return getUnaryIntegerExpressionAccess().getRule();
	}

	//IntEqual returns ClassicalExpression::IntEqual:
	//	"(" leftValue=IntegerExpression "==" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "==" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "==" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntEqualElements getIntEqualAccess() {
		return gaFSMDsl.getIntEqualAccess();
	}
	
	public ParserRule getIntEqualRule() {
		return getIntEqualAccess().getRule();
	}

	//BooleanRef returns ClassicalExpression::BooleanRef:
	//	referencedBool=[BasicType::BooleanElement|EString] | "b[" referencedBool=[BasicType::BooleanElement|EString] "]" |
	//	"b#ref" name=ID "[" referencedBool=[BasicType::BooleanElement|EString] "]";
	public FSMDslGrammarAccess.BooleanRefElements getBooleanRefAccess() {
		return gaFSMDsl.getBooleanRefAccess();
	}
	
	public ParserRule getBooleanRefRule() {
		return getBooleanRefAccess().getRule();
	}

	/// *RealRef returns ClassicalExpression::RealRef:
	//	'r['realElem=[BasicType::RealElement|EString]']'|'r#ref'name=ID'['realElem=[BasicType::RealElement|EString]']';* / IntegerRef
	//returns ClassicalExpression::IntegerRef:
	//	integerElem=[BasicType::IntegerElement|EString] | "i[" integerElem=[BasicType::IntegerElement|EString] "]" | "i#ref"
	//	name=ID "[" integerElem=[BasicType::IntegerElement|EString] "]";
	public FSMDslGrammarAccess.IntegerRefElements getIntegerRefAccess() {
		return gaFSMDsl.getIntegerRefAccess();
	}
	
	public ParserRule getIntegerRefRule() {
		return getIntegerRefAccess().getRule();
	}

	/// *UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	('+' 
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'}')|
	//	('(+' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'})');* / / *UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	('-' 
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'}')|
	//	('(-' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'})');* / / *RealPlus returns ClassicalExpression::RealPlus:
	//	('('('#ref' name=String0)? leftValue=RealExpression '+' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '+' rightValue=RealExpression')');
	//
	//RealMinus returns ClassicalExpression::RealMinus:
	//	('('('#ref' name=String0)? leftValue=RealExpression '-' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '-' rightValue=RealExpression')');
	//
	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	('('('#ref' name=String0)? leftValue=RealExpression '*' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '*' rightValue=RealExpression')');* / UnaryIntPlus
	//returns ClassicalExpression::UnaryIntPlus:
	//	"+" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(+" ("#ref"
	//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "})";
	public FSMDslGrammarAccess.UnaryIntPlusElements getUnaryIntPlusAccess() {
		return gaFSMDsl.getUnaryIntPlusAccess();
	}
	
	public ParserRule getUnaryIntPlusRule() {
		return getUnaryIntPlusAccess().getRule();
	}

	//UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
	//	"-" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(-" ("#ref"
	//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "})";
	public FSMDslGrammarAccess.UnaryIntMinusElements getUnaryIntMinusAccess() {
		return gaFSMDsl.getUnaryIntMinusAccess();
	}
	
	public ParserRule getUnaryIntMinusRule() {
		return getUnaryIntMinusAccess().getRule();
	}

	//IntPlus returns ClassicalExpression::IntPlus:
	//	"(" leftValue=IntegerExpression "+" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "+" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "+" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntPlusElements getIntPlusAccess() {
		return gaFSMDsl.getIntPlusAccess();
	}
	
	public ParserRule getIntPlusRule() {
		return getIntPlusAccess().getRule();
	}

	//IntMinus returns ClassicalExpression::IntMinus:
	//	"(" leftValue=IntegerExpression "-" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "-" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "-" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntMinusElements getIntMinusAccess() {
		return gaFSMDsl.getIntMinusAccess();
	}
	
	public ParserRule getIntMinusRule() {
		return getIntMinusAccess().getRule();
	}

	//IntMultiply returns ClassicalExpression::IntMultiply:
	//	"(" leftValue=IntegerExpression "*" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "*" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "*" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntMultiplyElements getIntMultiplyAccess() {
		return gaFSMDsl.getIntMultiplyAccess();
	}
	
	public ParserRule getIntMultiplyRule() {
		return getIntMultiplyAccess().getRule();
	}

	//IntDivide returns ClassicalExpression::IntDivide:
	//	"(" leftValue=IntegerExpression "/" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "/" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "/" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntDivideElements getIntDivideAccess() {
		return gaFSMDsl.getIntDivideAccess();
	}
	
	public ParserRule getIntDivideRule() {
		return getIntDivideAccess().getRule();
	}

	//Not returns ClassicalExpression::Not:
	//	"!" operand=BooleanExpression | ("!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
	//	operand=BooleanExpression) ")";
	public FSMDslGrammarAccess.NotElements getNotAccess() {
		return gaFSMDsl.getNotAccess();
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//And returns ClassicalExpression::And:
	//	"(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "^"
	//	rightValue=BooleanExpression ")";
	public FSMDslGrammarAccess.AndElements getAndAccess() {
		return gaFSMDsl.getAndAccess();
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or returns ClassicalExpression::Or:
	//	"(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v"
	//	rightValue=BooleanExpression ")";
	public FSMDslGrammarAccess.OrElements getOrAccess() {
		return gaFSMDsl.getOrAccess();
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor returns ClassicalExpression::Xor:
	//	"(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v_"
	//	rightValue=BooleanExpression ")";
	public FSMDslGrammarAccess.XorElements getXorAccess() {
		return gaFSMDsl.getXorAccess();
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	/// *RealEqual returns ClassicalExpression::RealEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '==' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '==' rightValue=RealExpression')');
	//
	//RealInf returns ClassicalExpression::RealInf:
	//	('('('#ref' name=String0)? leftValue=RealExpression '<' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<' rightValue=RealExpression')');
	//
	//RealSup returns ClassicalExpression::RealSup:
	//	('('('#ref' name=String0)? leftValue=RealExpression '>' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>' rightValue=RealExpression')');* / IntInf
	//returns ClassicalExpression::IntInf:
	//	"(" leftValue=IntegerExpression "<" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression "<" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression "<" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntInfElements getIntInfAccess() {
		return gaFSMDsl.getIntInfAccess();
	}
	
	public ParserRule getIntInfRule() {
		return getIntInfAccess().getRule();
	}

	//IntSup returns ClassicalExpression::IntSup:
	//	"(" leftValue=IntegerExpression ">" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0)?
	//	leftValue=IntegerExpression ">" rightValue=IntegerExpression ")" | "(" ("#ref" name=String0 ":"
	//	type=[BasicType::Type|EString])? leftValue=IntegerExpression ">" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntSupElements getIntSupAccess() {
		return gaFSMDsl.getIntSupAccess();
	}
	
	public ParserRule getIntSupRule() {
		return getIntSupAccess().getRule();
	}

	//SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
	//	"SeqIsEmpty" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public FSMDslGrammarAccess.SeqIsEmptyElements getSeqIsEmptyAccess() {
		return gaFSMDsl.getSeqIsEmptyAccess();
	}
	
	public ParserRule getSeqIsEmptyRule() {
		return getSeqIsEmptyAccess().getRule();
	}

	//SeqGetTail returns ClassicalExpression::SeqGetTail:
	//	"Seq->Tail" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public FSMDslGrammarAccess.SeqGetTailElements getSeqGetTailAccess() {
		return gaFSMDsl.getSeqGetTailAccess();
	}
	
	public ParserRule getSeqGetTailRule() {
		return getSeqGetTailAccess().getRule();
	}

	//SeqGetHead returns ClassicalExpression::SeqGetHead:
	//	"Seq->Head" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public FSMDslGrammarAccess.SeqGetHeadElements getSeqGetHeadAccess() {
		return gaFSMDsl.getSeqGetHeadAccess();
	}
	
	public ParserRule getSeqGetHeadRule() {
		return getSeqGetHeadAccess().getRule();
	}

	//SeqDecr returns ClassicalExpression::SeqDecr:
	//	"Seq--" ("#ref" name=ID)? "(" operand=SeqExpression ")";
	public FSMDslGrammarAccess.SeqDecrElements getSeqDecrAccess() {
		return gaFSMDsl.getSeqDecrAccess();
	}
	
	public ParserRule getSeqDecrRule() {
		return getSeqDecrAccess().getRule();
	}

	//SeqSched returns ClassicalExpression::SeqSched:
	//	"Seq++" ("#ref" name=ID)? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")";
	public FSMDslGrammarAccess.SeqSchedElements getSeqSchedAccess() {
		return gaFSMDsl.getSeqSchedAccess();
	}
	
	public ParserRule getSeqSchedRule() {
		return getSeqSchedAccess().getRule();
	}

	/// *|RealInfEqual|RealSupEqual* / BooleanExpression returns ClassicalExpression::BooleanExpression:
	//	BooleanRef | Not | And | Or | Xor | / *RealEqual | RealInf | RealSup | * / IntEqual | IntInf | IntSup | SeqIsEmpty |
	//	BooleanVariableRef | IntInfEqual | IntSupEqual;
	public FSMDslGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaFSMDsl.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	/// *RealSupEqual returns extension::RealSupEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '>=' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>=' rightValue=RealExpression')');* / / *RealInfEqual returns extension::RealInfEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '<=' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<=' rightValue=RealExpression')');* / IntSupEqual
	//returns extension::IntSupEqual:
	//	"(" ("#ref" name=String0)? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")" | "(" ("#ref"
	//	name=String0 ":" type=[BasicType::Type|EString])? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntSupEqualElements getIntSupEqualAccess() {
		return gaFSMDsl.getIntSupEqualAccess();
	}
	
	public ParserRule getIntSupEqualRule() {
		return getIntSupEqualAccess().getRule();
	}

	//IntInfEqual returns extension::IntInfEqual:
	//	"(" ("#ref" name=String0)? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")" | "(" ("#ref"
	//	name=String0 ":" type=[BasicType::Type|EString])? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")";
	public FSMDslGrammarAccess.IntInfEqualElements getIntInfEqualAccess() {
		return gaFSMDsl.getIntInfEqualAccess();
	}
	
	public ParserRule getIntInfEqualRule() {
		return getIntInfEqualAccess().getRule();
	}

	/// *RealExpression returns ClassicalExpression::RealExpression:
	//	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
	//	
	//BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
	//	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;
	//
	//UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
	//	UnaryRealPlus|UnaryRealMinus;* / / * 
	//RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
	//	{extension::RealSelfPlusAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
	//;
	//
	//RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
	//	{extension::RealSelfMinusAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
	//;
	//
	//RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
	//	{extension::RealSelfMultiplyAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
	//;
	// * / ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
	//	BooleanExpression / *| RealExpression* / | IntegerExpression | SeqExpression;
	public FSMDslGrammarAccess.ClassicalExpression0Elements getClassicalExpression0Access() {
		return gaFSMDsl.getClassicalExpression0Access();
	}
	
	public ParserRule getClassicalExpression0Rule() {
		return getClassicalExpression0Access().getRule();
	}

	//Library returns ClockExpressionAndRelation::Library:
	//	"Library" name=ID "{" (("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
	//	relationLibraries+=RelationLibrary | predefinedTypes+=Type)*) "}";
	public CCSLLibraryGrammarAccess.LibraryElements getLibraryAccess() {
		return gaFSMDsl.getLibraryAccess();
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//ExpressionLibrary returns ClockExpressionAndRelation::ExpressionLibrary:
	//	"ExpressionLibrary" name=ID "{" (elements+=Element | expressionDeclarations+=(ExpressionDeclaration |
	//	kernelExpressionDecl) | expressionDefinitions+=ExpressionDefinition)+ "}";
	public CCSLLibraryGrammarAccess.ExpressionLibraryElements getExpressionLibraryAccess() {
		return gaFSMDsl.getExpressionLibraryAccess();
	}
	
	public ParserRule getExpressionLibraryRule() {
		return getExpressionLibraryAccess().getRule();
	}

	//RelationLibrary returns ClockExpressionAndRelation::RelationLibrary:
	//	"RelationLibrary" name=ID "{" (elements+=Element | relationDeclarations+=(RelationDeclaration | kernelRelationDecl) |
	//	relationDefinitions+=RelationDefinition)+ "}";
	public CCSLLibraryGrammarAccess.RelationLibraryElements getRelationLibraryAccess() {
		return gaFSMDsl.getRelationLibraryAccess();
	}
	
	public ParserRule getRelationLibraryRule() {
		return getRelationLibraryAccess().getRule();
	}

	//ExpressionDeclaration returns ClockExpressionAndRelation::ExpressionDeclaration:
	//	"ExpressionDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")" ":"
	//	returnType=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return gaFSMDsl.getExpressionDeclarationAccess();
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}

	//RelationDeclaration returns ClockExpressionAndRelation::RelationDeclaration:
	//	"RelationDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")";
	public CCSLLibraryGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaFSMDsl.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}

	//UserExpressionDefinition_Impl returns ClockExpressionAndRelation::UserExpressionDefinition:
	//	"ExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]" "{"
	//	("root" "=" rootExpression=[ClockExpressionAndRelation::Expression|EString] (concreteEntities+=ConcreteEntity |
	//	classicalExpressions+=ClassicalExpression0)+) "}";
	public CCSLLibraryGrammarAccess.UserExpressionDefinition_ImplElements getUserExpressionDefinition_ImplAccess() {
		return gaFSMDsl.getUserExpressionDefinition_ImplAccess();
	}
	
	public ParserRule getUserExpressionDefinition_ImplRule() {
		return getUserExpressionDefinition_ImplAccess().getRule();
	}

	//ConditionalExpressionDefinition returns ClockExpressionAndRelation::ConditionalExpressionDefinition:
	//	"ConditionalExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString]
	//	"]" "{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & "switch" "{"
	//	exprCases+=ExprCase exprCases+=ExprCase* "}" ("default" defaultExpression=Expression)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalExpressionDefinitionElements getConditionalExpressionDefinitionAccess() {
		return gaFSMDsl.getConditionalExpressionDefinitionAccess();
	}
	
	public ParserRule getConditionalExpressionDefinitionRule() {
		return getConditionalExpressionDefinitionAccess().getRule();
	}

	//ExternalExpressionDefinition returns ClockExpressionAndRelation::ExternalExpressionDefinition:
	//	("Extern" | "External") "ExpressionDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalExpressionDefinitionElements getExternalExpressionDefinitionAccess() {
		return gaFSMDsl.getExternalExpressionDefinitionAccess();
	}
	
	public ParserRule getExternalExpressionDefinitionRule() {
		return getExternalExpressionDefinitionAccess().getRule();
	}

	//ConditionalRelationDefinition returns ClockExpressionAndRelation::ConditionalRelationDefinition:
	//	"ConditionalRelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"
	//	"{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & ("switch" "{"
	//	relCases+=RelCase relCases+=RelCase* "}" "default" defaultRelation+=Relation*)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalRelationDefinitionElements getConditionalRelationDefinitionAccess() {
		return gaFSMDsl.getConditionalRelationDefinitionAccess();
	}
	
	public ParserRule getConditionalRelationDefinitionRule() {
		return getConditionalRelationDefinitionAccess().getRule();
	}

	//ExternalRelationDefinition returns ClockExpressionAndRelation::ExternalRelationDefinition:
	//	("Extern" | "External") "RelationDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalRelationDefinitionElements getExternalRelationDefinitionAccess() {
		return gaFSMDsl.getExternalRelationDefinitionAccess();
	}
	
	public ParserRule getExternalRelationDefinitionRule() {
		return getExternalRelationDefinitionAccess().getRule();
	}

	//Relation returns ClockExpressionAndRelation::Relation:
	//	isAnAssertion?="assert"? "Relation" (name=ID "[")? type=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"?
	//	"(" (bindings+=Binding ("," bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.RelationElements getRelationAccess() {
		return gaFSMDsl.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Expression returns ClockExpressionAndRelation::Expression:
	//	"Expression" name=ID "=" type=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "(" (bindings+=Binding (","
	//	bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaFSMDsl.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Binding returns ClockExpressionAndRelation::Binding:
	//	abstract=[ClockExpressionAndRelation::AbstractEntity|EString] "->"
	//	bindable=[ClockExpressionAndRelation::BindableEntity|EString];
	public CCSLLibraryGrammarAccess.BindingElements getBindingAccess() {
		return gaFSMDsl.getBindingAccess();
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Clock:
	//	"Clock" name=ID ":" type=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ClockElements getClockAccess() {
		return gaFSMDsl.getClockAccess();
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	//Type returns BasicType::Type:
	//	String1 | Boolean | Integer | Real | Char | Record | SequenceType | DiscreteClockType_Impl | DenseClockType |
	//	EnumerationType;
	public CCSLLibraryGrammarAccess.TypeElements getTypeAccess() {
		return gaFSMDsl.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ExpressionDefinition returns ClockExpressionAndRelation::ExpressionDefinition:
	//	UserExpressionDefinition_Impl | ConditionalExpressionDefinition | ExternalExpressionDefinition;
	public CCSLLibraryGrammarAccess.ExpressionDefinitionElements getExpressionDefinitionAccess() {
		return gaFSMDsl.getExpressionDefinitionAccess();
	}
	
	public ParserRule getExpressionDefinitionRule() {
		return getExpressionDefinitionAccess().getRule();
	}

	//Element returns BasicType::Element:
	//	Clock / *| CharElement * / | StringElement | BooleanElement | IntegerElement | RealElement | RecordElement |
	//	SequenceElement;
	public CCSLLibraryGrammarAccess.ElementElements getElementAccess() {
		return gaFSMDsl.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//ExprCase returns ClockExpressionAndRelation::ExprCase:
	//	"case" condition=BooleanExpression ":" expression=Expression;
	public CCSLLibraryGrammarAccess.ExprCaseElements getExprCaseAccess() {
		return gaFSMDsl.getExprCaseAccess();
	}
	
	public ParserRule getExprCaseRule() {
		return getExprCaseAccess().getRule();
	}

	//RelCase returns ClockExpressionAndRelation::RelCase:
	//	"case" condition=BooleanExpression ":" relation+=Relation*;
	public CCSLLibraryGrammarAccess.RelCaseElements getRelCaseAccess() {
		return gaFSMDsl.getRelCaseAccess();
	}
	
	public ParserRule getRelCaseRule() {
		return getRelCaseAccess().getRule();
	}

	//UserRelationDefinition_Impl returns ClockExpressionAndRelation::UserRelationDefinition:
	//	"RelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{"
	//	(concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)+ "}";
	public CCSLLibraryGrammarAccess.UserRelationDefinition_ImplElements getUserRelationDefinition_ImplAccess() {
		return gaFSMDsl.getUserRelationDefinition_ImplAccess();
	}
	
	public ParserRule getUserRelationDefinition_ImplRule() {
		return getUserRelationDefinition_ImplAccess().getRule();
	}

	//ConcreteEntity returns ClockExpressionAndRelation::ConcreteEntity:
	//	Expression | Relation | Clock | Element;
	public CCSLLibraryGrammarAccess.ConcreteEntityElements getConcreteEntityAccess() {
		return gaFSMDsl.getConcreteEntityAccess();
	}
	
	public ParserRule getConcreteEntityRule() {
		return getConcreteEntityAccess().getRule();
	}

	//BindableEntity returns ClockExpressionAndRelation::BindableEntity:
	//	Expression | Relation | AbstractEntity;
	public CCSLLibraryGrammarAccess.BindableEntityElements getBindableEntityAccess() {
		return gaFSMDsl.getBindableEntityAccess();
	}
	
	public ParserRule getBindableEntityRule() {
		return getBindableEntityAccess().getRule();
	}

	//RealExpression returns ClassicalExpression::RealExpression:
	//	RealRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply | RealVariableRef;
	public CCSLLibraryGrammarAccess.RealExpressionElements getRealExpressionAccess() {
		return gaFSMDsl.getRealExpressionAccess();
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}

	//SeqExpression returns ClassicalExpression::SeqExpression:
	//	SeqGetTail | SeqDecr | SeqSched | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.SeqExpressionElements getSeqExpressionAccess() {
		return gaFSMDsl.getSeqExpressionAccess();
	}
	
	public ParserRule getSeqExpressionRule() {
		return getSeqExpressionAccess().getRule();
	}

	////| CharElement;
	//PrimitiveElement returns BasicType::PrimitiveElement:
	//	StringElement | BooleanElement | IntegerElement | IntegerVariableRef | RealElement;
	public CCSLLibraryGrammarAccess.PrimitiveElementElements getPrimitiveElementAccess() {
		return gaFSMDsl.getPrimitiveElementAccess();
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//PrimitiveType returns BasicType::PrimitiveType:
	//	String1 | Boolean | Integer | Real | Char | EnumerationType;
	public CCSLLibraryGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaFSMDsl.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//kernelExpressionDecl returns KernelExpression::KernelExpressionDeclaration:
	//	Death | UpTo | Union | Intersection | Inf | Sup | Concatenation | StrictSampling | NonStrictSampling | Defer |
	//	Discretization | Wait;
	public CCSLLibraryGrammarAccess.KernelExpressionDeclElements getKernelExpressionDeclAccess() {
		return gaFSMDsl.getKernelExpressionDeclAccess();
	}
	
	public ParserRule getKernelExpressionDeclRule() {
		return getKernelExpressionDeclAccess().getRule();
	}

	//kernelRelationDecl returns KernelRelation::KernelRelationDeclaration:
	//	Precedence | NonStrictPrecedence | Coincidence | SubClock | Exclusion;
	public CCSLLibraryGrammarAccess.KernelRelationDeclElements getKernelRelationDeclAccess() {
		return gaFSMDsl.getKernelRelationDeclAccess();
	}
	
	public ParserRule getKernelRelationDeclRule() {
		return getKernelRelationDeclAccess().getRule();
	}

	//String0 returns ecore::EString:
	//	"String" STRING | ID;
	public CCSLLibraryGrammarAccess.String0Elements getString0Access() {
		return gaFSMDsl.getString0Access();
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//AbstractEntity returns ClockExpressionAndRelation::AbstractEntity:
	//	name=ID ":" type=[BasicType::Type|EString] desiredEventKind=EventKind?;
	public CCSLLibraryGrammarAccess.AbstractEntityElements getAbstractEntityAccess() {
		return gaFSMDsl.getAbstractEntityAccess();
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//enum EventKind:
	//	start | finish | finish="stop" | consume | produce | receive | send | undefined="any" | undefined="all" | undefined;
	public CCSLLibraryGrammarAccess.EventKindElements getEventKindAccess() {
		return gaFSMDsl.getEventKindAccess();
	}
	
	public EnumRule getEventKindRule() {
		return getEventKindAccess().getRule();
	}

	////ConcreteEntity_Impl returns ClockExpressionAndRelation::ConcreteEntity:
	////	{ClockExpressionAndRelation::ConcreteEntity}
	////	'ConcreteEntity' name=ID;
	//Boolean0 returns ecore::EBoolean:
	//	"True" | "False";
	public CCSLLibraryGrammarAccess.Boolean0Elements getBoolean0Access() {
		return gaFSMDsl.getBoolean0Access();
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}

	//RealRef returns ClassicalExpression::RealRef:
	//	"RealRef" "{" ("name" name=ID)? "realElem" realElem=[BasicType::RealElement|EString] "}";
	public CCSLLibraryGrammarAccess.RealRefElements getRealRefAccess() {
		return gaFSMDsl.getRealRefAccess();
	}
	
	public ParserRule getRealRefRule() {
		return getRealRefAccess().getRule();
	}

	//UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	"UnaryRealPlus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand" operand=RealExpression
	//	"}";
	public CCSLLibraryGrammarAccess.UnaryRealPlusElements getUnaryRealPlusAccess() {
		return gaFSMDsl.getUnaryRealPlusAccess();
	}
	
	public ParserRule getUnaryRealPlusRule() {
		return getUnaryRealPlusAccess().getRule();
	}

	//UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	"UnaryRealMinus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand" operand=RealExpression
	//	"}";
	public CCSLLibraryGrammarAccess.UnaryRealMinusElements getUnaryRealMinusAccess() {
		return gaFSMDsl.getUnaryRealMinusAccess();
	}
	
	public ParserRule getUnaryRealMinusRule() {
		return getUnaryRealMinusAccess().getRule();
	}

	//RealPlus returns ClassicalExpression::RealPlus:
	//	"RealPlus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealPlusElements getRealPlusAccess() {
		return gaFSMDsl.getRealPlusAccess();
	}
	
	public ParserRule getRealPlusRule() {
		return getRealPlusAccess().getRule();
	}

	//RealMinus returns ClassicalExpression::RealMinus:
	//	"RealMinus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMinusElements getRealMinusAccess() {
		return gaFSMDsl.getRealMinusAccess();
	}
	
	public ParserRule getRealMinusRule() {
		return getRealMinusAccess().getRule();
	}

	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	"RealMultiply" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMultiplyElements getRealMultiplyAccess() {
		return gaFSMDsl.getRealMultiplyAccess();
	}
	
	public ParserRule getRealMultiplyRule() {
		return getRealMultiplyAccess().getRule();
	}

	//RealEqual returns ClassicalExpression::RealEqual:
	//	"RealEqual" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealEqualElements getRealEqualAccess() {
		return gaFSMDsl.getRealEqualAccess();
	}
	
	public ParserRule getRealEqualRule() {
		return getRealEqualAccess().getRule();
	}

	//RealInf returns ClassicalExpression::RealInf:
	//	"RealInf" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealInfElements getRealInfAccess() {
		return gaFSMDsl.getRealInfAccess();
	}
	
	public ParserRule getRealInfRule() {
		return getRealInfAccess().getRule();
	}

	//RealSup returns ClassicalExpression::RealSup:
	//	"RealSup" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealSupElements getRealSupAccess() {
		return gaFSMDsl.getRealSupAccess();
	}
	
	public ParserRule getRealSupRule() {
		return getRealSupAccess().getRule();
	}

	//BooleanVariableRef returns ClassicalExpression::BooleanVariableRef:
	//	"BooleanVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.BooleanVariableRefElements getBooleanVariableRefAccess() {
		return gaFSMDsl.getBooleanVariableRefAccess();
	}
	
	public ParserRule getBooleanVariableRefRule() {
		return getBooleanVariableRefAccess().getRule();
	}

	//RealVariableRef returns ClassicalExpression::RealVariableRef:
	//	"RealVariableRef" ("name" name=ID)? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.RealVariableRefElements getRealVariableRefAccess() {
		return gaFSMDsl.getRealVariableRefAccess();
	}
	
	public ParserRule getRealVariableRefRule() {
		return getRealVariableRefAccess().getRule();
	}

	//NumberSeqRef returns ClassicalExpression::NumberSeqRef:
	//	"SeqRef" ("name" name=ID)? "[" referencedNumberSeq=[BasicType::SequenceElement|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqRefElements getNumberSeqRefAccess() {
		return gaFSMDsl.getNumberSeqRefAccess();
	}
	
	public ParserRule getNumberSeqRefRule() {
		return getNumberSeqRefAccess().getRule();
	}

	//NumberSeqVariableRef returns ClassicalExpression::NumberSeqVariableRef:
	//	"SeqVarRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqVariableRefElements getNumberSeqVariableRefAccess() {
		return gaFSMDsl.getNumberSeqVariableRefAccess();
	}
	
	public ParserRule getNumberSeqVariableRefRule() {
		return getNumberSeqVariableRefAccess().getRule();
	}

	//RealElement returns BasicType::RealElement:
	//	"Real" name=ID (":" type=[BasicType::Type|EString])? "=" value=Real0;
	public CCSLLibraryGrammarAccess.RealElementElements getRealElementAccess() {
		return gaFSMDsl.getRealElementAccess();
	}
	
	public ParserRule getRealElementRule() {
		return getRealElementAccess().getRule();
	}

	//terminal Real0 returns ecore::EFloat:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getReal0Rule() {
		return gaFSMDsl.getReal0Rule();
	} 

	////Real0 returns Real:
	////	'Real' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//IntegerElement returns BasicType::IntegerElement:
	//	"Integer" name=ID (":" type=[BasicType::Type|EString])? "=" value=INT | name=ID "=" value=INT | value=INT;
	public CCSLLibraryGrammarAccess.IntegerElementElements getIntegerElementAccess() {
		return gaFSMDsl.getIntegerElementAccess();
	}
	
	public ParserRule getIntegerElementRule() {
		return getIntegerElementAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaFSMDsl.getINTRule();
	} 

	//BooleanElement returns BasicType::BooleanElement:
	//	"BooleanElement" name=ID (":" type=[BasicType::Type] | EString)? "=" value=Boolean0;
	public CCSLLibraryGrammarAccess.BooleanElementElements getBooleanElementAccess() {
		return gaFSMDsl.getBooleanElementAccess();
	}
	
	public ParserRule getBooleanElementRule() {
		return getBooleanElementAccess().getRule();
	}

	//SequenceElement returns BasicType::SequenceElement:
	//	{BasicType::SequenceElement} "Sequence" name=ID? (":" type=[BasicType::Type|EString])? "="
	//	(finitePart+=PrimitiveElement (";" finitePart+=PrimitiveElement)* ";"?)? ("(" nonFinitePart+=PrimitiveElement (";"
	//	nonFinitePart+=PrimitiveElement)* ")")?;
	public CCSLLibraryGrammarAccess.SequenceElementElements getSequenceElementAccess() {
		return gaFSMDsl.getSequenceElementAccess();
	}
	
	public ParserRule getSequenceElementRule() {
		return getSequenceElementAccess().getRule();
	}

	//StringElement returns BasicType::StringElement:
	//	"String" name=ID "=" value=String0;
	public CCSLLibraryGrammarAccess.StringElementElements getStringElementAccess() {
		return gaFSMDsl.getStringElementAccess();
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	////		('type' type=[BasicType::Type|EString])?
	////CharElement returns BasicType::CharElement:
	////	'CharElement'
	////	'{'
	////		('name' name=ID)?
	////		'value' value=Char0
	////		('type' type=[BasicType::Type|EString])?
	////    '}';
	////Char0 returns Char:
	////	'Char' / * TODO: implement this rule and an appropriate IValueConverter * /;
	//RecordElement returns BasicType::RecordElement:
	//	"RecordElement" "{" ("name" name=ID)? ("type" type=[BasicType::Type|EString])? "box" "{" box+=Box ("," box+=Box)* "}"
	//	"}";
	public CCSLLibraryGrammarAccess.RecordElementElements getRecordElementAccess() {
		return gaFSMDsl.getRecordElementAccess();
	}
	
	public ParserRule getRecordElementRule() {
		return getRecordElementAccess().getRule();
	}

	//Box returns BasicType::Box:
	//	"Box" "{" "containment" containment=Element "}";
	public CCSLLibraryGrammarAccess.BoxElements getBoxAccess() {
		return gaFSMDsl.getBoxAccess();
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}

	//String1 returns BasicType::String:
	//	"StringType" name=ID;
	public CCSLLibraryGrammarAccess.String1Elements getString1Access() {
		return gaFSMDsl.getString1Access();
	}
	
	public ParserRule getString1Rule() {
		return getString1Access().getRule();
	}

	//Boolean returns BasicType::Boolean:
	//	"BooleanType" name=ID;
	public CCSLLibraryGrammarAccess.BooleanElements getBooleanAccess() {
		return gaFSMDsl.getBooleanAccess();
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Integer returns BasicType::Integer:
	//	"IntegerType" name=ID;
	public CCSLLibraryGrammarAccess.IntegerElements getIntegerAccess() {
		return gaFSMDsl.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Real returns BasicType::Real:
	//	"RealType" name=ID;
	public CCSLLibraryGrammarAccess.RealElements getRealAccess() {
		return gaFSMDsl.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Char returns BasicType::Char:
	//	"CharType" name=ID;
	public CCSLLibraryGrammarAccess.CharElements getCharAccess() {
		return gaFSMDsl.getCharAccess();
	}
	
	public ParserRule getCharRule() {
		return getCharAccess().getRule();
	}

	//Record returns BasicType::Record:
	//	"RecordType" name=ID "{" field+=Field ("," field+=Field)* "}";
	public CCSLLibraryGrammarAccess.RecordElements getRecordAccess() {
		return gaFSMDsl.getRecordAccess();
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//SequenceType returns BasicType::SequenceType:
	//	"SequenceType" name=ID ":" elementType=[BasicType::PrimitiveType];
	public CCSLLibraryGrammarAccess.SequenceTypeElements getSequenceTypeAccess() {
		return gaFSMDsl.getSequenceTypeAccess();
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//DiscreteClockType_Impl returns BasicType::DiscreteClockType:
	//	"DiscreteClockType" name=ID;
	public CCSLLibraryGrammarAccess.DiscreteClockType_ImplElements getDiscreteClockType_ImplAccess() {
		return gaFSMDsl.getDiscreteClockType_ImplAccess();
	}
	
	public ParserRule getDiscreteClockType_ImplRule() {
		return getDiscreteClockType_ImplAccess().getRule();
	}

	//DenseClockType returns BasicType::DenseClockType:
	//	"DenseClockType" name=ID "{" ("baseUnit" baseUnit=String0)? ("physicalMagnitude" physicalMagnitude=String0)? "}";
	public CCSLLibraryGrammarAccess.DenseClockTypeElements getDenseClockTypeAccess() {
		return gaFSMDsl.getDenseClockTypeAccess();
	}
	
	public ParserRule getDenseClockTypeRule() {
		return getDenseClockTypeAccess().getRule();
	}

	//EnumerationType returns BasicType::EnumerationType:
	//	"EnumerationType" "{" ("name" name=ID)? "enumLiteral" "{" enumLiteral+=String0 ("," enumLiteral+=String0)* "}" "}";
	public CCSLLibraryGrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaFSMDsl.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//Field returns BasicType::Field:
	//	"Field" "{" ("name" name=ID)? "type" type=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.FieldElements getFieldAccess() {
		return gaFSMDsl.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public CCSLLibraryGrammarAccess.EStringElements getEStringAccess() {
		return gaFSMDsl.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////This is only for the kernel.ccslLib !!!
	//SubClock returns KernelRelation::SubClock:
	//	"_SubClock" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.SubClockElements getSubClockAccess() {
		return gaFSMDsl.getSubClockAccess();
	}
	
	public ParserRule getSubClockRule() {
		return getSubClockAccess().getRule();
	}

	//Coincidence returns KernelRelation::Coincidence:
	//	"_Coincidence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.CoincidenceElements getCoincidenceAccess() {
		return gaFSMDsl.getCoincidenceAccess();
	}
	
	public ParserRule getCoincidenceRule() {
		return getCoincidenceAccess().getRule();
	}

	//Exclusion returns KernelRelation::Exclusion:
	//	"_Exclusion" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.ExclusionElements getExclusionAccess() {
		return gaFSMDsl.getExclusionAccess();
	}
	
	public ParserRule getExclusionRule() {
		return getExclusionAccess().getRule();
	}

	//Precedence returns KernelRelation::Precedence:
	//	"_Precedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.PrecedenceElements getPrecedenceAccess() {
		return gaFSMDsl.getPrecedenceAccess();
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}

	//NonStrictPrecedence returns KernelRelation::NonStrictPrecedence:
	//	"_NonStrictPrecedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity"
	//	leftEntity=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictPrecedenceElements getNonStrictPrecedenceAccess() {
		return gaFSMDsl.getNonStrictPrecedenceAccess();
	}
	
	public ParserRule getNonStrictPrecedenceRule() {
		return getNonStrictPrecedenceAccess().getRule();
	}

	//UpTo returns KernelExpression::UpTo:
	//	"_UpTo" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clockToFollow"
	//	clockToFollow=AbstractEntity "killerClock" killerClock=AbstractEntity "isPreemptive" isPreemptive=Boolean0 "}";
	public CCSLLibraryGrammarAccess.UpToElements getUpToAccess() {
		return gaFSMDsl.getUpToAccess();
	}
	
	public ParserRule getUpToRule() {
		return getUpToAccess().getRule();
	}

	//Defer returns KernelExpression::Defer:
	//	"_Defer" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "baseClock" baseClock=AbstractEntity
	//	"delayClock" delayClock=AbstractEntity "delayPattern" delayPattern=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DeferElements getDeferAccess() {
		return gaFSMDsl.getDeferAccess();
	}
	
	public ParserRule getDeferRule() {
		return getDeferAccess().getRule();
	}

	//StrictSampling returns KernelExpression::StrictSampling:
	//	"_StrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.StrictSamplingElements getStrictSamplingAccess() {
		return gaFSMDsl.getStrictSamplingAccess();
	}
	
	public ParserRule getStrictSamplingRule() {
		return getStrictSamplingAccess().getRule();
	}

	//Concatenation returns KernelExpression::Concatenation:
	//	"_Concatenation" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "leftClock"
	//	leftClock=AbstractEntity "rightClock" rightClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.ConcatenationElements getConcatenationAccess() {
		return gaFSMDsl.getConcatenationAccess();
	}
	
	public ParserRule getConcatenationRule() {
		return getConcatenationAccess().getRule();
	}

	//Union returns KernelExpression::Union:
	//	"_Union" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.UnionElements getUnionAccess() {
		return gaFSMDsl.getUnionAccess();
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//Intersection returns KernelExpression::Intersection:
	//	"_Intersection" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.IntersectionElements getIntersectionAccess() {
		return gaFSMDsl.getIntersectionAccess();
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}

	//Sup returns KernelExpression::Sup:
	//	"_Sup" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity "clock2"
	//	clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.SupElements getSupAccess() {
		return gaFSMDsl.getSupAccess();
	}
	
	public ParserRule getSupRule() {
		return getSupAccess().getRule();
	}

	//Inf returns KernelExpression::Inf:
	//	"_Inf" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity "clock2"
	//	clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.InfElements getInfAccess() {
		return gaFSMDsl.getInfAccess();
	}
	
	public ParserRule getInfRule() {
		return getInfAccess().getRule();
	}

	//NonStrictSampling returns KernelExpression::NonStrictSampling:
	//	"_NonStrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictSamplingElements getNonStrictSamplingAccess() {
		return gaFSMDsl.getNonStrictSamplingAccess();
	}
	
	public ParserRule getNonStrictSamplingRule() {
		return getNonStrictSamplingAccess().getRule();
	}

	//Wait returns KernelExpression::Wait:
	//	"_Wait" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "waitingClock"
	//	waitingClock=AbstractEntity "waitingValue" waitingValue=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.WaitElements getWaitAccess() {
		return gaFSMDsl.getWaitAccess();
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}

	//Discretization returns KernelExpression::Discretization:
	//	"_Discretization" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "denseClock"
	//	denseClock=AbstractEntity "discretizationFactor" discretizationFactor=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DiscretizationElements getDiscretizationAccess() {
		return gaFSMDsl.getDiscretizationAccess();
	}
	
	public ParserRule getDiscretizationRule() {
		return getDiscretizationAccess().getRule();
	}

	//Death returns KernelExpression::Death:
	//	"_Death" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.DeathElements getDeathAccess() {
		return gaFSMDsl.getDeathAccess();
	}
	
	public ParserRule getDeathRule() {
		return getDeathAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaFSMDsl.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaFSMDsl.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaFSMDsl.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaFSMDsl.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaFSMDsl.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaFSMDsl.getANY_OTHERRule();
	} 
}
