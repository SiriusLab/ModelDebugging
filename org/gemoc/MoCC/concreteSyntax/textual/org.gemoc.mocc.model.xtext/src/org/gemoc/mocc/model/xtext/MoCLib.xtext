// automatically generated by Xtext
grammar org.gemoc.mocc.model.xtext.MoCLib with fr.inria.aoste.timesquare.ccslkernel.library.xtext.CCSLLibrary


import "http://org.gemoc.mocc.model/0.1" as moccmetamodel
//import "http://org.gemoc.moc.model/0.1" as moccmetamodel
import "http://fr.inria.aoste.timemodel.ccslmodel" 
import "http://fr.inria.aoste.timemodel.primitivetypes" as PrimitivesTypeValue
import "http://fr.inria.aoste.timemodel.basicTypes" as BasicType
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation" as ClockExpressionAndRelation
import "http://fr.inria.aoste.timemodel.classicalexpression" as ClassicalExpression
import "http://fr.inria.aoste.timemodel" as TimeModel
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation.kernelexpression" as KernelExpression
  

StateBaseRelationLibrary returns moccmetamodel::StateBaseRelationLibrary:
	{moccmetamodel::StateBaseRelationLibrary}
	'Library' name=ID
	'{'
		(('imports' '{' ( imports+=ImportStatement)* '}' )? 
		(expressionLibraries+=ExpressionLibrary |
		 relationLibraries+=RelationLibrary  |
		 predefinedTypes+=Type  )*)
		
    '}';

RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition |StateMachineRelationDefinition;

StateMachineRelationDefinition returns moccmetamodel::StateMachineRelationDefinition:
	{moccmetamodel::StateMachineRelationDefinition}
	'StateBasedRelationDefinition'name=ID '['declaration=[ClockExpressionAndRelation::RelationDeclaration|EString]']'
	'{'
		('init' initialState= [moccmetamodel::State|EString])';'
		((ownedStates+=State)|
		(ownedTransitions+=Transition))+
		
    '}';
 
State returns moccmetamodel::State:
	{moccmetamodel::State}
	'State' name=EString ';'
;

Transition returns moccmetamodel::Transition: 
	'from' source=[moccmetamodel::State|EString] 'to' target=[moccmetamodel::State|EString]':'name=EString'('
		('if' guard=[ClassicalExpression::BooleanExpression|EString])?
		'when' (trigger+=[TimeModel::Clock|EString])('and' trigger+=[TimeModel::Clock|EString])*
		('do ' (actions+=[moccmetamodel::IntegerAssignment|EString])(','actions+=[moccmetamodel::IntegerAssignment|EString])*)*
	')';

IntegerExpression returns ClassicalExpression::IntegerExpression:
IntegerRef | UnaryIntPlus | UnaryIntMinus | IntPlus | IntMinus | IntMultiply | IntDivide | SeqGetHead | IntegerVariableRef | IntegerAssignemnt;


IntegerAssignemnt returns moccmetamodel::IntegerAssignment:
	leftValue=IntegerRef':=' rightValue=IntegerExpression
;

