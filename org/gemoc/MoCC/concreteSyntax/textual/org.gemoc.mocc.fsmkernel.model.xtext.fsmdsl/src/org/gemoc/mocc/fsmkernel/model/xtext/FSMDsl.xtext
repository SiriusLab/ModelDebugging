// automatically generated by Xtext
//And hand modified!
grammar org.gemoc.mocc.fsmkernel.model.xtext.FSMDsl with fr.inria.aoste.timesquare.ccslkernel.library.xtext.CCSLLibrary

import "http://org.gemoc.mocc.fsmmodel/1.0" as fsmmodel   
import "http://org.gemoc.mocc.fsmmodel/editionextension/1.0" as extension
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://fr.inria.aoste.timemodel" as timemodel 
import "http://fr.inria.aoste.timemodel.primitivetypes" as PrimitivesTypeValue
import "http://fr.inria.aoste.timemodel.classicalexpression" as ClassicalExpression
import "http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation" as ClockExpressionAndRelation
import "http://fr.inria.aoste.timemodel.basicTypes" as BasicType
 
StateMachineDefinition returns fsmmodel::StateMachineDefinition: 
	{fsmmodel::StateMachineDefinition}
	'StateMachineDefinition' name=EString
	'{'
		(declarationBlock=DeclarationBlock)? 
		('init: ' initialStates+= [fsmmodel::State|EString]) ( "," initialStates+=[fsmmodel::State|EString])*
		('finals: ' finalStates+=[fsmmodel::State|EString] ( "," finalStates+=[fsmmodel::State|EString])* )?
		((states+=State)|
		(transitions+=Transition))+
		
    '}'; 
 
DeclarationBlock returns fsmmodel::DeclarationBlock: 
   {fsmmodel::DeclarationBlock}
    'Declarations {'(concreteEntities+=ConcreteEntity)*
		(classicalExpressions+=BooleanExpression)* '}'
; 

Transition returns fsmmodel::Transition:
	{fsmmodel::Transition}
	'from' source=[fsmmodel::State|EString] 'to' target=[fsmmodel::State|EString]':'name=EString '('
		('when' trigger=Trigger)?
		('if' guard=Guard)?
		('do' (actions+=Action))*
	')';

Action returns fsmmodel::AbstractAction:
	IntegerAssignement	| IntegerAssignementBlock
;

IntegerAssignementBlock returns extension::IntegerAssignementBlock:
	{extension::IntegerAssignementBlock}
	'#ref'name=EString
	'{'
		actions+=IntegerAssignement ( "," actions+=IntegerAssignement)*
	'}'
;

State returns fsmmodel::State:
	{fsmmodel::State}
	'State' name=EString '('
		('in' ':' inputTransitions+=[fsmmodel::Transition|EString] ( "," inputTransitions+=[fsmmodel::Transition|EString])* )?
		('out' ':' outputTransitions+=[fsmmodel::Transition|EString] ( "," outputTransitions+=[fsmmodel::Transition|EString])* )?
	')';


Guard returns fsmmodel::Guard:
	{fsmmodel::Guard}
	('['(value=[ClassicalExpression::BooleanExpression|EString])']')?
	;

Trigger returns fsmmodel::Trigger:
	{fsmmodel::Trigger}
	'Trigger'
	'{'
		('trueTriggers' '(' trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] ( "," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ')' )?
		('falseTriggers' '(' falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] ( "," falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ')' )?
	'}';
	
BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement|IntSelfPlusAssign|IntSelfMinusAssign|IntSelfMultAssign|IntSelfDivAssign;

IntSelfPlusAssign returns extension::IntSelfPlusAssignement:
	{extension::IntSelfPlusAssignement}
	('#ref'name=EString)? leftValue=IntegerRef '+=' rightValue=IntegerExpression
;

IntSelfMinusAssign returns extension::IntSelfMinusAssignement:
	{extension::IntSelfMinusAssignement}
	('#ref'name=EString)? leftValue=IntegerRef '-=' rightValue=IntegerExpression
;

IntSelfMultAssign returns extension::IntSelfMultiplyAssignement:
	{extension::IntSelfMultiplyAssignement}
	('#ref'name=EString)? leftValue=IntegerRef '*=' rightValue=IntegerExpression
;

IntSelfDivAssign returns extension::IntSelfDivideAssignement:
	{extension::IntSelfDivideAssignement}
	('#ref'name=EString)? leftValue=IntegerRef '/=' rightValue=IntegerExpression
;
	
IntegerAssignement returns fsmmodel::IntegerAssignement:
	{fsmmodel::IntegerAssignement}
	('#ref'name=EString)? leftValue=IntegerRef '=' rightValue=IntegerExpression //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
;

IntegerExpression returns ClassicalExpression::IntegerExpression:
	BinaryIntegerExpression | UnaryIntegerExpression |IntegerRef | SeqGetHead |IntegerVariableRef;

	
UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression: 
 UnaryIntPlus | UnaryIntMinus;

IntEqual returns ClassicalExpression::IntEqual:
	('('('#ref' name=String0)? leftValue=IntegerExpression '==' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '==' rightValue=IntegerExpression')');
    
BooleanRef returns ClassicalExpression::BooleanRef:
	'b['referencedBool=[BasicType::BooleanElement|EString]']'|'b#ref'name=ID'['referencedBool=[BasicType::BooleanElement|EString]']';

RealRef returns ClassicalExpression::RealRef:
	'r['realElem=[BasicType::RealElement|EString]']'|'r#ref'name=ID'['realElem=[BasicType::RealElement|EString]']';

IntegerRef returns ClassicalExpression::IntegerRef:
	'i['integerElem=[BasicType::IntegerElement|EString]']'|'i#ref'name=ID'['integerElem=[BasicType::IntegerElement|EString]']';

UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	('+' 
	'{'
		'value' value=[BasicType::RealElement|EString]
		'operand' operand=RealExpression
	'}')|
	('(+' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'{'
		'value' value=[BasicType::RealElement|EString]
		'operand' operand=RealExpression
	'})');

UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	('-' 
	'{'
		'value' value=[BasicType::RealElement|EString]
		'operand' operand=RealExpression
	'}')|
	('(-' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'{'
		'value' value=[BasicType::RealElement|EString]
		'operand' operand=RealExpression
	'})');

RealPlus returns ClassicalExpression::RealPlus:
	('('('#ref' name=String0)? leftValue=RealExpression '+' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '+' rightValue=RealExpression')');

RealMinus returns ClassicalExpression::RealMinus:
	('('('#ref' name=String0)? leftValue=RealExpression '-' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '-' rightValue=RealExpression')');

RealMultiply returns ClassicalExpression::RealMultiply:
	('('('#ref' name=String0)? leftValue=RealExpression '*' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '*' rightValue=RealExpression')');

UnaryIntPlus returns ClassicalExpression::UnaryIntPlus:
	('+' 
	'{'
		'value' value=[BasicType::IntegerElement|EString]
		'operand' operand=IntegerExpression
	'}')|
	('(+' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'{'
		'value' value=[BasicType::IntegerElement|EString]
		'operand' operand=IntegerExpression
	'})');
	

UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
	('-' 
	'{'
		'value' value=[BasicType::IntegerElement|EString]
		'operand' operand=IntegerExpression
	'}')|
	('(-' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'{'
		'value' value=[BasicType::IntegerElement|EString]
		'operand' operand=IntegerExpression
	'})');

IntPlus returns ClassicalExpression::IntPlus:
		('('('#ref' name=String0)? leftValue=IntegerExpression '+' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '+' rightValue=IntegerExpression')');

IntMinus returns ClassicalExpression::IntMinus:
		('('('#ref' name=String0)? leftValue=IntegerExpression '-' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '-' rightValue=IntegerExpression')');

IntMultiply returns ClassicalExpression::IntMultiply:
		('('('#ref' name=String0)? leftValue=IntegerExpression '*' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '*' rightValue=IntegerExpression')');

IntDivide returns ClassicalExpression::IntDivide:
		('('('#ref' name=String0)? leftValue=IntegerExpression '/' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '/' rightValue=IntegerExpression')');

Not returns ClassicalExpression::Not:
	('!' operand=BooleanExpression)|
	('!('('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
		operand=BooleanExpression)')';

And returns ClassicalExpression::And:
	'(' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	leftValue=BooleanExpression	'^' rightValue=BooleanExpression')';

Or returns ClassicalExpression::Or:
	'(' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	leftValue=BooleanExpression	'v' rightValue=BooleanExpression')';

Xor returns ClassicalExpression::Xor:
	'(' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	leftValue=BooleanExpression	'v_' rightValue=BooleanExpression')';

RealEqual returns ClassicalExpression::RealEqual:
	('('('#ref' name=String0)? leftValue=RealExpression '==' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '==' rightValue=RealExpression')');

RealInf returns ClassicalExpression::RealInf:
	('('('#ref' name=String0)? leftValue=RealExpression '<' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<' rightValue=RealExpression')');

RealSup returns ClassicalExpression::RealSup:
	('('('#ref' name=String0)? leftValue=RealExpression '>' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>' rightValue=RealExpression')');


IntInf returns ClassicalExpression::IntInf:
	('('('#ref' name=String0)? leftValue=IntegerExpression '<' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '<' rightValue=IntegerExpression')');

IntSup returns ClassicalExpression::IntSup:
	('('('#ref' name=String0)? leftValue=IntegerExpression '>' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '>' rightValue=IntegerExpression')');

SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
	'SeqIsEmpty' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'('
		operand=SeqExpression
	')';

SeqGetTail returns ClassicalExpression::SeqGetTail:
	'Seq->Tail' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'('
		operand=SeqExpression
	')';

SeqGetHead returns ClassicalExpression::SeqGetHead:
	'Seq->Head' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	'('
		operand=SeqExpression
	')';

SeqDecr returns ClassicalExpression::SeqDecr:
	'Seq--' ('#ref'name=ID)? '(' operand=SeqExpression')';

SeqSched returns ClassicalExpression::SeqSched:
	'Seq++' ('#ref'name=ID)? '(' operand=SeqExpression ','integerExpr=IntegerExpression ')';


BooleanExpression returns ClassicalExpression::BooleanExpression:
	BooleanRef | Not | And | Or | Xor | RealEqual | RealInf | RealSup | IntEqual | IntInf | IntSup | SeqIsEmpty | BooleanVariableRef|IntInfEqual|IntSupEqual|RealInfEqual|RealSupEqual;

RealSupEqual returns extension::RealSupEqual:
	('('('#ref' name=String0)? leftValue=RealExpression '>=' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>=' rightValue=RealExpression')');


RealInfEqual returns extension::RealInfEqual:
	('('('#ref' name=String0)? leftValue=RealExpression '<=' rightValue=RealExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<=' rightValue=RealExpression')');


IntSupEqual returns extension::IntSupEqual:
	('('('#ref' name=String0)? leftValue=IntegerExpression '>=' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '>=' rightValue=IntegerExpression')');


IntInfEqual returns extension::IntInfEqual:
	('('('#ref' name=String0)? leftValue=IntegerExpression '<=' rightValue=IntegerExpression')')|
	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=IntegerExpression '<=' rightValue=IntegerExpression')');




ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
	BooleanExpression | RealExpression | IntegerExpression | SeqExpression;
	
RealExpression returns ClassicalExpression::RealExpression:
	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
	
BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;

UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
	UnaryRealPlus|UnaryRealMinus;
	

RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
	{extension::RealSelfPlusAssignement}
	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
;

RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
	{extension::RealSelfMinusAssignement}
	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
;

RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
	{extension::RealSelfMultiplyAssignement}
	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
;

