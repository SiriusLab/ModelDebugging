/*
* generated by Xtext
*/
package org.gemoc.mocc.fsmkernel.model.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import fr.inria.aoste.timesquare.ccslkernel.library.xtext.services.CCSLLibraryGrammarAccess;

@Singleton
public class FSMDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAutomataDefinitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationBlockDeclarationBlockParserRuleCall_4_0 = (RuleCall)cDeclarationBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInitKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitialStatesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cInitialStatesStateCrossReference_5_1_0 = (CrossReference)cInitialStatesAssignment_5_1.eContents().get(0);
		private final RuleCall cInitialStatesStateEStringParserRuleCall_5_1_0_1 = (RuleCall)cInitialStatesStateCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialStatesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cInitialStatesStateCrossReference_6_1_0 = (CrossReference)cInitialStatesAssignment_6_1.eContents().get(0);
		private final RuleCall cInitialStatesStateEStringParserRuleCall_6_1_0_1 = (RuleCall)cInitialStatesStateCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFinalsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFinalStatesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cFinalStatesStateCrossReference_7_1_0 = (CrossReference)cFinalStatesAssignment_7_1.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_7_1_0_1 = (RuleCall)cFinalStatesStateCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cFinalStatesAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cFinalStatesStateCrossReference_7_2_1_0 = (CrossReference)cFinalStatesAssignment_7_2_1.eContents().get(0);
		private final RuleCall cFinalStatesStateEStringParserRuleCall_7_2_1_0_1 = (RuleCall)cFinalStatesStateCrossReference_7_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cStatesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cStatesStateParserRuleCall_8_0_0 = (RuleCall)cStatesAssignment_8_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_8_1_0 = (RuleCall)cTransitionsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//StateMachineDefinition returns fsmmodel::StateMachineDefinition:
		//	{fsmmodel::StateMachineDefinition} "AutomataDefinition" name=EString "{" declarationBlock=DeclarationBlock? ("init: "
		//	initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
		//	finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
		//	transitions+=Transition)+ "}";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::StateMachineDefinition} "AutomataDefinition" name=EString "{" declarationBlock=DeclarationBlock? ("init: "
		//initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
		//finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
		//transitions+=Transition)+ "}"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::StateMachineDefinition}
		public Action getStateMachineDefinitionAction_0() { return cStateMachineDefinitionAction_0; }

		//"AutomataDefinition"
		public Keyword getAutomataDefinitionKeyword_1() { return cAutomataDefinitionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarationBlock=DeclarationBlock?
		public Assignment getDeclarationBlockAssignment_4() { return cDeclarationBlockAssignment_4; }

		//DeclarationBlock
		public RuleCall getDeclarationBlockDeclarationBlockParserRuleCall_4_0() { return cDeclarationBlockDeclarationBlockParserRuleCall_4_0; }

		//"init: " initialStates+=[fsmmodel::State|EString]
		public Group getGroup_5() { return cGroup_5; }

		//"init: "
		public Keyword getInitKeyword_5_0() { return cInitKeyword_5_0; }

		//initialStates+=[fsmmodel::State|EString]
		public Assignment getInitialStatesAssignment_5_1() { return cInitialStatesAssignment_5_1; }

		//[fsmmodel::State|EString]
		public CrossReference getInitialStatesStateCrossReference_5_1_0() { return cInitialStatesStateCrossReference_5_1_0; }

		//EString
		public RuleCall getInitialStatesStateEStringParserRuleCall_5_1_0_1() { return cInitialStatesStateEStringParserRuleCall_5_1_0_1; }

		//("," initialStates+=[fsmmodel::State|EString])*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//initialStates+=[fsmmodel::State|EString]
		public Assignment getInitialStatesAssignment_6_1() { return cInitialStatesAssignment_6_1; }

		//[fsmmodel::State|EString]
		public CrossReference getInitialStatesStateCrossReference_6_1_0() { return cInitialStatesStateCrossReference_6_1_0; }

		//EString
		public RuleCall getInitialStatesStateEStringParserRuleCall_6_1_0_1() { return cInitialStatesStateEStringParserRuleCall_6_1_0_1; }

		//("finals: " finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)?
		public Group getGroup_7() { return cGroup_7; }

		//"finals: "
		public Keyword getFinalsKeyword_7_0() { return cFinalsKeyword_7_0; }

		//finalStates+=[fsmmodel::State|EString]
		public Assignment getFinalStatesAssignment_7_1() { return cFinalStatesAssignment_7_1; }

		//[fsmmodel::State|EString]
		public CrossReference getFinalStatesStateCrossReference_7_1_0() { return cFinalStatesStateCrossReference_7_1_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_7_1_0_1() { return cFinalStatesStateEStringParserRuleCall_7_1_0_1; }

		//("," finalStates+=[fsmmodel::State|EString])*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//finalStates+=[fsmmodel::State|EString]
		public Assignment getFinalStatesAssignment_7_2_1() { return cFinalStatesAssignment_7_2_1; }

		//[fsmmodel::State|EString]
		public CrossReference getFinalStatesStateCrossReference_7_2_1_0() { return cFinalStatesStateCrossReference_7_2_1_0; }

		//EString
		public RuleCall getFinalStatesStateEStringParserRuleCall_7_2_1_0_1() { return cFinalStatesStateEStringParserRuleCall_7_2_1_0_1; }

		//(states+=State | transitions+=Transition)+
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//states+=State
		public Assignment getStatesAssignment_8_0() { return cStatesAssignment_8_0; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0_0() { return cStatesStateParserRuleCall_8_0_0; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_8_1() { return cTransitionsAssignment_8_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_8_1_0() { return cTransitionsTransitionParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConcreteEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcreteEntitiesConcreteEntityParserRuleCall_2_0 = (RuleCall)cConcreteEntitiesAssignment_2.eContents().get(0);
		private final Assignment cClassicalExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassicalExpressionsBooleanExpressionParserRuleCall_3_0 = (RuleCall)cClassicalExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////'AutomataDefinition'name=EString
		////'{'
		////	(declarationBlock=DeclarationBlock)?
		////	('init: ' initialStates+= [fsmmodel::State|EString]) ( "," initialStates+=[fsmmodel::State|EString])*
		////	('finals: ' finalStates+=[fsmmodel::State|EString] ( "," finalStates+=[fsmmodel::State|EString])* )?
		////	( ('states: ' states+=State ( "," states+=State)*) | (transitions+=Transition)+)
		////'}';
		//DeclarationBlock returns fsmmodel::DeclarationBlock:
		//	{fsmmodel::DeclarationBlock} "variables {" concreteEntities+=ConcreteEntity* classicalExpressions+=BooleanExpression*
		//	"}";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::DeclarationBlock} "variables {" concreteEntities+=ConcreteEntity* classicalExpressions+=BooleanExpression*
		//"}"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::DeclarationBlock}
		public Action getDeclarationBlockAction_0() { return cDeclarationBlockAction_0; }

		//"variables {"
		public Keyword getVariablesKeyword_1() { return cVariablesKeyword_1; }

		//concreteEntities+=ConcreteEntity*
		public Assignment getConcreteEntitiesAssignment_2() { return cConcreteEntitiesAssignment_2; }

		//ConcreteEntity
		public RuleCall getConcreteEntitiesConcreteEntityParserRuleCall_2_0() { return cConcreteEntitiesConcreteEntityParserRuleCall_2_0; }

		//classicalExpressions+=BooleanExpression*
		public Assignment getClassicalExpressionsAssignment_3() { return cClassicalExpressionsAssignment_3; }

		//BooleanExpression
		public RuleCall getClassicalExpressionsBooleanExpressionParserRuleCall_3_0() { return cClassicalExpressionsBooleanExpressionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceStateCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceStateEStringParserRuleCall_2_0_1 = (RuleCall)cSourceStateCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetStateCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetStateEStringParserRuleCall_4_0_1 = (RuleCall)cTargetStateCrossReference_4_0.eContents().get(1);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameEStringParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWhenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTriggerAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTriggerTriggerParserRuleCall_8_1_0 = (RuleCall)cTriggerAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cIfKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cGuardAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cGuardGuardParserRuleCall_9_1_0 = (RuleCall)cGuardAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cDoKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cActionsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_10_1_0 = (RuleCall)cActionsAssignment_10_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Transition returns fsmmodel::Transition:
		//	{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
		//	"(" ("when" trigger=Trigger)? ("if" guard=Guard)? ("do" actions+=Action)* ")";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
		//"(" ("when" trigger=Trigger)? ("if" guard=Guard)? ("do" actions+=Action)* ")"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//source=[fsmmodel::State|EString]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }

		//[fsmmodel::State|EString]
		public CrossReference getSourceStateCrossReference_2_0() { return cSourceStateCrossReference_2_0; }

		//EString
		public RuleCall getSourceStateEStringParserRuleCall_2_0_1() { return cSourceStateEStringParserRuleCall_2_0_1; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//target=[fsmmodel::State|EString]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[fsmmodel::State|EString]
		public CrossReference getTargetStateCrossReference_4_0() { return cTargetStateCrossReference_4_0; }

		//EString
		public RuleCall getTargetStateEStringParserRuleCall_4_0_1() { return cTargetStateEStringParserRuleCall_4_0_1; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//name=EString
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//EString
		public RuleCall getNameEStringParserRuleCall_6_0() { return cNameEStringParserRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//("when" trigger=Trigger)?
		public Group getGroup_8() { return cGroup_8; }

		//"when"
		public Keyword getWhenKeyword_8_0() { return cWhenKeyword_8_0; }

		//trigger=Trigger
		public Assignment getTriggerAssignment_8_1() { return cTriggerAssignment_8_1; }

		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_8_1_0() { return cTriggerTriggerParserRuleCall_8_1_0; }

		//("if" guard=Guard)?
		public Group getGroup_9() { return cGroup_9; }

		//"if"
		public Keyword getIfKeyword_9_0() { return cIfKeyword_9_0; }

		//guard=Guard
		public Assignment getGuardAssignment_9_1() { return cGuardAssignment_9_1; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_9_1_0() { return cGuardGuardParserRuleCall_9_1_0; }

		//("do" actions+=Action)*
		public Group getGroup_10() { return cGroup_10; }

		//"do"
		public Keyword getDoKeyword_10_0() { return cDoKeyword_10_0; }

		//actions+=Action
		public Assignment getActionsAssignment_10_1() { return cActionsAssignment_10_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_10_1_0() { return cActionsActionParserRuleCall_10_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerAssignementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerAssignementBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Action returns fsmmodel::AbstractAction:
		//	IntegerAssignement | IntegerAssignementBlock;
		public ParserRule getRule() { return rule; }

		//IntegerAssignement | IntegerAssignementBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall_0() { return cIntegerAssignementParserRuleCall_0; }

		//IntegerAssignementBlock
		public RuleCall getIntegerAssignementBlockParserRuleCall_1() { return cIntegerAssignementBlockParserRuleCall_1; }
	}

	public class IntegerAssignementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAssignementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAssignementBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionsIntegerAssignementParserRuleCall_4_0 = (RuleCall)cActionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsIntegerAssignementParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IntegerAssignementBlock returns extension::IntegerAssignementBlock:
		//	{extension::IntegerAssignementBlock} "#ref" name=EString "{" actions+=IntegerAssignement (","
		//	actions+=IntegerAssignement)* "}";
		public ParserRule getRule() { return rule; }

		//{extension::IntegerAssignementBlock} "#ref" name=EString "{" actions+=IntegerAssignement (","
		//actions+=IntegerAssignement)* "}"
		public Group getGroup() { return cGroup; }

		//{extension::IntegerAssignementBlock}
		public Action getIntegerAssignementBlockAction_0() { return cIntegerAssignementBlockAction_0; }

		//"#ref"
		public Keyword getRefKeyword_1() { return cRefKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//actions+=IntegerAssignement
		public Assignment getActionsAssignment_4() { return cActionsAssignment_4; }

		//IntegerAssignement
		public RuleCall getActionsIntegerAssignementParserRuleCall_4_0() { return cActionsIntegerAssignementParserRuleCall_4_0; }

		//("," actions+=IntegerAssignement)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//actions+=IntegerAssignement
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }

		//IntegerAssignement
		public RuleCall getActionsIntegerAssignementParserRuleCall_5_1_0() { return cActionsIntegerAssignementParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInputTransitionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cInputTransitionsTransitionCrossReference_4_2_0 = (CrossReference)cInputTransitionsAssignment_4_2.eContents().get(0);
		private final RuleCall cInputTransitionsTransitionEStringParserRuleCall_4_2_0_1 = (RuleCall)cInputTransitionsTransitionCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInputTransitionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cInputTransitionsTransitionCrossReference_4_3_1_0 = (CrossReference)cInputTransitionsAssignment_4_3_1.eContents().get(0);
		private final RuleCall cInputTransitionsTransitionEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cInputTransitionsTransitionCrossReference_4_3_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutputTransitionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cOutputTransitionsTransitionCrossReference_5_2_0 = (CrossReference)cOutputTransitionsAssignment_5_2.eContents().get(0);
		private final RuleCall cOutputTransitionsTransitionEStringParserRuleCall_5_2_0_1 = (RuleCall)cOutputTransitionsTransitionCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutputTransitionsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cOutputTransitionsTransitionCrossReference_5_3_1_0 = (CrossReference)cOutputTransitionsAssignment_5_3_1.eContents().get(0);
		private final RuleCall cOutputTransitionsTransitionEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cOutputTransitionsTransitionCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//State returns fsmmodel::State:
		//	{fsmmodel::State} "State" name=EString "(" ("in" ":" inputTransitions+=[fsmmodel::Transition|EString] (","
		//	inputTransitions+=[fsmmodel::Transition|EString])*)? ("out" ":" outputTransitions+=[fsmmodel::Transition|EString]
		//	("," outputTransitions+=[fsmmodel::Transition|EString])*)? ")";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::State} "State" name=EString "(" ("in" ":" inputTransitions+=[fsmmodel::Transition|EString] (","
		//inputTransitions+=[fsmmodel::Transition|EString])*)? ("out" ":" outputTransitions+=[fsmmodel::Transition|EString] (","
		//outputTransitions+=[fsmmodel::Transition|EString])*)? ")"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::State}
		public Action getStateAction_0() { return cStateAction_0; }

		//"State"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//("in" ":" inputTransitions+=[fsmmodel::Transition|EString] ("," inputTransitions+=[fsmmodel::Transition|EString])*)?
		public Group getGroup_4() { return cGroup_4; }

		//"in"
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }

		//":"
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }

		//inputTransitions+=[fsmmodel::Transition|EString]
		public Assignment getInputTransitionsAssignment_4_2() { return cInputTransitionsAssignment_4_2; }

		//[fsmmodel::Transition|EString]
		public CrossReference getInputTransitionsTransitionCrossReference_4_2_0() { return cInputTransitionsTransitionCrossReference_4_2_0; }

		//EString
		public RuleCall getInputTransitionsTransitionEStringParserRuleCall_4_2_0_1() { return cInputTransitionsTransitionEStringParserRuleCall_4_2_0_1; }

		//("," inputTransitions+=[fsmmodel::Transition|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//inputTransitions+=[fsmmodel::Transition|EString]
		public Assignment getInputTransitionsAssignment_4_3_1() { return cInputTransitionsAssignment_4_3_1; }

		//[fsmmodel::Transition|EString]
		public CrossReference getInputTransitionsTransitionCrossReference_4_3_1_0() { return cInputTransitionsTransitionCrossReference_4_3_1_0; }

		//EString
		public RuleCall getInputTransitionsTransitionEStringParserRuleCall_4_3_1_0_1() { return cInputTransitionsTransitionEStringParserRuleCall_4_3_1_0_1; }

		//("out" ":" outputTransitions+=[fsmmodel::Transition|EString] ("," outputTransitions+=[fsmmodel::Transition|EString])*)?
		public Group getGroup_5() { return cGroup_5; }

		//"out"
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//outputTransitions+=[fsmmodel::Transition|EString]
		public Assignment getOutputTransitionsAssignment_5_2() { return cOutputTransitionsAssignment_5_2; }

		//[fsmmodel::Transition|EString]
		public CrossReference getOutputTransitionsTransitionCrossReference_5_2_0() { return cOutputTransitionsTransitionCrossReference_5_2_0; }

		//EString
		public RuleCall getOutputTransitionsTransitionEStringParserRuleCall_5_2_0_1() { return cOutputTransitionsTransitionEStringParserRuleCall_5_2_0_1; }

		//("," outputTransitions+=[fsmmodel::Transition|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//outputTransitions+=[fsmmodel::Transition|EString]
		public Assignment getOutputTransitionsAssignment_5_3_1() { return cOutputTransitionsAssignment_5_3_1; }

		//[fsmmodel::Transition|EString]
		public CrossReference getOutputTransitionsTransitionCrossReference_5_3_1_0() { return cOutputTransitionsTransitionCrossReference_5_3_1_0; }

		//EString
		public RuleCall getOutputTransitionsTransitionEStringParserRuleCall_5_3_1_0_1() { return cOutputTransitionsTransitionEStringParserRuleCall_5_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBooleanExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Guard returns fsmmodel::Guard:
		//	{fsmmodel::Guard} value=BooleanExpression;
		public ParserRule getRule() { return rule; }

		//{fsmmodel::Guard} value=BooleanExpression
		public Group getGroup() { return cGroup; }

		//{fsmmodel::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//value=BooleanExpression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BooleanExpression
		public RuleCall getValueBooleanExpressionParserRuleCall_1_0() { return cValueBooleanExpressionParserRuleCall_1_0; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTrueTriggersKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTrueTriggersAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_3_2_0 = (CrossReference)cTrueTriggersAssignment_3_2.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cTrueTriggersAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cTrueTriggersBindableEntityCrossReference_3_3_1_0 = (CrossReference)cTrueTriggersAssignment_3_3_1.eContents().get(0);
		private final RuleCall cTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1 = (RuleCall)cTrueTriggersBindableEntityCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFalseTriggersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFalseTriggersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_4_2_0 = (CrossReference)cFalseTriggersAssignment_4_2.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFalseTriggersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cFalseTriggersBindableEntityCrossReference_4_3_1_0 = (CrossReference)cFalseTriggersAssignment_4_3_1.eContents().get(0);
		private final RuleCall cFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cFalseTriggersBindableEntityCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Trigger returns fsmmodel::Trigger:
		//	{fsmmodel::Trigger} "Trigger" "{" ("trueTriggers" "("
		//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}";
		public ParserRule getRule() { return rule; }

		//{fsmmodel::Trigger} "Trigger" "{" ("trueTriggers" "(" trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		//("," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}"
		public Group getGroup() { return cGroup; }

		//{fsmmodel::Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//"Trigger"
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("trueTriggers" "(" trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"trueTriggers"
		public Keyword getTrueTriggersKeyword_3_0() { return cTrueTriggersKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_3_2() { return cTrueTriggersAssignment_3_2; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_3_2_0() { return cTrueTriggersBindableEntityCrossReference_3_2_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_3_2_0_1; }

		//("," trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getTrueTriggersAssignment_3_3_1() { return cTrueTriggersAssignment_3_3_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getTrueTriggersBindableEntityCrossReference_3_3_1_0() { return cTrueTriggersBindableEntityCrossReference_3_3_1_0; }

		//EString
		public RuleCall getTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1() { return cTrueTriggersBindableEntityEStringParserRuleCall_3_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//("falseTriggers" "(" falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"falseTriggers"
		public Keyword getFalseTriggersKeyword_4_0() { return cFalseTriggersKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_4_2() { return cFalseTriggersAssignment_4_2; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_4_2_0() { return cFalseTriggersBindableEntityCrossReference_4_2_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_4_2_0_1; }

		//("," falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString]
		public Assignment getFalseTriggersAssignment_4_3_1() { return cFalseTriggersAssignment_4_3_1; }

		//[ClockExpressionAndRelation::BindableEntity|EString]
		public CrossReference getFalseTriggersBindableEntityCrossReference_4_3_1_0() { return cFalseTriggersBindableEntityCrossReference_4_3_1_0; }

		//EString
		public RuleCall getFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1() { return cFalseTriggersBindableEntityEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BinaryIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryIntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntPlusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntMultiplyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntDivideParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerAssignementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntSelfPlusAssignParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIntSelfMinusAssignParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIntSelfMultAssignParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIntSelfDivAssignParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
		//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement | IntSelfPlusAssign | IntSelfMinusAssign |
		//	IntSelfMultAssign | IntSelfDivAssign;
		public ParserRule getRule() { return rule; }

		//IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement | IntSelfPlusAssign | IntSelfMinusAssign |
		//IntSelfMultAssign | IntSelfDivAssign
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntPlus
		public RuleCall getIntPlusParserRuleCall_0() { return cIntPlusParserRuleCall_0; }

		//IntMinus
		public RuleCall getIntMinusParserRuleCall_1() { return cIntMinusParserRuleCall_1; }

		//IntMultiply
		public RuleCall getIntMultiplyParserRuleCall_2() { return cIntMultiplyParserRuleCall_2; }

		//IntDivide
		public RuleCall getIntDivideParserRuleCall_3() { return cIntDivideParserRuleCall_3; }

		//IntegerAssignement
		public RuleCall getIntegerAssignementParserRuleCall_4() { return cIntegerAssignementParserRuleCall_4; }

		//IntSelfPlusAssign
		public RuleCall getIntSelfPlusAssignParserRuleCall_5() { return cIntSelfPlusAssignParserRuleCall_5; }

		//IntSelfMinusAssign
		public RuleCall getIntSelfMinusAssignParserRuleCall_6() { return cIntSelfMinusAssignParserRuleCall_6; }

		//IntSelfMultAssign
		public RuleCall getIntSelfMultAssignParserRuleCall_7() { return cIntSelfMultAssignParserRuleCall_7; }

		//IntSelfDivAssign
		public RuleCall getIntSelfDivAssignParserRuleCall_8() { return cIntSelfDivAssignParserRuleCall_8; }
	}

	public class IntSelfPlusAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSelfPlusAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntSelfPlusAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		
		//IntSelfPlusAssign returns extension::IntSelfPlusAssignement:
		//	{extension::IntSelfPlusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "+="
		//	rightValue=IntegerExpression;
		public ParserRule getRule() { return rule; }

		//{extension::IntSelfPlusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "+=" rightValue=IntegerExpression
		public Group getGroup() { return cGroup; }

		//{extension::IntSelfPlusAssignement}
		public Action getIntSelfPlusAssignementAction_0() { return cIntSelfPlusAssignementAction_0; }

		//("#ref" name=EString "=")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_2_0() { return cLeftValueIntegerRefParserRuleCall_2_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_4_0() { return cRightValueIntegerExpressionParserRuleCall_4_0; }
	}

	public class IntSelfMinusAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSelfMinusAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntSelfMinusAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		
		//IntSelfMinusAssign returns extension::IntSelfMinusAssignement:
		//	{extension::IntSelfMinusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "-="
		//	rightValue=IntegerExpression;
		public ParserRule getRule() { return rule; }

		//{extension::IntSelfMinusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "-=" rightValue=IntegerExpression
		public Group getGroup() { return cGroup; }

		//{extension::IntSelfMinusAssignement}
		public Action getIntSelfMinusAssignementAction_0() { return cIntSelfMinusAssignementAction_0; }

		//("#ref" name=EString "=")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_2_0() { return cLeftValueIntegerRefParserRuleCall_2_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_3() { return cHyphenMinusEqualsSignKeyword_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_4_0() { return cRightValueIntegerExpressionParserRuleCall_4_0; }
	}

	public class IntSelfMultAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSelfMultAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntSelfMultiplyAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		
		//IntSelfMultAssign returns extension::IntSelfMultiplyAssignement:
		//	{extension::IntSelfMultiplyAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "*="
		//	rightValue=IntegerExpression;
		public ParserRule getRule() { return rule; }

		//{extension::IntSelfMultiplyAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "*="
		//rightValue=IntegerExpression
		public Group getGroup() { return cGroup; }

		//{extension::IntSelfMultiplyAssignement}
		public Action getIntSelfMultiplyAssignementAction_0() { return cIntSelfMultiplyAssignementAction_0; }

		//("#ref" name=EString "=")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_2_0() { return cLeftValueIntegerRefParserRuleCall_2_0; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_4_0() { return cRightValueIntegerExpressionParserRuleCall_4_0; }
	}

	public class IntSelfDivAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSelfDivAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntSelfDivideAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		
		//IntSelfDivAssign returns extension::IntSelfDivideAssignement:
		//	{extension::IntSelfDivideAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "/="
		//	rightValue=IntegerExpression;
		public ParserRule getRule() { return rule; }

		//{extension::IntSelfDivideAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "/=" rightValue=IntegerExpression
		public Group getGroup() { return cGroup; }

		//{extension::IntSelfDivideAssignement}
		public Action getIntSelfDivideAssignementAction_0() { return cIntSelfDivideAssignementAction_0; }

		//("#ref" name=EString "=")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_2_0() { return cLeftValueIntegerRefParserRuleCall_2_0; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_4_0() { return cRightValueIntegerExpressionParserRuleCall_4_0; }
	}

	public class IntegerAssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerAssignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueIntegerRefParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		
		//IntegerAssignement returns fsmmodel::IntegerAssignement:
		//	{fsmmodel::IntegerAssignement} ("#ref" name=EString ":")? leftValue=IntegerRef "=" rightValue= //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
		//	IntegerExpression;
		public ParserRule getRule() { return rule; }

		//{fsmmodel::IntegerAssignement} ("#ref" name=EString ":")? leftValue=IntegerRef "=" rightValue= //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
		//IntegerExpression
		public Group getGroup() { return cGroup; }

		//{fsmmodel::IntegerAssignement}
		public Action getIntegerAssignementAction_0() { return cIntegerAssignementAction_0; }

		//("#ref" name=EString ":")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//leftValue=IntegerRef
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//IntegerRef
		public RuleCall getLeftValueIntegerRefParserRuleCall_2_0() { return cLeftValueIntegerRefParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//rightValue= //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
		//IntegerExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		////';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_4_0() { return cRightValueIntegerExpressionParserRuleCall_4_0; }
	}

	public class IntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryIntegerExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryIntegerExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSeqGetHeadParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerVariableRefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IntegerExpression returns ClassicalExpression::IntegerExpression:
		//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
		public ParserRule getRule() { return rule; }

		//BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryIntegerExpression
		public RuleCall getBinaryIntegerExpressionParserRuleCall_0() { return cBinaryIntegerExpressionParserRuleCall_0; }

		//UnaryIntegerExpression
		public RuleCall getUnaryIntegerExpressionParserRuleCall_1() { return cUnaryIntegerExpressionParserRuleCall_1; }

		//IntegerRef
		public RuleCall getIntegerRefParserRuleCall_2() { return cIntegerRefParserRuleCall_2; }

		//SeqGetHead
		public RuleCall getSeqGetHeadParserRuleCall_3() { return cSeqGetHeadParserRuleCall_3; }

		//IntegerVariableRef
		public RuleCall getIntegerVariableRefParserRuleCall_4() { return cIntegerVariableRefParserRuleCall_4; }
	}

	public class IntegerVariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerVariableRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cReferencedVarAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferencedVarAbstractEntityCrossReference_0_0_0 = (CrossReference)cReferencedVarAssignment_0_0.eContents().get(0);
		private final RuleCall cReferencedVarAbstractEntityEStringParserRuleCall_0_0_0_1 = (RuleCall)cReferencedVarAbstractEntityCrossReference_0_0_0.eContents().get(1);
		private final Keyword cValueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cGetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencedVarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReferencedVarAbstractEntityCrossReference_1_1_0 = (CrossReference)cReferencedVarAssignment_1_1.eContents().get(0);
		private final RuleCall cReferencedVarAbstractEntityEStringParserRuleCall_1_1_0_1 = (RuleCall)cReferencedVarAbstractEntityCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIntegerVariableRefKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cReferencedVarAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cReferencedVarAbstractEntityCrossReference_2_3_0 = (CrossReference)cReferencedVarAssignment_2_3.eContents().get(0);
		private final RuleCall cReferencedVarAbstractEntityEStringParserRuleCall_2_3_0_1 = (RuleCall)cReferencedVarAbstractEntityCrossReference_2_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//IntegerVariableRef returns ClassicalExpression::IntegerVariableRef:
		//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ".value" | "get("
		//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ")" | "IntegerVariableRef" name=ID? "["
		//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
		public ParserRule getRule() { return rule; }

		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ".value" | "get("
		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ")" | "IntegerVariableRef" name=ID? "["
		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ".value"
		public Group getGroup_0() { return cGroup_0; }

		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString]
		public Assignment getReferencedVarAssignment_0_0() { return cReferencedVarAssignment_0_0; }

		//[ClockExpressionAndRelation::AbstractEntity|EString]
		public CrossReference getReferencedVarAbstractEntityCrossReference_0_0_0() { return cReferencedVarAbstractEntityCrossReference_0_0_0; }

		//EString
		public RuleCall getReferencedVarAbstractEntityEStringParserRuleCall_0_0_0_1() { return cReferencedVarAbstractEntityEStringParserRuleCall_0_0_0_1; }

		//".value"
		public Keyword getValueKeyword_0_1() { return cValueKeyword_0_1; }

		//"get(" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ")"
		public Group getGroup_1() { return cGroup_1; }

		//"get("
		public Keyword getGetKeyword_1_0() { return cGetKeyword_1_0; }

		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString]
		public Assignment getReferencedVarAssignment_1_1() { return cReferencedVarAssignment_1_1; }

		//[ClockExpressionAndRelation::AbstractEntity|EString]
		public CrossReference getReferencedVarAbstractEntityCrossReference_1_1_0() { return cReferencedVarAbstractEntityCrossReference_1_1_0; }

		//EString
		public RuleCall getReferencedVarAbstractEntityEStringParserRuleCall_1_1_0_1() { return cReferencedVarAbstractEntityEStringParserRuleCall_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"IntegerVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]"
		public Group getGroup_2() { return cGroup_2; }

		//"IntegerVariableRef"
		public Keyword getIntegerVariableRefKeyword_2_0() { return cIntegerVariableRefKeyword_2_0; }

		//name=ID?
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString]
		public Assignment getReferencedVarAssignment_2_3() { return cReferencedVarAssignment_2_3; }

		//[ClockExpressionAndRelation::AbstractEntity|EString]
		public CrossReference getReferencedVarAbstractEntityCrossReference_2_3_0() { return cReferencedVarAbstractEntityCrossReference_2_3_0; }

		//EString
		public RuleCall getReferencedVarAbstractEntityEStringParserRuleCall_2_3_0_1() { return cReferencedVarAbstractEntityEStringParserRuleCall_2_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class UnaryIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryIntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryIntPlusParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryIntMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
		//	UnaryIntPlus | UnaryIntMinus;
		public ParserRule getRule() { return rule; }

		//UnaryIntPlus | UnaryIntMinus
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryIntPlus
		public RuleCall getUnaryIntPlusParserRuleCall_0() { return cUnaryIntPlusParserRuleCall_0; }

		//UnaryIntMinus
		public RuleCall getUnaryIntMinusParserRuleCall_1() { return cUnaryIntMinusParserRuleCall_1; }
	}

	public class IntEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntEqual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntEqual returns ClassicalExpression::IntEqual:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "==" rightValue=IntegerExpression ")" //'('leftValue=IntegerExpression '==' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "=="
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "==" rightValue=IntegerExpression ")" //'('leftValue=IntegerExpression '==' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "=="
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "==" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0_3() { return cEqualsSignEqualsSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "=="
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_3() { return cEqualsSignEqualsSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class BooleanRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cReferencedBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cReferencedBoolBooleanElementCrossReference_0_0 = (CrossReference)cReferencedBoolAssignment_0.eContents().get(0);
		private final RuleCall cReferencedBoolBooleanElementEStringParserRuleCall_0_0_1 = (RuleCall)cReferencedBoolBooleanElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReferencedBoolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReferencedBoolBooleanElementCrossReference_1_1_0 = (CrossReference)cReferencedBoolAssignment_1_1.eContents().get(0);
		private final RuleCall cReferencedBoolBooleanElementEStringParserRuleCall_1_1_0_1 = (RuleCall)cReferencedBoolBooleanElementCrossReference_1_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cBRefKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cReferencedBoolAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cReferencedBoolBooleanElementCrossReference_2_3_0 = (CrossReference)cReferencedBoolAssignment_2_3.eContents().get(0);
		private final RuleCall cReferencedBoolBooleanElementEStringParserRuleCall_2_3_0_1 = (RuleCall)cReferencedBoolBooleanElementCrossReference_2_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//BooleanRef returns ClassicalExpression::BooleanRef:
		//	referencedBool=[BasicType::BooleanElement|EString] | "b[" referencedBool=[BasicType::BooleanElement|EString] "]" |
		//	"b#ref" name=ID "[" referencedBool=[BasicType::BooleanElement|EString] "]";
		public ParserRule getRule() { return rule; }

		//referencedBool=[BasicType::BooleanElement|EString] | "b[" referencedBool=[BasicType::BooleanElement|EString] "]" |
		//"b#ref" name=ID "[" referencedBool=[BasicType::BooleanElement|EString] "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//referencedBool=[BasicType::BooleanElement|EString]
		public Assignment getReferencedBoolAssignment_0() { return cReferencedBoolAssignment_0; }

		//[BasicType::BooleanElement|EString]
		public CrossReference getReferencedBoolBooleanElementCrossReference_0_0() { return cReferencedBoolBooleanElementCrossReference_0_0; }

		//EString
		public RuleCall getReferencedBoolBooleanElementEStringParserRuleCall_0_0_1() { return cReferencedBoolBooleanElementEStringParserRuleCall_0_0_1; }

		//"b[" referencedBool=[BasicType::BooleanElement|EString] "]"
		public Group getGroup_1() { return cGroup_1; }

		//"b["
		public Keyword getBKeyword_1_0() { return cBKeyword_1_0; }

		//referencedBool=[BasicType::BooleanElement|EString]
		public Assignment getReferencedBoolAssignment_1_1() { return cReferencedBoolAssignment_1_1; }

		//[BasicType::BooleanElement|EString]
		public CrossReference getReferencedBoolBooleanElementCrossReference_1_1_0() { return cReferencedBoolBooleanElementCrossReference_1_1_0; }

		//EString
		public RuleCall getReferencedBoolBooleanElementEStringParserRuleCall_1_1_0_1() { return cReferencedBoolBooleanElementEStringParserRuleCall_1_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"b#ref" name=ID "[" referencedBool=[BasicType::BooleanElement|EString] "]"
		public Group getGroup_2() { return cGroup_2; }

		//"b#ref"
		public Keyword getBRefKeyword_2_0() { return cBRefKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//referencedBool=[BasicType::BooleanElement|EString]
		public Assignment getReferencedBoolAssignment_2_3() { return cReferencedBoolAssignment_2_3; }

		//[BasicType::BooleanElement|EString]
		public CrossReference getReferencedBoolBooleanElementCrossReference_2_3_0() { return cReferencedBoolBooleanElementCrossReference_2_3_0; }

		//EString
		public RuleCall getReferencedBoolBooleanElementEStringParserRuleCall_2_3_0_1() { return cReferencedBoolBooleanElementEStringParserRuleCall_2_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class IntegerRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIntegerElemAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cIntegerElemIntegerElementCrossReference_0_1_0 = (CrossReference)cIntegerElemAssignment_0_1.eContents().get(0);
		private final RuleCall cIntegerElemIntegerElementEStringParserRuleCall_0_1_0_1 = (RuleCall)cIntegerElemIntegerElementCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cIntegerElemAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cIntegerElemIntegerElementCrossReference_1_3_0 = (CrossReference)cIntegerElemAssignment_1_3.eContents().get(0);
		private final RuleCall cIntegerElemIntegerElementEStringParserRuleCall_1_3_0_1 = (RuleCall)cIntegerElemIntegerElementCrossReference_1_3_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		/// *RealRef returns ClassicalExpression::RealRef:
		//	'r['realElem=[BasicType::RealElement|EString]']'|'r#ref'name=ID'['realElem=[BasicType::RealElement|EString]']';* / IntegerRef
		//returns ClassicalExpression::IntegerRef:
		//	"i." integerElem=[BasicType::IntegerElement|EString] | "i#ref" name=ID "["
		//	integerElem=[BasicType::IntegerElement|EString] "]";
		public ParserRule getRule() { return rule; }

		//"i." integerElem=[BasicType::IntegerElement|EString] | "i#ref" name=ID "["
		//integerElem=[BasicType::IntegerElement|EString] "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"i." integerElem=[BasicType::IntegerElement|EString]
		public Group getGroup_0() { return cGroup_0; }

		//"i."
		public Keyword getIKeyword_0_0() { return cIKeyword_0_0; }

		//integerElem=[BasicType::IntegerElement|EString]
		public Assignment getIntegerElemAssignment_0_1() { return cIntegerElemAssignment_0_1; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getIntegerElemIntegerElementCrossReference_0_1_0() { return cIntegerElemIntegerElementCrossReference_0_1_0; }

		//EString
		public RuleCall getIntegerElemIntegerElementEStringParserRuleCall_0_1_0_1() { return cIntegerElemIntegerElementEStringParserRuleCall_0_1_0_1; }

		//"i#ref" name=ID "[" integerElem=[BasicType::IntegerElement|EString] "]"
		public Group getGroup_1() { return cGroup_1; }

		//"i#ref"
		public Keyword getIRefKeyword_1_0() { return cIRefKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2() { return cLeftSquareBracketKeyword_1_2; }

		//integerElem=[BasicType::IntegerElement|EString]
		public Assignment getIntegerElemAssignment_1_3() { return cIntegerElemAssignment_1_3; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getIntegerElemIntegerElementCrossReference_1_3_0() { return cIntegerElemIntegerElementCrossReference_1_3_0; }

		//EString
		public RuleCall getIntegerElemIntegerElementEStringParserRuleCall_1_3_0_1() { return cIntegerElemIntegerElementEStringParserRuleCall_1_3_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }
	}

	public class UnaryIntPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryIntPlus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cValueKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cValueIntegerElementCrossReference_0_3_0 = (CrossReference)cValueAssignment_0_3.eContents().get(0);
		private final RuleCall cValueIntegerElementEStringParserRuleCall_0_3_0_1 = (RuleCall)cValueIntegerElementCrossReference_0_3_0.eContents().get(1);
		private final Keyword cOperandKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cOperandAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cOperandIntegerExpressionParserRuleCall_0_5_0 = (RuleCall)cOperandAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_1_2_1_0 = (CrossReference)cTypeAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cValueKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cValueIntegerElementCrossReference_1_4_0 = (CrossReference)cValueAssignment_1_4.eContents().get(0);
		private final RuleCall cValueIntegerElementEStringParserRuleCall_1_4_0_1 = (RuleCall)cValueIntegerElementCrossReference_1_4_0.eContents().get(1);
		private final Keyword cOperandKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cOperandIntegerExpressionParserRuleCall_1_6_0 = (RuleCall)cOperandAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		////(integerElem=[BasicType::IntegerElement|EString])|('i#ref'name=ID'['integerElem=[BasicType::IntegerElement|EString]']');
		////(('i#ref'name=ID'[')? integerElem=[BasicType::IntegerElement|EString](']')?);
		////IntegerRef returns ClassicalExpression::IntegerRef:
		////	integerElem=[BasicType::IntegerElement|EString]|'i#ref'name=ID'['integerElem=[BasicType::IntegerElement|EString]']';
		/// *UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
		//	('+' 
		//	'{'
		//		'value' value=[BasicType::RealElement|EString]
		//		'operand' operand=RealExpression
		//	'}')|
		//	('(+' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
		//	'{'
		//		'value' value=[BasicType::RealElement|EString]
		//		'operand' operand=RealExpression
		//	'})');* / / *UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
		//	('-' 
		//	'{'
		//		'value' value=[BasicType::RealElement|EString]
		//		'operand' operand=RealExpression
		//	'}')|
		//	('(-' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
		//	'{'
		//		'value' value=[BasicType::RealElement|EString]
		//		'operand' operand=RealExpression
		//	'})');* / / *RealPlus returns ClassicalExpression::RealPlus:
		//	('('('#ref' name=String0)? leftValue=RealExpression '+' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '+' rightValue=RealExpression')');
		//
		//RealMinus returns ClassicalExpression::RealMinus:
		//	('('('#ref' name=String0)? leftValue=RealExpression '-' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '-' rightValue=RealExpression')');
		//
		//RealMultiply returns ClassicalExpression::RealMultiply:
		//	('('('#ref' name=String0)? leftValue=RealExpression '*' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '*' rightValue=RealExpression')');* / UnaryIntPlus
		//returns ClassicalExpression::UnaryIntPlus:
		//	"+" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(+" ("#ref"
		//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
		//	operand=IntegerExpression "})";
		public ParserRule getRule() { return rule; }

		//"+" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(+" ("#ref"
		//name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
		//operand=IntegerExpression "})"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}"
		public Group getGroup_0() { return cGroup_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//"value"
		public Keyword getValueKeyword_0_2() { return cValueKeyword_0_2; }

		//value=[BasicType::IntegerElement|EString]
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getValueIntegerElementCrossReference_0_3_0() { return cValueIntegerElementCrossReference_0_3_0; }

		//EString
		public RuleCall getValueIntegerElementEStringParserRuleCall_0_3_0_1() { return cValueIntegerElementEStringParserRuleCall_0_3_0_1; }

		//"operand"
		public Keyword getOperandKeyword_0_4() { return cOperandKeyword_0_4; }

		//operand=IntegerExpression
		public Assignment getOperandAssignment_0_5() { return cOperandAssignment_0_5; }

		//IntegerExpression
		public RuleCall getOperandIntegerExpressionParserRuleCall_0_5_0() { return cOperandIntegerExpressionParserRuleCall_0_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//"(+" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString]
		//"operand" operand=IntegerExpression "})"
		public Group getGroup_1() { return cGroup_1; }

		//"(+"
		public Keyword getLeftParenthesisPlusSignKeyword_1_0() { return cLeftParenthesisPlusSignKeyword_1_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//":"
		public Keyword getColonKeyword_1_1_2_0() { return cColonKeyword_1_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_2_1() { return cTypeAssignment_1_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_2_1_0() { return cTypeTypeCrossReference_1_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_1_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//"value"
		public Keyword getValueKeyword_1_3() { return cValueKeyword_1_3; }

		//value=[BasicType::IntegerElement|EString]
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getValueIntegerElementCrossReference_1_4_0() { return cValueIntegerElementCrossReference_1_4_0; }

		//EString
		public RuleCall getValueIntegerElementEStringParserRuleCall_1_4_0_1() { return cValueIntegerElementEStringParserRuleCall_1_4_0_1; }

		//"operand"
		public Keyword getOperandKeyword_1_5() { return cOperandKeyword_1_5; }

		//operand=IntegerExpression
		public Assignment getOperandAssignment_1_6() { return cOperandAssignment_1_6; }

		//IntegerExpression
		public RuleCall getOperandIntegerExpressionParserRuleCall_1_6_0() { return cOperandIntegerExpressionParserRuleCall_1_6_0; }

		//"})"
		public Keyword getRightCurlyBracketRightParenthesisKeyword_1_7() { return cRightCurlyBracketRightParenthesisKeyword_1_7; }
	}

	public class UnaryIntMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryIntMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cValueKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final CrossReference cValueIntegerElementCrossReference_0_3_0 = (CrossReference)cValueAssignment_0_3.eContents().get(0);
		private final RuleCall cValueIntegerElementEStringParserRuleCall_0_3_0_1 = (RuleCall)cValueIntegerElementCrossReference_0_3_0.eContents().get(1);
		private final Keyword cOperandKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cOperandAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cOperandIntegerExpressionParserRuleCall_0_5_0 = (RuleCall)cOperandAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_1_2_1_0 = (CrossReference)cTypeAssignment_1_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cValueKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cValueIntegerElementCrossReference_1_4_0 = (CrossReference)cValueAssignment_1_4.eContents().get(0);
		private final RuleCall cValueIntegerElementEStringParserRuleCall_1_4_0_1 = (RuleCall)cValueIntegerElementCrossReference_1_4_0.eContents().get(1);
		private final Keyword cOperandKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cOperandAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cOperandIntegerExpressionParserRuleCall_1_6_0 = (RuleCall)cOperandAssignment_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
		//	"-" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(-" ("#ref"
		//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
		//	operand=IntegerExpression "})";
		public ParserRule getRule() { return rule; }

		//"-" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(-" ("#ref"
		//name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
		//operand=IntegerExpression "})"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"-" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}"
		public Group getGroup_0() { return cGroup_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//"value"
		public Keyword getValueKeyword_0_2() { return cValueKeyword_0_2; }

		//value=[BasicType::IntegerElement|EString]
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getValueIntegerElementCrossReference_0_3_0() { return cValueIntegerElementCrossReference_0_3_0; }

		//EString
		public RuleCall getValueIntegerElementEStringParserRuleCall_0_3_0_1() { return cValueIntegerElementEStringParserRuleCall_0_3_0_1; }

		//"operand"
		public Keyword getOperandKeyword_0_4() { return cOperandKeyword_0_4; }

		//operand=IntegerExpression
		public Assignment getOperandAssignment_0_5() { return cOperandAssignment_0_5; }

		//IntegerExpression
		public RuleCall getOperandIntegerExpressionParserRuleCall_0_5_0() { return cOperandIntegerExpressionParserRuleCall_0_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//"(-" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString]
		//"operand" operand=IntegerExpression "})"
		public Group getGroup_1() { return cGroup_1; }

		//"(-"
		public Keyword getLeftParenthesisHyphenMinusKeyword_1_0() { return cLeftParenthesisHyphenMinusKeyword_1_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//":"
		public Keyword getColonKeyword_1_1_2_0() { return cColonKeyword_1_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_2_1() { return cTypeAssignment_1_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_2_1_0() { return cTypeTypeCrossReference_1_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_1_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//"value"
		public Keyword getValueKeyword_1_3() { return cValueKeyword_1_3; }

		//value=[BasicType::IntegerElement|EString]
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }

		//[BasicType::IntegerElement|EString]
		public CrossReference getValueIntegerElementCrossReference_1_4_0() { return cValueIntegerElementCrossReference_1_4_0; }

		//EString
		public RuleCall getValueIntegerElementEStringParserRuleCall_1_4_0_1() { return cValueIntegerElementEStringParserRuleCall_1_4_0_1; }

		//"operand"
		public Keyword getOperandKeyword_1_5() { return cOperandKeyword_1_5; }

		//operand=IntegerExpression
		public Assignment getOperandAssignment_1_6() { return cOperandAssignment_1_6; }

		//IntegerExpression
		public RuleCall getOperandIntegerExpressionParserRuleCall_1_6_0() { return cOperandIntegerExpressionParserRuleCall_1_6_0; }

		//"})"
		public Keyword getRightCurlyBracketRightParenthesisKeyword_1_7() { return cRightCurlyBracketRightParenthesisKeyword_1_7; }
	}

	public class IntPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntPlus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntPlus returns ClassicalExpression::IntPlus:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "+" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '+' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "+"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "+" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '+' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "+"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "+" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_3() { return cPlusSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "+"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_3() { return cPlusSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class IntMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntMinus returns ClassicalExpression::IntMinus:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "-" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '-' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "-"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "-" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '-' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "-"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "-" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_3() { return cHyphenMinusKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "-"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_3() { return cHyphenMinusKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class IntMultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntMultiply");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntMultiply returns ClassicalExpression::IntMultiply:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "*" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '*' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "*"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "*" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '*' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "*"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "*" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_3() { return cAsteriskKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "*"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_3() { return cAsteriskKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class IntDivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntDivide");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cSolidusKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cSolidusKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntDivide returns ClassicalExpression::IntDivide:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "/" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '/' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "/"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "/" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '/' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "/"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "/" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"/"
		public Keyword getSolidusKeyword_0_3() { return cSolidusKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "/"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"/"
		public Keyword getSolidusKeyword_1_3() { return cSolidusKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cOperandAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperandBooleanExpressionParserRuleCall_0_1_0 = (RuleCall)cOperandAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cRefKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_0_1_1_0 = (RuleCall)cNameAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_1_2 = (Group)cGroup_1_0_1.eContents().get(2);
		private final Keyword cColonKeyword_1_0_1_2_0 = (Keyword)cGroup_1_0_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1_2_1 = (Assignment)cGroup_1_0_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0_1_2_1_0 = (CrossReference)cTypeAssignment_1_0_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_0_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0_1_2_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOperandBooleanExpressionParserRuleCall_1_0_2_0 = (RuleCall)cOperandAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Not returns ClassicalExpression::Not:
		//	"!" operand=BooleanExpression | ("!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		//	operand=BooleanExpression) ")";
		public ParserRule getRule() { return rule; }

		//"!" operand=BooleanExpression | ("!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		//operand=BooleanExpression) ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" operand=BooleanExpression
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//operand=BooleanExpression
		public Assignment getOperandAssignment_0_1() { return cOperandAssignment_0_1; }

		//BooleanExpression
		public RuleCall getOperandBooleanExpressionParserRuleCall_0_1_0() { return cOperandBooleanExpressionParserRuleCall_0_1_0; }

		//("!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? operand=BooleanExpression) ")"
		public Group getGroup_1() { return cGroup_1; }

		//"!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? operand=BooleanExpression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"!("
		public Keyword getExclamationMarkLeftParenthesisKeyword_1_0_0() { return cExclamationMarkLeftParenthesisKeyword_1_0_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0_1_0() { return cRefKeyword_1_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_0_1_1() { return cNameAssignment_1_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_0_1_1_0() { return cNameString0ParserRuleCall_1_0_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_0_1_2() { return cGroup_1_0_1_2; }

		//":"
		public Keyword getColonKeyword_1_0_1_2_0() { return cColonKeyword_1_0_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_0_1_2_1() { return cTypeAssignment_1_0_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_0_1_2_1_0() { return cTypeTypeCrossReference_1_0_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_0_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_0_1_2_1_0_1; }

		//operand=BooleanExpression
		public Assignment getOperandAssignment_1_0_2() { return cOperandAssignment_1_0_2; }

		//BooleanExpression
		public RuleCall getOperandBooleanExpressionParserRuleCall_1_0_2_0() { return cOperandBooleanExpressionParserRuleCall_1_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueBooleanExpressionParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueBooleanExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//And returns ClassicalExpression::And:
		//	"and (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "^"
		//	rightValue=BooleanExpression ")";
		public ParserRule getRule() { return rule; }

		//"and (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "^"
		//rightValue=BooleanExpression ")"
		public Group getGroup() { return cGroup; }

		//"and ("
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//leftValue=BooleanExpression
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//BooleanExpression
		public RuleCall getLeftValueBooleanExpressionParserRuleCall_2_0() { return cLeftValueBooleanExpressionParserRuleCall_2_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }

		//rightValue=BooleanExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//BooleanExpression
		public RuleCall getRightValueBooleanExpressionParserRuleCall_4_0() { return cRightValueBooleanExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueBooleanExpressionParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cVKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueBooleanExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Or returns ClassicalExpression::Or:
		//	"or (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v"
		//	rightValue=BooleanExpression ")";
		public ParserRule getRule() { return rule; }

		//"or (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v"
		//rightValue=BooleanExpression ")"
		public Group getGroup() { return cGroup; }

		//"or ("
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//leftValue=BooleanExpression
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//BooleanExpression
		public RuleCall getLeftValueBooleanExpressionParserRuleCall_2_0() { return cLeftValueBooleanExpressionParserRuleCall_2_0; }

		//"v"
		public Keyword getVKeyword_3() { return cVKeyword_3; }

		//rightValue=BooleanExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//BooleanExpression
		public RuleCall getRightValueBooleanExpressionParserRuleCall_4_0() { return cRightValueBooleanExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Xor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Assignment cLeftValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftValueBooleanExpressionParserRuleCall_2_0 = (RuleCall)cLeftValueAssignment_2.eContents().get(0);
		private final Keyword cV_Keyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightValueBooleanExpressionParserRuleCall_4_0 = (RuleCall)cRightValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Xor returns ClassicalExpression::Xor:
		//	"xor (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v_"
		//	rightValue=BooleanExpression ")";
		public ParserRule getRule() { return rule; }

		//"xor (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v_"
		//rightValue=BooleanExpression ")"
		public Group getGroup() { return cGroup; }

		//"xor ("
		public Keyword getXorKeyword_0() { return cXorKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//leftValue=BooleanExpression
		public Assignment getLeftValueAssignment_2() { return cLeftValueAssignment_2; }

		//BooleanExpression
		public RuleCall getLeftValueBooleanExpressionParserRuleCall_2_0() { return cLeftValueBooleanExpressionParserRuleCall_2_0; }

		//"v_"
		public Keyword getV_Keyword_3() { return cV_Keyword_3; }

		//rightValue=BooleanExpression
		public Assignment getRightValueAssignment_4() { return cRightValueAssignment_4; }

		//BooleanExpression
		public RuleCall getRightValueBooleanExpressionParserRuleCall_4_0() { return cRightValueBooleanExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IntInfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntInf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		/// *RealEqual returns ClassicalExpression::RealEqual:
		//	('('('#ref' name=String0)? leftValue=RealExpression '==' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '==' rightValue=RealExpression')');
		//
		//RealInf returns ClassicalExpression::RealInf:
		//	('('('#ref' name=String0)? leftValue=RealExpression '<' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<' rightValue=RealExpression')');
		//
		//RealSup returns ClassicalExpression::RealSup:
		//	('('('#ref' name=String0)? leftValue=RealExpression '>' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>' rightValue=RealExpression')');* / IntInf
		//returns ClassicalExpression::IntInf:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '<' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '<' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_3() { return cLessThanSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_3() { return cLessThanSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class IntSupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntSup returns ClassicalExpression::IntSup:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '>' rightValue=IntegerExpression')' |
		//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">"
		//	rightValue=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '>' rightValue=IntegerExpression')' |
		//| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">"
		//rightValue=IntegerExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_3() { return cGreaterThanSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">"
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class SeqIsEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqIsEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqIsEmptyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandSeqExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
		//	"SeqIsEmpty" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
		public ParserRule getRule() { return rule; }

		//"SeqIsEmpty" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")"
		public Group getGroup() { return cGroup; }

		//"SeqIsEmpty"
		public Keyword getSeqIsEmptyKeyword_0() { return cSeqIsEmptyKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//operand=SeqExpression
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//SeqExpression
		public RuleCall getOperandSeqExpressionParserRuleCall_3_0() { return cOperandSeqExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SeqGetTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqGetTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqTailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandSeqExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SeqGetTail returns ClassicalExpression::SeqGetTail:
		//	"Seq->Tail" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
		public ParserRule getRule() { return rule; }

		//"Seq->Tail" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")"
		public Group getGroup() { return cGroup; }

		//"Seq->Tail"
		public Keyword getSeqTailKeyword_0() { return cSeqTailKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//operand=SeqExpression
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//SeqExpression
		public RuleCall getOperandSeqExpressionParserRuleCall_3_0() { return cOperandSeqExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SeqGetHeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqGetHead");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqHeadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_2_1_0 = (CrossReference)cTypeAssignment_1_2_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_2_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_2_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandSeqExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SeqGetHead returns ClassicalExpression::SeqGetHead:
		//	"Seq->Head" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
		public ParserRule getRule() { return rule; }

		//"Seq->Head" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")"
		public Group getGroup() { return cGroup; }

		//"Seq->Head"
		public Keyword getSeqHeadKeyword_0() { return cSeqHeadKeyword_0; }

		//("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_0() { return cNameString0ParserRuleCall_1_1_0; }

		//(":" type=[BasicType::Type|EString])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//":"
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_2_1() { return cTypeAssignment_1_2_1; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_2_1_0() { return cTypeTypeCrossReference_1_2_1_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_2_1_0_1() { return cTypeTypeEStringParserRuleCall_1_2_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//operand=SeqExpression
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//SeqExpression
		public RuleCall getOperandSeqExpressionParserRuleCall_3_0() { return cOperandSeqExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SeqDecrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqDecr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandSeqExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SeqDecr returns ClassicalExpression::SeqDecr:
		//	"Seq--" ("#ref" name=ID ":")? "(" operand=SeqExpression ")";
		public ParserRule getRule() { return rule; }

		//"Seq--" ("#ref" name=ID ":")? "(" operand=SeqExpression ")"
		public Group getGroup() { return cGroup; }

		//"Seq--"
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }

		//("#ref" name=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//operand=SeqExpression
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//SeqExpression
		public RuleCall getOperandSeqExpressionParserRuleCall_3_0() { return cOperandSeqExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SeqSchedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqSched");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperandSeqExpressionParserRuleCall_3_0 = (RuleCall)cOperandAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIntegerExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIntegerExprIntegerExpressionParserRuleCall_5_0 = (RuleCall)cIntegerExprAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SeqSched returns ClassicalExpression::SeqSched:
		//	"Seq++" ("#ref" name=ID ":")? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")";
		public ParserRule getRule() { return rule; }

		//"Seq++" ("#ref" name=ID ":")? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")"
		public Group getGroup() { return cGroup; }

		//"Seq++"
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }

		//("#ref" name=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//"#ref"
		public Keyword getRefKeyword_1_0() { return cRefKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//operand=SeqExpression
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }

		//SeqExpression
		public RuleCall getOperandSeqExpressionParserRuleCall_3_0() { return cOperandSeqExpressionParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//integerExpr=IntegerExpression
		public Assignment getIntegerExprAssignment_5() { return cIntegerExprAssignment_5; }

		//IntegerExpression
		public RuleCall getIntegerExprIntegerExpressionParserRuleCall_5_0() { return cIntegerExprIntegerExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIntEqualParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIntInfParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cIntSupParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSeqIsEmptyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cBooleanVariableRefParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cIntInfEqualParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIntSupEqualParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		/// *|RealInfEqual|RealSupEqual* / BooleanExpression returns ClassicalExpression::BooleanExpression:
		//	BooleanRef | Not | And | Or | Xor | / *RealEqual | RealInf | RealSup | * / IntEqual | IntInf | IntSup | SeqIsEmpty |
		//	BooleanVariableRef | IntInfEqual | IntSupEqual;
		public ParserRule getRule() { return rule; }

		//BooleanRef | Not | And | Or | Xor | / *RealEqual | RealInf | RealSup | * / IntEqual | IntInf | IntSup | SeqIsEmpty |
		//BooleanVariableRef | IntInfEqual | IntSupEqual
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanRef
		public RuleCall getBooleanRefParserRuleCall_0() { return cBooleanRefParserRuleCall_0; }

		//Not
		public RuleCall getNotParserRuleCall_1() { return cNotParserRuleCall_1; }

		//And
		public RuleCall getAndParserRuleCall_2() { return cAndParserRuleCall_2; }

		//Or
		public RuleCall getOrParserRuleCall_3() { return cOrParserRuleCall_3; }

		//Xor
		public RuleCall getXorParserRuleCall_4() { return cXorParserRuleCall_4; }

		/// *RealEqual | RealInf | RealSup | * / IntEqual
		public RuleCall getIntEqualParserRuleCall_5() { return cIntEqualParserRuleCall_5; }

		//IntInf
		public RuleCall getIntInfParserRuleCall_6() { return cIntInfParserRuleCall_6; }

		//IntSup
		public RuleCall getIntSupParserRuleCall_7() { return cIntSupParserRuleCall_7; }

		//SeqIsEmpty
		public RuleCall getSeqIsEmptyParserRuleCall_8() { return cSeqIsEmptyParserRuleCall_8; }

		//BooleanVariableRef
		public RuleCall getBooleanVariableRefParserRuleCall_9() { return cBooleanVariableRefParserRuleCall_9; }

		//IntInfEqual
		public RuleCall getIntInfEqualParserRuleCall_10() { return cIntInfEqualParserRuleCall_10; }

		//IntSupEqual
		public RuleCall getIntSupEqualParserRuleCall_11() { return cIntSupEqualParserRuleCall_11; }
	}

	public class IntSupEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntSupEqual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		/// *RealSupEqual returns extension::RealSupEqual:
		//	('('('#ref' name=String0)? leftValue=RealExpression '>=' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>=' rightValue=RealExpression')');* / / *RealInfEqual returns extension::RealInfEqual:
		//	('('('#ref' name=String0)? leftValue=RealExpression '<=' rightValue=RealExpression')')|
		//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<=' rightValue=RealExpression')');* / IntSupEqual
		//returns extension::IntSupEqual:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")" | "(" ("#ref"
		//	name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression
		//	")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")" | "(" ("#ref"
		//name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression
		//")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0_3() { return cGreaterThanSignEqualsSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">="
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_3() { return cGreaterThanSignEqualsSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class IntInfEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntInfEqual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cRefKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cLeftValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_0_2_0 = (RuleCall)cLeftValueAssignment_0_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightValueAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_0_4_0 = (RuleCall)cRightValueAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRefKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameString0ParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_1_1_3_0 = (CrossReference)cTypeAssignment_1_1_3.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_1_3_0_1 = (RuleCall)cTypeTypeCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cLeftValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftValueIntegerExpressionParserRuleCall_1_2_0 = (RuleCall)cLeftValueAssignment_1_2.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightValueAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightValueIntegerExpressionParserRuleCall_1_4_0 = (RuleCall)cRightValueAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//IntInfEqual returns extension::IntInfEqual:
		//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")" | "(" ("#ref"
		//	name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression
		//	")";
		public ParserRule getRule() { return rule; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")" | "(" ("#ref"
		//name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression
		//")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//("#ref" name=String0 ":")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"#ref"
		public Keyword getRefKeyword_0_1_0() { return cRefKeyword_0_1_0; }

		//name=String0
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_0_1_1_0() { return cNameString0ParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_1_2() { return cColonKeyword_0_1_2; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_0_2() { return cLeftValueAssignment_0_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_0_2_0() { return cLeftValueIntegerExpressionParserRuleCall_0_2_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_0_3() { return cLessThanSignEqualsSignKeyword_0_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_0_4() { return cRightValueAssignment_0_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_0_4_0() { return cRightValueIntegerExpressionParserRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<="
		//rightValue=IntegerExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"#ref"
		public Keyword getRefKeyword_1_1_0() { return cRefKeyword_1_1_0; }

		//name=String0
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//String0
		public RuleCall getNameString0ParserRuleCall_1_1_1_0() { return cNameString0ParserRuleCall_1_1_1_0; }

		//"::"
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }

		//type=[BasicType::Type|EString]
		public Assignment getTypeAssignment_1_1_3() { return cTypeAssignment_1_1_3; }

		//[BasicType::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_1_3_0() { return cTypeTypeCrossReference_1_1_3_0; }

		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_1_3_0_1() { return cTypeTypeEStringParserRuleCall_1_1_3_0_1; }

		//":"
		public Keyword getColonKeyword_1_1_4() { return cColonKeyword_1_1_4; }

		//leftValue=IntegerExpression
		public Assignment getLeftValueAssignment_1_2() { return cLeftValueAssignment_1_2; }

		//IntegerExpression
		public RuleCall getLeftValueIntegerExpressionParserRuleCall_1_2_0() { return cLeftValueIntegerExpressionParserRuleCall_1_2_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_3() { return cLessThanSignEqualsSignKeyword_1_3; }

		//rightValue=IntegerExpression
		public Assignment getRightValueAssignment_1_4() { return cRightValueAssignment_1_4; }

		//IntegerExpression
		public RuleCall getRightValueIntegerExpressionParserRuleCall_1_4_0() { return cRightValueIntegerExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class ClassicalExpression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassicalExpression0");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSeqExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *RealExpression returns ClassicalExpression::RealExpression:
		//	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
		//	
		//BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
		//	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;
		//
		//UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
		//	UnaryRealPlus|UnaryRealMinus;* / / * 
		//RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
		//	{extension::RealSelfPlusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
		//;
		//
		//RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
		//	{extension::RealSelfMinusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
		//;
		//
		//RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
		//	{extension::RealSelfMultiplyAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
		//;
		// * / ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
		//	BooleanExpression / *| RealExpression* / | IntegerExpression | SeqExpression;
		public ParserRule getRule() { return rule; }

		//BooleanExpression / *| RealExpression* / / *RealExpression returns ClassicalExpression::RealExpression:
		//	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
		//	
		//BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
		//	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;
		//
		//UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
		//	UnaryRealPlus|UnaryRealMinus;* / / * 
		//RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
		//	{extension::RealSelfPlusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
		//;
		//
		//RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
		//	{extension::RealSelfMinusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
		//;
		//
		//RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
		//	{extension::RealSelfMultiplyAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
		//;
		// * / | IntegerExpression | SeqExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }

		//IntegerExpression
		public RuleCall getIntegerExpressionParserRuleCall_1() { return cIntegerExpressionParserRuleCall_1; }

		/// *RealExpression returns ClassicalExpression::RealExpression:
		//	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
		//	
		//BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
		//	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;
		//
		//UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
		//	UnaryRealPlus|UnaryRealMinus;* / / * 
		//RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
		//	{extension::RealSelfPlusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
		//;
		//
		//RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
		//	{extension::RealSelfMinusAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
		//;
		//
		//RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
		//	{extension::RealSelfMultiplyAssignement}
		//	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
		//;
		// * / SeqExpression
		public RuleCall getSeqExpressionParserRuleCall_2() { return cSeqExpressionParserRuleCall_2; }
	}
	
	
	private final StateMachineDefinitionElements pStateMachineDefinition;
	private final DeclarationBlockElements pDeclarationBlock;
	private final TransitionElements pTransition;
	private final ActionElements pAction;
	private final IntegerAssignementBlockElements pIntegerAssignementBlock;
	private final StateElements pState;
	private final GuardElements pGuard;
	private final TriggerElements pTrigger;
	private final BinaryIntegerExpressionElements pBinaryIntegerExpression;
	private final IntSelfPlusAssignElements pIntSelfPlusAssign;
	private final IntSelfMinusAssignElements pIntSelfMinusAssign;
	private final IntSelfMultAssignElements pIntSelfMultAssign;
	private final IntSelfDivAssignElements pIntSelfDivAssign;
	private final IntegerAssignementElements pIntegerAssignement;
	private final IntegerExpressionElements pIntegerExpression;
	private final IntegerVariableRefElements pIntegerVariableRef;
	private final UnaryIntegerExpressionElements pUnaryIntegerExpression;
	private final IntEqualElements pIntEqual;
	private final BooleanRefElements pBooleanRef;
	private final IntegerRefElements pIntegerRef;
	private final UnaryIntPlusElements pUnaryIntPlus;
	private final UnaryIntMinusElements pUnaryIntMinus;
	private final IntPlusElements pIntPlus;
	private final IntMinusElements pIntMinus;
	private final IntMultiplyElements pIntMultiply;
	private final IntDivideElements pIntDivide;
	private final NotElements pNot;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final XorElements pXor;
	private final IntInfElements pIntInf;
	private final IntSupElements pIntSup;
	private final SeqIsEmptyElements pSeqIsEmpty;
	private final SeqGetTailElements pSeqGetTail;
	private final SeqGetHeadElements pSeqGetHead;
	private final SeqDecrElements pSeqDecr;
	private final SeqSchedElements pSeqSched;
	private final BooleanExpressionElements pBooleanExpression;
	private final IntSupEqualElements pIntSupEqual;
	private final IntInfEqualElements pIntInfEqual;
	private final ClassicalExpression0Elements pClassicalExpression0;
	
	private final Grammar grammar;

	private final CCSLLibraryGrammarAccess gaCCSLLibrary;

	@Inject
	public FSMDslGrammarAccess(GrammarProvider grammarProvider,
		CCSLLibraryGrammarAccess gaCCSLLibrary) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCCSLLibrary = gaCCSLLibrary;
		this.pStateMachineDefinition = new StateMachineDefinitionElements();
		this.pDeclarationBlock = new DeclarationBlockElements();
		this.pTransition = new TransitionElements();
		this.pAction = new ActionElements();
		this.pIntegerAssignementBlock = new IntegerAssignementBlockElements();
		this.pState = new StateElements();
		this.pGuard = new GuardElements();
		this.pTrigger = new TriggerElements();
		this.pBinaryIntegerExpression = new BinaryIntegerExpressionElements();
		this.pIntSelfPlusAssign = new IntSelfPlusAssignElements();
		this.pIntSelfMinusAssign = new IntSelfMinusAssignElements();
		this.pIntSelfMultAssign = new IntSelfMultAssignElements();
		this.pIntSelfDivAssign = new IntSelfDivAssignElements();
		this.pIntegerAssignement = new IntegerAssignementElements();
		this.pIntegerExpression = new IntegerExpressionElements();
		this.pIntegerVariableRef = new IntegerVariableRefElements();
		this.pUnaryIntegerExpression = new UnaryIntegerExpressionElements();
		this.pIntEqual = new IntEqualElements();
		this.pBooleanRef = new BooleanRefElements();
		this.pIntegerRef = new IntegerRefElements();
		this.pUnaryIntPlus = new UnaryIntPlusElements();
		this.pUnaryIntMinus = new UnaryIntMinusElements();
		this.pIntPlus = new IntPlusElements();
		this.pIntMinus = new IntMinusElements();
		this.pIntMultiply = new IntMultiplyElements();
		this.pIntDivide = new IntDivideElements();
		this.pNot = new NotElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pXor = new XorElements();
		this.pIntInf = new IntInfElements();
		this.pIntSup = new IntSupElements();
		this.pSeqIsEmpty = new SeqIsEmptyElements();
		this.pSeqGetTail = new SeqGetTailElements();
		this.pSeqGetHead = new SeqGetHeadElements();
		this.pSeqDecr = new SeqDecrElements();
		this.pSeqSched = new SeqSchedElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pIntSupEqual = new IntSupEqualElements();
		this.pIntInfEqual = new IntInfEqualElements();
		this.pClassicalExpression0 = new ClassicalExpression0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.mocc.fsmkernel.model.xtext.FSMDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CCSLLibraryGrammarAccess getCCSLLibraryGrammarAccess() {
		return gaCCSLLibrary;
	}

	
	//StateMachineDefinition returns fsmmodel::StateMachineDefinition:
	//	{fsmmodel::StateMachineDefinition} "AutomataDefinition" name=EString "{" declarationBlock=DeclarationBlock? ("init: "
	//	initialStates+=[fsmmodel::State|EString]) ("," initialStates+=[fsmmodel::State|EString])* ("finals: "
	//	finalStates+=[fsmmodel::State|EString] ("," finalStates+=[fsmmodel::State|EString])*)? (states+=State |
	//	transitions+=Transition)+ "}";
	public StateMachineDefinitionElements getStateMachineDefinitionAccess() {
		return pStateMachineDefinition;
	}
	
	public ParserRule getStateMachineDefinitionRule() {
		return getStateMachineDefinitionAccess().getRule();
	}

	////'AutomataDefinition'name=EString
	////'{'
	////	(declarationBlock=DeclarationBlock)?
	////	('init: ' initialStates+= [fsmmodel::State|EString]) ( "," initialStates+=[fsmmodel::State|EString])*
	////	('finals: ' finalStates+=[fsmmodel::State|EString] ( "," finalStates+=[fsmmodel::State|EString])* )?
	////	( ('states: ' states+=State ( "," states+=State)*) | (transitions+=Transition)+)
	////'}';
	//DeclarationBlock returns fsmmodel::DeclarationBlock:
	//	{fsmmodel::DeclarationBlock} "variables {" concreteEntities+=ConcreteEntity* classicalExpressions+=BooleanExpression*
	//	"}";
	public DeclarationBlockElements getDeclarationBlockAccess() {
		return pDeclarationBlock;
	}
	
	public ParserRule getDeclarationBlockRule() {
		return getDeclarationBlockAccess().getRule();
	}

	//Transition returns fsmmodel::Transition:
	//	{fsmmodel::Transition} "from" source=[fsmmodel::State|EString] "to" target=[fsmmodel::State|EString] ":" name=EString
	//	"(" ("when" trigger=Trigger)? ("if" guard=Guard)? ("do" actions+=Action)* ")";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Action returns fsmmodel::AbstractAction:
	//	IntegerAssignement | IntegerAssignementBlock;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//IntegerAssignementBlock returns extension::IntegerAssignementBlock:
	//	{extension::IntegerAssignementBlock} "#ref" name=EString "{" actions+=IntegerAssignement (","
	//	actions+=IntegerAssignement)* "}";
	public IntegerAssignementBlockElements getIntegerAssignementBlockAccess() {
		return pIntegerAssignementBlock;
	}
	
	public ParserRule getIntegerAssignementBlockRule() {
		return getIntegerAssignementBlockAccess().getRule();
	}

	//State returns fsmmodel::State:
	//	{fsmmodel::State} "State" name=EString "(" ("in" ":" inputTransitions+=[fsmmodel::Transition|EString] (","
	//	inputTransitions+=[fsmmodel::Transition|EString])*)? ("out" ":" outputTransitions+=[fsmmodel::Transition|EString]
	//	("," outputTransitions+=[fsmmodel::Transition|EString])*)? ")";
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Guard returns fsmmodel::Guard:
	//	{fsmmodel::Guard} value=BooleanExpression;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Trigger returns fsmmodel::Trigger:
	//	{fsmmodel::Trigger} "Trigger" "{" ("trueTriggers" "("
	//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	trueTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? ("falseTriggers" "("
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString] (","
	//	falseTriggers+=[ClockExpressionAndRelation::BindableEntity|EString])* ")")? "}";
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//BinaryIntegerExpression returns ClassicalExpression::BinaryIntegerExpression:
	//	IntPlus | IntMinus | IntMultiply | IntDivide | IntegerAssignement | IntSelfPlusAssign | IntSelfMinusAssign |
	//	IntSelfMultAssign | IntSelfDivAssign;
	public BinaryIntegerExpressionElements getBinaryIntegerExpressionAccess() {
		return pBinaryIntegerExpression;
	}
	
	public ParserRule getBinaryIntegerExpressionRule() {
		return getBinaryIntegerExpressionAccess().getRule();
	}

	//IntSelfPlusAssign returns extension::IntSelfPlusAssignement:
	//	{extension::IntSelfPlusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "+="
	//	rightValue=IntegerExpression;
	public IntSelfPlusAssignElements getIntSelfPlusAssignAccess() {
		return pIntSelfPlusAssign;
	}
	
	public ParserRule getIntSelfPlusAssignRule() {
		return getIntSelfPlusAssignAccess().getRule();
	}

	//IntSelfMinusAssign returns extension::IntSelfMinusAssignement:
	//	{extension::IntSelfMinusAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "-="
	//	rightValue=IntegerExpression;
	public IntSelfMinusAssignElements getIntSelfMinusAssignAccess() {
		return pIntSelfMinusAssign;
	}
	
	public ParserRule getIntSelfMinusAssignRule() {
		return getIntSelfMinusAssignAccess().getRule();
	}

	//IntSelfMultAssign returns extension::IntSelfMultiplyAssignement:
	//	{extension::IntSelfMultiplyAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "*="
	//	rightValue=IntegerExpression;
	public IntSelfMultAssignElements getIntSelfMultAssignAccess() {
		return pIntSelfMultAssign;
	}
	
	public ParserRule getIntSelfMultAssignRule() {
		return getIntSelfMultAssignAccess().getRule();
	}

	//IntSelfDivAssign returns extension::IntSelfDivideAssignement:
	//	{extension::IntSelfDivideAssignement} ("#ref" name=EString "=")? leftValue=IntegerRef "/="
	//	rightValue=IntegerExpression;
	public IntSelfDivAssignElements getIntSelfDivAssignAccess() {
		return pIntSelfDivAssign;
	}
	
	public ParserRule getIntSelfDivAssignRule() {
		return getIntSelfDivAssignAccess().getRule();
	}

	//IntegerAssignement returns fsmmodel::IntegerAssignement:
	//	{fsmmodel::IntegerAssignement} ("#ref" name=EString ":")? leftValue=IntegerRef "=" rightValue= //';'//'Assign'  '('leftValue=IntegerRef ',' rightValue=IntegerExpression ')'
	//	IntegerExpression;
	public IntegerAssignementElements getIntegerAssignementAccess() {
		return pIntegerAssignement;
	}
	
	public ParserRule getIntegerAssignementRule() {
		return getIntegerAssignementAccess().getRule();
	}

	//IntegerExpression returns ClassicalExpression::IntegerExpression:
	//	BinaryIntegerExpression | UnaryIntegerExpression | IntegerRef | SeqGetHead | IntegerVariableRef;
	public IntegerExpressionElements getIntegerExpressionAccess() {
		return pIntegerExpression;
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}

	//IntegerVariableRef returns ClassicalExpression::IntegerVariableRef:
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ".value" | "get("
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] ")" | "IntegerVariableRef" name=ID? "["
	//	referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public IntegerVariableRefElements getIntegerVariableRefAccess() {
		return pIntegerVariableRef;
	}
	
	public ParserRule getIntegerVariableRefRule() {
		return getIntegerVariableRefAccess().getRule();
	}

	//UnaryIntegerExpression returns ClassicalExpression::UnaryIntegerExpression:
	//	UnaryIntPlus | UnaryIntMinus;
	public UnaryIntegerExpressionElements getUnaryIntegerExpressionAccess() {
		return pUnaryIntegerExpression;
	}
	
	public ParserRule getUnaryIntegerExpressionRule() {
		return getUnaryIntegerExpressionAccess().getRule();
	}

	//IntEqual returns ClassicalExpression::IntEqual:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "==" rightValue=IntegerExpression ")" //'('leftValue=IntegerExpression '==' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "=="
	//	rightValue=IntegerExpression ")";
	public IntEqualElements getIntEqualAccess() {
		return pIntEqual;
	}
	
	public ParserRule getIntEqualRule() {
		return getIntEqualAccess().getRule();
	}

	//BooleanRef returns ClassicalExpression::BooleanRef:
	//	referencedBool=[BasicType::BooleanElement|EString] | "b[" referencedBool=[BasicType::BooleanElement|EString] "]" |
	//	"b#ref" name=ID "[" referencedBool=[BasicType::BooleanElement|EString] "]";
	public BooleanRefElements getBooleanRefAccess() {
		return pBooleanRef;
	}
	
	public ParserRule getBooleanRefRule() {
		return getBooleanRefAccess().getRule();
	}

	/// *RealRef returns ClassicalExpression::RealRef:
	//	'r['realElem=[BasicType::RealElement|EString]']'|'r#ref'name=ID'['realElem=[BasicType::RealElement|EString]']';* / IntegerRef
	//returns ClassicalExpression::IntegerRef:
	//	"i." integerElem=[BasicType::IntegerElement|EString] | "i#ref" name=ID "["
	//	integerElem=[BasicType::IntegerElement|EString] "]";
	public IntegerRefElements getIntegerRefAccess() {
		return pIntegerRef;
	}
	
	public ParserRule getIntegerRefRule() {
		return getIntegerRefAccess().getRule();
	}

	////(integerElem=[BasicType::IntegerElement|EString])|('i#ref'name=ID'['integerElem=[BasicType::IntegerElement|EString]']');
	////(('i#ref'name=ID'[')? integerElem=[BasicType::IntegerElement|EString](']')?);
	////IntegerRef returns ClassicalExpression::IntegerRef:
	////	integerElem=[BasicType::IntegerElement|EString]|'i#ref'name=ID'['integerElem=[BasicType::IntegerElement|EString]']';
	/// *UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	('+' 
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'}')|
	//	('(+' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'})');* / / *UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	('-' 
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'}')|
	//	('(-' ('#ref' name=String0 (':'type=[BasicType::Type|EString])?)?
	//	'{'
	//		'value' value=[BasicType::RealElement|EString]
	//		'operand' operand=RealExpression
	//	'})');* / / *RealPlus returns ClassicalExpression::RealPlus:
	//	('('('#ref' name=String0)? leftValue=RealExpression '+' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '+' rightValue=RealExpression')');
	//
	//RealMinus returns ClassicalExpression::RealMinus:
	//	('('('#ref' name=String0)? leftValue=RealExpression '-' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '-' rightValue=RealExpression')');
	//
	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	('('('#ref' name=String0)? leftValue=RealExpression '*' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '*' rightValue=RealExpression')');* / UnaryIntPlus
	//returns ClassicalExpression::UnaryIntPlus:
	//	"+" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(+" ("#ref"
	//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "})";
	public UnaryIntPlusElements getUnaryIntPlusAccess() {
		return pUnaryIntPlus;
	}
	
	public ParserRule getUnaryIntPlusRule() {
		return getUnaryIntPlusAccess().getRule();
	}

	//UnaryIntMinus returns ClassicalExpression::UnaryIntMinus:
	//	"-" "{" "value" value=[BasicType::IntegerElement|EString] "operand" operand=IntegerExpression "}" | "(-" ("#ref"
	//	name=String0 (":" type=[BasicType::Type|EString])?)? "{" "value" value=[BasicType::IntegerElement|EString] "operand"
	//	operand=IntegerExpression "})";
	public UnaryIntMinusElements getUnaryIntMinusAccess() {
		return pUnaryIntMinus;
	}
	
	public ParserRule getUnaryIntMinusRule() {
		return getUnaryIntMinusAccess().getRule();
	}

	//IntPlus returns ClassicalExpression::IntPlus:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "+" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '+' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "+"
	//	rightValue=IntegerExpression ")";
	public IntPlusElements getIntPlusAccess() {
		return pIntPlus;
	}
	
	public ParserRule getIntPlusRule() {
		return getIntPlusAccess().getRule();
	}

	//IntMinus returns ClassicalExpression::IntMinus:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "-" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '-' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "-"
	//	rightValue=IntegerExpression ")";
	public IntMinusElements getIntMinusAccess() {
		return pIntMinus;
	}
	
	public ParserRule getIntMinusRule() {
		return getIntMinusAccess().getRule();
	}

	//IntMultiply returns ClassicalExpression::IntMultiply:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "*" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '*' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "*"
	//	rightValue=IntegerExpression ")";
	public IntMultiplyElements getIntMultiplyAccess() {
		return pIntMultiply;
	}
	
	public ParserRule getIntMultiplyRule() {
		return getIntMultiplyAccess().getRule();
	}

	//IntDivide returns ClassicalExpression::IntDivide:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "/" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '/' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "/"
	//	rightValue=IntegerExpression ")";
	public IntDivideElements getIntDivideAccess() {
		return pIntDivide;
	}
	
	public ParserRule getIntDivideRule() {
		return getIntDivideAccess().getRule();
	}

	//Not returns ClassicalExpression::Not:
	//	"!" operand=BooleanExpression | ("!(" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)?
	//	operand=BooleanExpression) ")";
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//And returns ClassicalExpression::And:
	//	"and (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "^"
	//	rightValue=BooleanExpression ")";
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Or returns ClassicalExpression::Or:
	//	"or (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v"
	//	rightValue=BooleanExpression ")";
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//Xor returns ClassicalExpression::Xor:
	//	"xor (" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? leftValue=BooleanExpression "v_"
	//	rightValue=BooleanExpression ")";
	public XorElements getXorAccess() {
		return pXor;
	}
	
	public ParserRule getXorRule() {
		return getXorAccess().getRule();
	}

	/// *RealEqual returns ClassicalExpression::RealEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '==' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '==' rightValue=RealExpression')');
	//
	//RealInf returns ClassicalExpression::RealInf:
	//	('('('#ref' name=String0)? leftValue=RealExpression '<' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<' rightValue=RealExpression')');
	//
	//RealSup returns ClassicalExpression::RealSup:
	//	('('('#ref' name=String0)? leftValue=RealExpression '>' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>' rightValue=RealExpression')');* / IntInf
	//returns ClassicalExpression::IntInf:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '<' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<"
	//	rightValue=IntegerExpression ")";
	public IntInfElements getIntInfAccess() {
		return pIntInf;
	}
	
	public ParserRule getIntInfRule() {
		return getIntInfAccess().getRule();
	}

	//IntSup returns ClassicalExpression::IntSup:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">" rightValue=IntegerExpression ")" //'(' leftValue=IntegerExpression '>' rightValue=IntegerExpression')' |
	//	| "(" ("#ref" name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">"
	//	rightValue=IntegerExpression ")";
	public IntSupElements getIntSupAccess() {
		return pIntSup;
	}
	
	public ParserRule getIntSupRule() {
		return getIntSupAccess().getRule();
	}

	//SeqIsEmpty returns ClassicalExpression::SeqIsEmpty:
	//	"SeqIsEmpty" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public SeqIsEmptyElements getSeqIsEmptyAccess() {
		return pSeqIsEmpty;
	}
	
	public ParserRule getSeqIsEmptyRule() {
		return getSeqIsEmptyAccess().getRule();
	}

	//SeqGetTail returns ClassicalExpression::SeqGetTail:
	//	"Seq->Tail" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public SeqGetTailElements getSeqGetTailAccess() {
		return pSeqGetTail;
	}
	
	public ParserRule getSeqGetTailRule() {
		return getSeqGetTailAccess().getRule();
	}

	//SeqGetHead returns ClassicalExpression::SeqGetHead:
	//	"Seq->Head" ("#ref" name=String0 (":" type=[BasicType::Type|EString])?)? "(" operand=SeqExpression ")";
	public SeqGetHeadElements getSeqGetHeadAccess() {
		return pSeqGetHead;
	}
	
	public ParserRule getSeqGetHeadRule() {
		return getSeqGetHeadAccess().getRule();
	}

	//SeqDecr returns ClassicalExpression::SeqDecr:
	//	"Seq--" ("#ref" name=ID ":")? "(" operand=SeqExpression ")";
	public SeqDecrElements getSeqDecrAccess() {
		return pSeqDecr;
	}
	
	public ParserRule getSeqDecrRule() {
		return getSeqDecrAccess().getRule();
	}

	//SeqSched returns ClassicalExpression::SeqSched:
	//	"Seq++" ("#ref" name=ID ":")? "(" operand=SeqExpression "," integerExpr=IntegerExpression ")";
	public SeqSchedElements getSeqSchedAccess() {
		return pSeqSched;
	}
	
	public ParserRule getSeqSchedRule() {
		return getSeqSchedAccess().getRule();
	}

	/// *|RealInfEqual|RealSupEqual* / BooleanExpression returns ClassicalExpression::BooleanExpression:
	//	BooleanRef | Not | And | Or | Xor | / *RealEqual | RealInf | RealSup | * / IntEqual | IntInf | IntSup | SeqIsEmpty |
	//	BooleanVariableRef | IntInfEqual | IntSupEqual;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	/// *RealSupEqual returns extension::RealSupEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '>=' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '>=' rightValue=RealExpression')');* / / *RealInfEqual returns extension::RealInfEqual:
	//	('('('#ref' name=String0)? leftValue=RealExpression '<=' rightValue=RealExpression')')|
	//	('('('#ref' name=String0 ':'type=[BasicType::Type|EString])? leftValue=RealExpression '<=' rightValue=RealExpression')');* / IntSupEqual
	//returns extension::IntSupEqual:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression ")" | "(" ("#ref"
	//	name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression ">=" rightValue=IntegerExpression
	//	")";
	public IntSupEqualElements getIntSupEqualAccess() {
		return pIntSupEqual;
	}
	
	public ParserRule getIntSupEqualRule() {
		return getIntSupEqualAccess().getRule();
	}

	//IntInfEqual returns extension::IntInfEqual:
	//	"(" ("#ref" name=String0 ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression ")" | "(" ("#ref"
	//	name=String0 "::" type=[BasicType::Type|EString] ":")? leftValue=IntegerExpression "<=" rightValue=IntegerExpression
	//	")";
	public IntInfEqualElements getIntInfEqualAccess() {
		return pIntInfEqual;
	}
	
	public ParserRule getIntInfEqualRule() {
		return getIntInfEqualAccess().getRule();
	}

	/// *RealExpression returns ClassicalExpression::RealExpression:
	//	BinaryRealExpression|UnaryRealExpression|RealRef|RealVariableRef;
	//	
	//BinaryRealExpression returns ClassicalExpression::BinaryRealExpression:
	//	RealPlus|RealMinus|RealMultiply|RealSelfPlusAssign|RealSelfMinusAssign|RealSelfMultAssign;
	//
	//UnaryRealExpression returns ClassicalExpression::UnaryRealExpression:
	//	UnaryRealPlus|UnaryRealMinus;* / / * 
	//RealSelfPlusAssign returns extension::RealSelfPlusAssignement:
	//	{extension::RealSelfPlusAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '+=' rightValue=RealExpression
	//;
	//
	//RealSelfMinusAssign returns extension::RealSelfMinusAssignement:
	//	{extension::RealSelfMinusAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '-=' rightValue=RealExpression
	//;
	//
	//RealSelfMultAssign returns extension::RealSelfMultiplyAssignement:
	//	{extension::RealSelfMultiplyAssignement}
	//	('#ref'name=EString)? leftValue=RealRef '*=' rightValue=RealExpression
	//;
	// * / ClassicalExpression0 returns ClassicalExpression::ClassicalExpression:
	//	BooleanExpression / *| RealExpression* / | IntegerExpression | SeqExpression;
	public ClassicalExpression0Elements getClassicalExpression0Access() {
		return pClassicalExpression0;
	}
	
	public ParserRule getClassicalExpression0Rule() {
		return getClassicalExpression0Access().getRule();
	}

	//Library returns ClockExpressionAndRelation::Library:
	//	"Library" name=ID "{" (("imports" "{" imports+=ImportStatement* "}")? (expressionLibraries+=ExpressionLibrary |
	//	relationLibraries+=RelationLibrary | predefinedTypes+=Type)*) "}";
	public CCSLLibraryGrammarAccess.LibraryElements getLibraryAccess() {
		return gaCCSLLibrary.getLibraryAccess();
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//ImportStatement:
	//	"import" importURI=STRING "as" alias=String0 ";";
	public CCSLLibraryGrammarAccess.ImportStatementElements getImportStatementAccess() {
		return gaCCSLLibrary.getImportStatementAccess();
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//ExpressionLibrary returns ClockExpressionAndRelation::ExpressionLibrary:
	//	"ExpressionLibrary" name=ID "{" (elements+=Element | expressionDeclarations+=(ExpressionDeclaration |
	//	kernelExpressionDecl) | expressionDefinitions+=ExpressionDefinition)+ "}";
	public CCSLLibraryGrammarAccess.ExpressionLibraryElements getExpressionLibraryAccess() {
		return gaCCSLLibrary.getExpressionLibraryAccess();
	}
	
	public ParserRule getExpressionLibraryRule() {
		return getExpressionLibraryAccess().getRule();
	}

	//RelationLibrary returns ClockExpressionAndRelation::RelationLibrary:
	//	"RelationLibrary" name=ID "{" (elements+=Element | relationDeclarations+=(RelationDeclaration | kernelRelationDecl) |
	//	relationDefinitions+=RelationDefinition)+ "}";
	public CCSLLibraryGrammarAccess.RelationLibraryElements getRelationLibraryAccess() {
		return gaCCSLLibrary.getRelationLibraryAccess();
	}
	
	public ParserRule getRelationLibraryRule() {
		return getRelationLibraryAccess().getRule();
	}

	//ExpressionDeclaration returns ClockExpressionAndRelation::ExpressionDeclaration:
	//	"ExpressionDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")" ":"
	//	returnType=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return gaCCSLLibrary.getExpressionDeclarationAccess();
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}

	//RelationDeclaration returns ClockExpressionAndRelation::RelationDeclaration:
	//	"RelationDeclaration" name=ID "(" parameters+=AbstractEntity ("," parameters+=AbstractEntity)* ")";
	public CCSLLibraryGrammarAccess.RelationDeclarationElements getRelationDeclarationAccess() {
		return gaCCSLLibrary.getRelationDeclarationAccess();
	}
	
	public ParserRule getRelationDeclarationRule() {
		return getRelationDeclarationAccess().getRule();
	}

	//UserExpressionDefinition_Impl returns ClockExpressionAndRelation::UserExpressionDefinition:
	//	"ExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]" "{"
	//	("root" "=" rootExpression=[ClockExpressionAndRelation::Expression|EString] (concreteEntities+=ConcreteEntity |
	//	classicalExpressions+=ClassicalExpression0)+) "}";
	public CCSLLibraryGrammarAccess.UserExpressionDefinition_ImplElements getUserExpressionDefinition_ImplAccess() {
		return gaCCSLLibrary.getUserExpressionDefinition_ImplAccess();
	}
	
	public ParserRule getUserExpressionDefinition_ImplRule() {
		return getUserExpressionDefinition_ImplAccess().getRule();
	}

	//ConditionalExpressionDefinition returns ClockExpressionAndRelation::ConditionalExpressionDefinition:
	//	"ConditionalExpressionDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString]
	//	"]" "{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & "switch" "{"
	//	exprCases+=ExprCase exprCases+=ExprCase* "}" ("default" defaultExpression=Expression)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalExpressionDefinitionElements getConditionalExpressionDefinitionAccess() {
		return gaCCSLLibrary.getConditionalExpressionDefinitionAccess();
	}
	
	public ParserRule getConditionalExpressionDefinitionRule() {
		return getConditionalExpressionDefinitionAccess().getRule();
	}

	//ExternalExpressionDefinition returns ClockExpressionAndRelation::ExternalExpressionDefinition:
	//	("Extern" | "External") "ExpressionDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalExpressionDefinitionElements getExternalExpressionDefinitionAccess() {
		return gaCCSLLibrary.getExternalExpressionDefinitionAccess();
	}
	
	public ParserRule getExternalExpressionDefinitionRule() {
		return getExternalExpressionDefinitionAccess().getRule();
	}

	//ConditionalRelationDefinition returns ClockExpressionAndRelation::ConditionalRelationDefinition:
	//	"ConditionalRelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]"
	//	"{" ((concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)* & ("switch" "{"
	//	relCases+=RelCase relCases+=RelCase* "}" "default" defaultRelation+=Relation*)?) "}";
	public CCSLLibraryGrammarAccess.ConditionalRelationDefinitionElements getConditionalRelationDefinitionAccess() {
		return gaCCSLLibrary.getConditionalRelationDefinitionAccess();
	}
	
	public ParserRule getConditionalRelationDefinitionRule() {
		return getConditionalRelationDefinitionAccess().getRule();
	}

	//ExternalRelationDefinition returns ClockExpressionAndRelation::ExternalRelationDefinition:
	//	("Extern" | "External") "RelationDefinition" name=ID "["
	//	declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]";
	public CCSLLibraryGrammarAccess.ExternalRelationDefinitionElements getExternalRelationDefinitionAccess() {
		return gaCCSLLibrary.getExternalRelationDefinitionAccess();
	}
	
	public ParserRule getExternalRelationDefinitionRule() {
		return getExternalRelationDefinitionAccess().getRule();
	}

	//Relation returns ClockExpressionAndRelation::Relation:
	//	isAnAssertion?="assert"? "Relation" (name=ID "[")? type=[ClockExpressionAndRelation::RelationDeclaration|EString]
	//	"]"? "(" (bindings+=Binding ("," bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.RelationElements getRelationAccess() {
		return gaCCSLLibrary.getRelationAccess();
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//Expression returns ClockExpressionAndRelation::Expression:
	//	"Expression" name=ID "=" type=[ClockExpressionAndRelation::ExpressionDeclaration|EString] "(" (bindings+=Binding (","
	//	bindings+=Binding)*)? ")";
	public CCSLLibraryGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaCCSLLibrary.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Binding returns ClockExpressionAndRelation::Binding:
	//	abstract=[ClockExpressionAndRelation::AbstractEntity|EString] "->"
	//	bindable=[ClockExpressionAndRelation::BindableEntity|EString];
	public CCSLLibraryGrammarAccess.BindingElements getBindingAccess() {
		return gaCCSLLibrary.getBindingAccess();
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Clock:
	//	"Clock" name=ID ":" type=[BasicType::Type|EString];
	public CCSLLibraryGrammarAccess.ClockElements getClockAccess() {
		return gaCCSLLibrary.getClockAccess();
	}
	
	public ParserRule getClockRule() {
		return getClockAccess().getRule();
	}

	//Type returns BasicType::Type:
	//	String1 | Boolean | Integer | Real | Char | Record | SequenceType | DiscreteClockType_Impl | DenseClockType |
	//	EnumerationType;
	public CCSLLibraryGrammarAccess.TypeElements getTypeAccess() {
		return gaCCSLLibrary.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ExpressionDefinition returns ClockExpressionAndRelation::ExpressionDefinition:
	//	UserExpressionDefinition_Impl | ConditionalExpressionDefinition | ExternalExpressionDefinition;
	public CCSLLibraryGrammarAccess.ExpressionDefinitionElements getExpressionDefinitionAccess() {
		return gaCCSLLibrary.getExpressionDefinitionAccess();
	}
	
	public ParserRule getExpressionDefinitionRule() {
		return getExpressionDefinitionAccess().getRule();
	}

	//Element returns BasicType::Element:
	//	Clock / *| CharElement * / | StringElement | BooleanElement | IntegerElement | RealElement | RecordElement |
	//	SequenceElement;
	public CCSLLibraryGrammarAccess.ElementElements getElementAccess() {
		return gaCCSLLibrary.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//RelationDefinition returns ClockExpressionAndRelation::RelationDefinition:
	//	UserRelationDefinition_Impl | ConditionalRelationDefinition | ExternalRelationDefinition;
	public CCSLLibraryGrammarAccess.RelationDefinitionElements getRelationDefinitionAccess() {
		return gaCCSLLibrary.getRelationDefinitionAccess();
	}
	
	public ParserRule getRelationDefinitionRule() {
		return getRelationDefinitionAccess().getRule();
	}

	//ExprCase returns ClockExpressionAndRelation::ExprCase:
	//	"case" condition=BooleanExpression ":" expression=Expression;
	public CCSLLibraryGrammarAccess.ExprCaseElements getExprCaseAccess() {
		return gaCCSLLibrary.getExprCaseAccess();
	}
	
	public ParserRule getExprCaseRule() {
		return getExprCaseAccess().getRule();
	}

	//RelCase returns ClockExpressionAndRelation::RelCase:
	//	"case" condition=BooleanExpression ":" relation+=Relation*;
	public CCSLLibraryGrammarAccess.RelCaseElements getRelCaseAccess() {
		return gaCCSLLibrary.getRelCaseAccess();
	}
	
	public ParserRule getRelCaseRule() {
		return getRelCaseAccess().getRule();
	}

	//UserRelationDefinition_Impl returns ClockExpressionAndRelation::UserRelationDefinition:
	//	"RelationDefinition" name=ID "[" declaration=[ClockExpressionAndRelation::RelationDeclaration|EString] "]" "{"
	//	(concreteEntities+=ConcreteEntity | classicalExpressions+=ClassicalExpression0)+ "}";
	public CCSLLibraryGrammarAccess.UserRelationDefinition_ImplElements getUserRelationDefinition_ImplAccess() {
		return gaCCSLLibrary.getUserRelationDefinition_ImplAccess();
	}
	
	public ParserRule getUserRelationDefinition_ImplRule() {
		return getUserRelationDefinition_ImplAccess().getRule();
	}

	//ConcreteEntity returns ClockExpressionAndRelation::ConcreteEntity:
	//	Expression | Relation | Clock | Element;
	public CCSLLibraryGrammarAccess.ConcreteEntityElements getConcreteEntityAccess() {
		return gaCCSLLibrary.getConcreteEntityAccess();
	}
	
	public ParserRule getConcreteEntityRule() {
		return getConcreteEntityAccess().getRule();
	}

	//BindableEntity returns ClockExpressionAndRelation::BindableEntity:
	//	Expression | Relation | AbstractEntity;
	public CCSLLibraryGrammarAccess.BindableEntityElements getBindableEntityAccess() {
		return gaCCSLLibrary.getBindableEntityAccess();
	}
	
	public ParserRule getBindableEntityRule() {
		return getBindableEntityAccess().getRule();
	}

	//RealExpression returns ClassicalExpression::RealExpression:
	//	RealRef | UnaryRealPlus | UnaryRealMinus | RealPlus | RealMinus | RealMultiply | RealVariableRef;
	public CCSLLibraryGrammarAccess.RealExpressionElements getRealExpressionAccess() {
		return gaCCSLLibrary.getRealExpressionAccess();
	}
	
	public ParserRule getRealExpressionRule() {
		return getRealExpressionAccess().getRule();
	}

	//SeqExpression returns ClassicalExpression::SeqExpression:
	//	SeqGetTail | SeqDecr | SeqSched | NumberSeqRef | NumberSeqVariableRef;
	public CCSLLibraryGrammarAccess.SeqExpressionElements getSeqExpressionAccess() {
		return gaCCSLLibrary.getSeqExpressionAccess();
	}
	
	public ParserRule getSeqExpressionRule() {
		return getSeqExpressionAccess().getRule();
	}

	////| CharElement;
	// PrimitiveElement returns BasicType::PrimitiveElement:
	//	StringElement | BooleanElement | IntegerElement | IntegerVariableRef | RealElement;
	public CCSLLibraryGrammarAccess.PrimitiveElementElements getPrimitiveElementAccess() {
		return gaCCSLLibrary.getPrimitiveElementAccess();
	}
	
	public ParserRule getPrimitiveElementRule() {
		return getPrimitiveElementAccess().getRule();
	}

	//PrimitiveType returns BasicType::PrimitiveType:
	//	String1 | Boolean | Integer | Real | Char | EnumerationType;
	public CCSLLibraryGrammarAccess.PrimitiveTypeElements getPrimitiveTypeAccess() {
		return gaCCSLLibrary.getPrimitiveTypeAccess();
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//kernelExpressionDecl returns KernelExpression::KernelExpressionDeclaration:
	//	Death | UpTo | Union | Intersection | Inf | Sup | Concatenation | StrictSampling | NonStrictSampling | Defer |
	//	Discretization | Wait;
	public CCSLLibraryGrammarAccess.KernelExpressionDeclElements getKernelExpressionDeclAccess() {
		return gaCCSLLibrary.getKernelExpressionDeclAccess();
	}
	
	public ParserRule getKernelExpressionDeclRule() {
		return getKernelExpressionDeclAccess().getRule();
	}

	//kernelRelationDecl returns KernelRelation::KernelRelationDeclaration:
	//	Precedence | NonStrictPrecedence | Coincidence | SubClock | Exclusion;
	public CCSLLibraryGrammarAccess.KernelRelationDeclElements getKernelRelationDeclAccess() {
		return gaCCSLLibrary.getKernelRelationDeclAccess();
	}
	
	public ParserRule getKernelRelationDeclRule() {
		return getKernelRelationDeclAccess().getRule();
	}

	//String0 returns ecore::EString:
	//	"String" STRING | ID;
	public CCSLLibraryGrammarAccess.String0Elements getString0Access() {
		return gaCCSLLibrary.getString0Access();
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}

	//AbstractEntity returns ClockExpressionAndRelation::AbstractEntity:
	//	name=ID ":" type=[BasicType::Type|EString] desiredEventKind=EventKind?;
	public CCSLLibraryGrammarAccess.AbstractEntityElements getAbstractEntityAccess() {
		return gaCCSLLibrary.getAbstractEntityAccess();
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}

	//enum EventKind:
	//	start | finish | finish="stop" | consume | produce | receive | send | undefined="any" | undefined="all" | undefined;
	public CCSLLibraryGrammarAccess.EventKindElements getEventKindAccess() {
		return gaCCSLLibrary.getEventKindAccess();
	}
	
	public EnumRule getEventKindRule() {
		return getEventKindAccess().getRule();
	}

	////ConcreteEntity_Impl returns ClockExpressionAndRelation::ConcreteEntity:
	//
	////	{ClockExpressionAndRelation::ConcreteEntity}
	// //	'ConcreteEntity' name=ID;
	// Boolean0 returns ecore::EBoolean:
	//	"True" | "False";
	public CCSLLibraryGrammarAccess.Boolean0Elements getBoolean0Access() {
		return gaCCSLLibrary.getBoolean0Access();
	}
	
	public ParserRule getBoolean0Rule() {
		return getBoolean0Access().getRule();
	}

	//RealRef returns ClassicalExpression::RealRef:
	//	"RealRef" "{" ("name" name=ID)? "realElem" realElem=[BasicType::RealElement|EString] "}";
	public CCSLLibraryGrammarAccess.RealRefElements getRealRefAccess() {
		return gaCCSLLibrary.getRealRefAccess();
	}
	
	public ParserRule getRealRefRule() {
		return getRealRefAccess().getRule();
	}

	//UnaryRealPlus returns ClassicalExpression::UnaryRealPlus:
	//	"UnaryRealPlus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand" operand=RealExpression
	//	"}";
	public CCSLLibraryGrammarAccess.UnaryRealPlusElements getUnaryRealPlusAccess() {
		return gaCCSLLibrary.getUnaryRealPlusAccess();
	}
	
	public ParserRule getUnaryRealPlusRule() {
		return getUnaryRealPlusAccess().getRule();
	}

	//UnaryRealMinus returns ClassicalExpression::UnaryRealMinus:
	//	"UnaryRealMinus" "{" ("name" name=ID)? "value" value=[BasicType::RealElement|EString] "operand"
	//	operand=RealExpression "}";
	public CCSLLibraryGrammarAccess.UnaryRealMinusElements getUnaryRealMinusAccess() {
		return gaCCSLLibrary.getUnaryRealMinusAccess();
	}
	
	public ParserRule getUnaryRealMinusRule() {
		return getUnaryRealMinusAccess().getRule();
	}

	//RealPlus returns ClassicalExpression::RealPlus:
	//	"RealPlus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealPlusElements getRealPlusAccess() {
		return gaCCSLLibrary.getRealPlusAccess();
	}
	
	public ParserRule getRealPlusRule() {
		return getRealPlusAccess().getRule();
	}

	//RealMinus returns ClassicalExpression::RealMinus:
	//	"RealMinus" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMinusElements getRealMinusAccess() {
		return gaCCSLLibrary.getRealMinusAccess();
	}
	
	public ParserRule getRealMinusRule() {
		return getRealMinusAccess().getRule();
	}

	//RealMultiply returns ClassicalExpression::RealMultiply:
	//	"RealMultiply" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealMultiplyElements getRealMultiplyAccess() {
		return gaCCSLLibrary.getRealMultiplyAccess();
	}
	
	public ParserRule getRealMultiplyRule() {
		return getRealMultiplyAccess().getRule();
	}

	//RealEqual returns ClassicalExpression::RealEqual:
	//	"RealEqual" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealEqualElements getRealEqualAccess() {
		return gaCCSLLibrary.getRealEqualAccess();
	}
	
	public ParserRule getRealEqualRule() {
		return getRealEqualAccess().getRule();
	}

	//RealInf returns ClassicalExpression::RealInf:
	//	"RealInf" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealInfElements getRealInfAccess() {
		return gaCCSLLibrary.getRealInfAccess();
	}
	
	public ParserRule getRealInfRule() {
		return getRealInfAccess().getRule();
	}

	//RealSup returns ClassicalExpression::RealSup:
	//	"RealSup" "{" ("name" name=ID)? "leftValue" leftValue=RealExpression "rightValue" rightValue=RealExpression "}";
	public CCSLLibraryGrammarAccess.RealSupElements getRealSupAccess() {
		return gaCCSLLibrary.getRealSupAccess();
	}
	
	public ParserRule getRealSupRule() {
		return getRealSupAccess().getRule();
	}

	//BooleanVariableRef returns ClassicalExpression::BooleanVariableRef:
	//	"BooleanVariableRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.BooleanVariableRefElements getBooleanVariableRefAccess() {
		return gaCCSLLibrary.getBooleanVariableRefAccess();
	}
	
	public ParserRule getBooleanVariableRefRule() {
		return getBooleanVariableRefAccess().getRule();
	}

	//RealVariableRef returns ClassicalExpression::RealVariableRef:
	//	"RealVariableRef" ("name" name=ID)? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.RealVariableRefElements getRealVariableRefAccess() {
		return gaCCSLLibrary.getRealVariableRefAccess();
	}
	
	public ParserRule getRealVariableRefRule() {
		return getRealVariableRefAccess().getRule();
	}

	//NumberSeqRef returns ClassicalExpression::NumberSeqRef:
	//	"SeqRef" ("name" name=ID)? "[" referencedNumberSeq=[BasicType::SequenceElement|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqRefElements getNumberSeqRefAccess() {
		return gaCCSLLibrary.getNumberSeqRefAccess();
	}
	
	public ParserRule getNumberSeqRefRule() {
		return getNumberSeqRefAccess().getRule();
	}

	//NumberSeqVariableRef returns ClassicalExpression::NumberSeqVariableRef:
	//	"SeqVarRef" name=ID? "[" referencedVar=[ClockExpressionAndRelation::AbstractEntity|EString] "]";
	public CCSLLibraryGrammarAccess.NumberSeqVariableRefElements getNumberSeqVariableRefAccess() {
		return gaCCSLLibrary.getNumberSeqVariableRefAccess();
	}
	
	public ParserRule getNumberSeqVariableRefRule() {
		return getNumberSeqVariableRefAccess().getRule();
	}

	//RealElement returns BasicType::RealElement:
	//	"Real" name=ID (":" type=[BasicType::Type|EString])? "=" value=Real0;
	public CCSLLibraryGrammarAccess.RealElementElements getRealElementAccess() {
		return gaCCSLLibrary.getRealElementAccess();
	}
	
	public ParserRule getRealElementRule() {
		return getRealElementAccess().getRule();
	}

	//terminal Real0 returns ecore::EFloat:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getReal0Rule() {
		return gaCCSLLibrary.getReal0Rule();
	} 

	////Real0 returns Real:
	// //	'Real' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// IntegerElement
	//returns BasicType::IntegerElement:
	//	"Integer" name=ID (":" type=[BasicType::Type|EString])? "=" value=INT | name=ID "=" value=INT | value=INT;
	public CCSLLibraryGrammarAccess.IntegerElementElements getIntegerElementAccess() {
		return gaCCSLLibrary.getIntegerElementAccess();
	}
	
	public ParserRule getIntegerElementRule() {
		return getIntegerElementAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"-"? "0".."9"+;
	public TerminalRule getINTRule() {
		return gaCCSLLibrary.getINTRule();
	} 

	//BooleanElement returns BasicType::BooleanElement:
	//	"BooleanElement" name=ID (":" type=[BasicType::Type] | EString)? "=" value=Boolean0;
	public CCSLLibraryGrammarAccess.BooleanElementElements getBooleanElementAccess() {
		return gaCCSLLibrary.getBooleanElementAccess();
	}
	
	public ParserRule getBooleanElementRule() {
		return getBooleanElementAccess().getRule();
	}

	//SequenceElement returns BasicType::SequenceElement:
	//	{BasicType::SequenceElement} "Sequence" name=ID? (":" type=[BasicType::Type|EString])? "="
	//	(finitePart+=PrimitiveElement (";" finitePart+=PrimitiveElement)* ";"?)? ("(" nonFinitePart+=PrimitiveElement (";"
	//	nonFinitePart+=PrimitiveElement)* ")")?;
	public CCSLLibraryGrammarAccess.SequenceElementElements getSequenceElementAccess() {
		return gaCCSLLibrary.getSequenceElementAccess();
	}
	
	public ParserRule getSequenceElementRule() {
		return getSequenceElementAccess().getRule();
	}

	//StringElement returns BasicType::StringElement:
	//	"String" name=ID "=" value=String0;
	public CCSLLibraryGrammarAccess.StringElementElements getStringElementAccess() {
		return gaCCSLLibrary.getStringElementAccess();
	}
	
	public ParserRule getStringElementRule() {
		return getStringElementAccess().getRule();
	}

	////		('type' type=[BasicType::Type|EString])?
	// //CharElement returns BasicType::CharElement:
	// //	'CharElement'
	// //	'{'
	//
	////		('name' name=ID)?
	// //		'value' value=Char0
	// //		('type' type=[BasicType::Type|EString])?
	// //    '}';
	//
	////Char0 returns Char:
	// //	'Char' / * TODO: implement this rule and an appropriate IValueConverter * /;
	// RecordElement
	//returns BasicType::RecordElement:
	//	"RecordElement" "{" ("name" name=ID)? ("type" type=[BasicType::Type|EString])? "box" "{" box+=Box ("," box+=Box)* "}"
	//	"}";
	public CCSLLibraryGrammarAccess.RecordElementElements getRecordElementAccess() {
		return gaCCSLLibrary.getRecordElementAccess();
	}
	
	public ParserRule getRecordElementRule() {
		return getRecordElementAccess().getRule();
	}

	//Box returns BasicType::Box:
	//	"Box" "{" "containment" containment=Element "}";
	public CCSLLibraryGrammarAccess.BoxElements getBoxAccess() {
		return gaCCSLLibrary.getBoxAccess();
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}

	//String1 returns BasicType::String:
	//	"StringType" name=ID;
	public CCSLLibraryGrammarAccess.String1Elements getString1Access() {
		return gaCCSLLibrary.getString1Access();
	}
	
	public ParserRule getString1Rule() {
		return getString1Access().getRule();
	}

	//Boolean returns BasicType::Boolean:
	//	"BooleanType" name=ID;
	public CCSLLibraryGrammarAccess.BooleanElements getBooleanAccess() {
		return gaCCSLLibrary.getBooleanAccess();
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Integer returns BasicType::Integer:
	//	"IntegerType" name=ID;
	public CCSLLibraryGrammarAccess.IntegerElements getIntegerAccess() {
		return gaCCSLLibrary.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//Real returns BasicType::Real:
	//	"RealType" name=ID;
	public CCSLLibraryGrammarAccess.RealElements getRealAccess() {
		return gaCCSLLibrary.getRealAccess();
	}
	
	public ParserRule getRealRule() {
		return getRealAccess().getRule();
	}

	//Char returns BasicType::Char:
	//	"CharType" name=ID;
	public CCSLLibraryGrammarAccess.CharElements getCharAccess() {
		return gaCCSLLibrary.getCharAccess();
	}
	
	public ParserRule getCharRule() {
		return getCharAccess().getRule();
	}

	//Record returns BasicType::Record:
	//	"RecordType" name=ID "{" field+=Field ("," field+=Field)* "}";
	public CCSLLibraryGrammarAccess.RecordElements getRecordAccess() {
		return gaCCSLLibrary.getRecordAccess();
	}
	
	public ParserRule getRecordRule() {
		return getRecordAccess().getRule();
	}

	//SequenceType returns BasicType::SequenceType:
	//	"SequenceType" name=ID ":" elementType=[BasicType::PrimitiveType];
	public CCSLLibraryGrammarAccess.SequenceTypeElements getSequenceTypeAccess() {
		return gaCCSLLibrary.getSequenceTypeAccess();
	}
	
	public ParserRule getSequenceTypeRule() {
		return getSequenceTypeAccess().getRule();
	}

	//DiscreteClockType_Impl returns BasicType::DiscreteClockType:
	//	"DiscreteClockType" name=ID;
	public CCSLLibraryGrammarAccess.DiscreteClockType_ImplElements getDiscreteClockType_ImplAccess() {
		return gaCCSLLibrary.getDiscreteClockType_ImplAccess();
	}
	
	public ParserRule getDiscreteClockType_ImplRule() {
		return getDiscreteClockType_ImplAccess().getRule();
	}

	//DenseClockType returns BasicType::DenseClockType:
	//	"DenseClockType" name=ID "{" ("baseUnit" baseUnit=String0)? ("physicalMagnitude" physicalMagnitude=String0)? "}";
	public CCSLLibraryGrammarAccess.DenseClockTypeElements getDenseClockTypeAccess() {
		return gaCCSLLibrary.getDenseClockTypeAccess();
	}
	
	public ParserRule getDenseClockTypeRule() {
		return getDenseClockTypeAccess().getRule();
	}

	//EnumerationType returns BasicType::EnumerationType:
	//	"EnumerationType" "{" ("name" name=ID)? "enumLiteral" "{" enumLiteral+=String0 ("," enumLiteral+=String0)* "}" "}";
	public CCSLLibraryGrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaCCSLLibrary.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//Field returns BasicType::Field:
	//	"Field" "{" ("name" name=ID)? "type" type=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.FieldElements getFieldAccess() {
		return gaCCSLLibrary.getFieldAccess();
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public CCSLLibraryGrammarAccess.EStringElements getEStringAccess() {
		return gaCCSLLibrary.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	////This is only for the kernel.ccslLib !!!
	// SubClock returns KernelRelation::SubClock:
	//	"_SubClock" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.SubClockElements getSubClockAccess() {
		return gaCCSLLibrary.getSubClockAccess();
	}
	
	public ParserRule getSubClockRule() {
		return getSubClockAccess().getRule();
	}

	//Coincidence returns KernelRelation::Coincidence:
	//	"_Coincidence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.CoincidenceElements getCoincidenceAccess() {
		return gaCCSLLibrary.getCoincidenceAccess();
	}
	
	public ParserRule getCoincidenceRule() {
		return getCoincidenceAccess().getRule();
	}

	//Exclusion returns KernelRelation::Exclusion:
	//	"_Exclusion" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.ExclusionElements getExclusionAccess() {
		return gaCCSLLibrary.getExclusionAccess();
	}
	
	public ParserRule getExclusionRule() {
		return getExclusionAccess().getRule();
	}

	//Precedence returns KernelRelation::Precedence:
	//	"_Precedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity" leftEntity=AbstractEntity
	//	"}";
	public CCSLLibraryGrammarAccess.PrecedenceElements getPrecedenceAccess() {
		return gaCCSLLibrary.getPrecedenceAccess();
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}

	//NonStrictPrecedence returns KernelRelation::NonStrictPrecedence:
	//	"_NonStrictPrecedence" "{" ("name" name=ID)? "rightEntity" rightEntity=AbstractEntity "leftEntity"
	//	leftEntity=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictPrecedenceElements getNonStrictPrecedenceAccess() {
		return gaCCSLLibrary.getNonStrictPrecedenceAccess();
	}
	
	public ParserRule getNonStrictPrecedenceRule() {
		return getNonStrictPrecedenceAccess().getRule();
	}

	//UpTo returns KernelExpression::UpTo:
	//	"_UpTo" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clockToFollow"
	//	clockToFollow=AbstractEntity "killerClock" killerClock=AbstractEntity "isPreemptive" isPreemptive=Boolean0 "}";
	public CCSLLibraryGrammarAccess.UpToElements getUpToAccess() {
		return gaCCSLLibrary.getUpToAccess();
	}
	
	public ParserRule getUpToRule() {
		return getUpToAccess().getRule();
	}

	//Defer returns KernelExpression::Defer:
	//	"_Defer" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "baseClock" baseClock=AbstractEntity
	//	"delayClock" delayClock=AbstractEntity "delayPattern" delayPattern=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DeferElements getDeferAccess() {
		return gaCCSLLibrary.getDeferAccess();
	}
	
	public ParserRule getDeferRule() {
		return getDeferAccess().getRule();
	}

	//StrictSampling returns KernelExpression::StrictSampling:
	//	"_StrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.StrictSamplingElements getStrictSamplingAccess() {
		return gaCCSLLibrary.getStrictSamplingAccess();
	}
	
	public ParserRule getStrictSamplingRule() {
		return getStrictSamplingAccess().getRule();
	}

	//Concatenation returns KernelExpression::Concatenation:
	//	"_Concatenation" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "leftClock"
	//	leftClock=AbstractEntity "rightClock" rightClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.ConcatenationElements getConcatenationAccess() {
		return gaCCSLLibrary.getConcatenationAccess();
	}
	
	public ParserRule getConcatenationRule() {
		return getConcatenationAccess().getRule();
	}

	//Union returns KernelExpression::Union:
	//	"_Union" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.UnionElements getUnionAccess() {
		return gaCCSLLibrary.getUnionAccess();
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//Intersection returns KernelExpression::Intersection:
	//	"_Intersection" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1"
	//	clock1=AbstractEntity "clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.IntersectionElements getIntersectionAccess() {
		return gaCCSLLibrary.getIntersectionAccess();
	}
	
	public ParserRule getIntersectionRule() {
		return getIntersectionAccess().getRule();
	}

	//Sup returns KernelExpression::Sup:
	//	"_Sup" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.SupElements getSupAccess() {
		return gaCCSLLibrary.getSupAccess();
	}
	
	public ParserRule getSupRule() {
		return getSupAccess().getRule();
	}

	//Inf returns KernelExpression::Inf:
	//	"_Inf" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "clock1" clock1=AbstractEntity
	//	"clock2" clock2=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.InfElements getInfAccess() {
		return gaCCSLLibrary.getInfAccess();
	}
	
	public ParserRule getInfRule() {
		return getInfAccess().getRule();
	}

	//NonStrictSampling returns KernelExpression::NonStrictSampling:
	//	"_NonStrictSampling" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "sampledClock"
	//	sampledClock=AbstractEntity "samplingClock" samplingClock=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.NonStrictSamplingElements getNonStrictSamplingAccess() {
		return gaCCSLLibrary.getNonStrictSamplingAccess();
	}
	
	public ParserRule getNonStrictSamplingRule() {
		return getNonStrictSamplingAccess().getRule();
	}

	//Wait returns KernelExpression::Wait:
	//	"_Wait" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "waitingClock"
	//	waitingClock=AbstractEntity "waitingValue" waitingValue=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.WaitElements getWaitAccess() {
		return gaCCSLLibrary.getWaitAccess();
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}

	//Discretization returns KernelExpression::Discretization:
	//	"_Discretization" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "denseClock"
	//	denseClock=AbstractEntity "discretizationFactor" discretizationFactor=AbstractEntity "}";
	public CCSLLibraryGrammarAccess.DiscretizationElements getDiscretizationAccess() {
		return gaCCSLLibrary.getDiscretizationAccess();
	}
	
	public ParserRule getDiscretizationRule() {
		return getDiscretizationAccess().getRule();
	}

	//Death returns KernelExpression::Death:
	//	"_Death" "{" ("name" name=ID)? "returnType" returnType=[BasicType::Type|EString] "}";
	public CCSLLibraryGrammarAccess.DeathElements getDeathAccess() {
		return gaCCSLLibrary.getDeathAccess();
	}
	
	public ParserRule getDeathRule() {
		return getDeathAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaCCSLLibrary.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaCCSLLibrary.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCCSLLibrary.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCCSLLibrary.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCCSLLibrary.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCCSLLibrary.getANY_OTHERRule();
	} 
}
