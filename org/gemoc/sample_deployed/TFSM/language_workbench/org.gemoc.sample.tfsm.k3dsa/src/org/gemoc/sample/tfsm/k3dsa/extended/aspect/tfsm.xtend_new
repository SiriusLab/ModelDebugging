package org.gemoc.sample.tfsm.k3dsa.extended.aspect

import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import tfsmextended.EvaluateGuard
import tfsmextended.EventGuard
import tfsmextended.FSMClock
import tfsmextended.FSMEvent
import tfsmextended.Guard
import tfsmextended.NamedElement
import tfsmextended.State
import tfsmextended.TFSM
import tfsmextended.TemporalGuard
import tfsmextended.TimedSystem
import tfsmextended.Transition
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.TFSMAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.StateAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.TransitionAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.NamedElementAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.GuardAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.TemporalGuardAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.EventGuardAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.FSMEventAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.FSMClockAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.TimedSystemAspect.*
import static extension org.gemoc.sample.tfsm.k3dsa.extended.aspect.EvaluateGuardAspect.*
import org.gemoc.sample.tfsm.k3dsa.GroovyRunner

@Aspect(className=TFSM)
class TFSMAspect extends NamedElementAspect {
	// should be added automatically by the dsa, currently introduced directly in the ecore
	// public State currentState;

	def public String Init() {
		if (_self.currentState == null) {

			_self.currentState = _self.initialState;
		}
		println("[" + _self.getClass().getSimpleName() + ":" + _self.getName() + ".Init()]Initialized " + _self.name);
	}
	
	def public void changeCurrentState(State newState)
	{
		_self.currentState = newState
	}
		
}

@Aspect(className=State)
class StateAspect extends NamedElementAspect {
	def public String onEnter() {
		println("[" + _self.getClass().getSimpleName() + ":" + _self.getName() + ".onEnter()]Entering " + _self.name);
	}

	def public String onLeave() {
		println("[" + _self.getClass().getSimpleName() + ":" + _self.getName() + ".onLeave()]Leaving " + _self.name);
	}
}

@Aspect(className=Transition)
class TransitionAspect extends NamedElementAspect {
	def public String fire() {
//		GroovyRunner.executeScript(_self.action, _self);
		_self.source.owningFSM.currentState = _self.target
		println("[" + _self.getClass().getSimpleName() + ":" + _self.getName() + ".fire()]Fired " + _self.name + " -> " +
			_self.action)
	}
}

@Aspect(className=NamedElement)
class NamedElementAspect {
}

@Aspect(className=Guard)
abstract class GuardAspect extends NamedElementAspect {
}

@Aspect(className=TemporalGuard)
class TemporalGuardAspect extends GuardAspect {
}

@Aspect(className=EventGuard)
class EventGuardAspect extends GuardAspect {
}

@Aspect(className=FSMEvent)
class FSMEventAspect extends NamedElementAspect {
}

@Aspect(className=FSMClock)
class FSMClockAspect extends NamedElementAspect {
	//public Integer numberOfTicks;
	public int numberOfTicks

	// Clock tick
	def public String ticks() {
		//GroovyRunner.executeScript("doTick", _self);

		//if (_self.numberOfTicks == null) {
		//	_self.numberOfTicks = 0
		//} else {
			_self.numberOfTicks = _self.numberOfTicks + 1
		//}
		println("[" + _self.getClass().getSimpleName() + ":" + _self.getName() + ".ticks()]New number of ticks : " +
			_self.numberOfTicks.toString())
	}
}

@Aspect(className=TimedSystem)
class TimedSystemAspect extends NamedElementAspect {
	public def void printHello(){
		println("Hello from "+_self.name+"("+_self+")")
	}
}

@Aspect(className=EvaluateGuard)
class EvaluateGuardAspect extends GuardAspect {
	def public Boolean evaluate() {
		var Object res;
//		res = GroovyRunner.executeScript(_self.condition, _self)

		return res as Boolean;
	}
}
