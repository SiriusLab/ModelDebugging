/**
 */
package gee_configuration.provider;

import gee_configuration.util.Gee_configurationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Gee_configurationItemProviderAdapterFactory extends Gee_configurationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Gee_configurationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.GemocConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GemocConfigurationItemProvider gemocConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.GemocConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGemocConfigurationAdapter() {
		if (gemocConfigurationItemProvider == null) {
			gemocConfigurationItemProvider = new GemocConfigurationItemProvider(this);
		}

		return gemocConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.DSAModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSAModelItemProvider dsaModelItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.DSAModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSAModelAdapter() {
		if (dsaModelItemProvider == null) {
			dsaModelItemProvider = new DSAModelItemProvider(this);
		}

		return dsaModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.MoccModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MoccModelItemProvider moccModelItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.MoccModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMoccModelAdapter() {
		if (moccModelItemProvider == null) {
			moccModelItemProvider = new MoccModelItemProvider(this);
		}

		return moccModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.DSEModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSEModelItemProvider dseModelItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.DSEModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSEModelAdapter() {
		if (dseModelItemProvider == null) {
			dseModelItemProvider = new DSEModelItemProvider(this);
		}

		return dseModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.DomainSpecificMetamodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainSpecificMetamodelItemProvider domainSpecificMetamodelItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.DomainSpecificMetamodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainSpecificMetamodelAdapter() {
		if (domainSpecificMetamodelItemProvider == null) {
			domainSpecificMetamodelItemProvider = new DomainSpecificMetamodelItemProvider(this);
		}

		return domainSpecificMetamodelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.LocalResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalResourceItemProvider localResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.LocalResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalResourceAdapter() {
		if (localResourceItemProvider == null) {
			localResourceItemProvider = new LocalResourceItemProvider(this);
		}

		return localResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gee_configuration.DomainSpecificEditor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainSpecificEditorItemProvider domainSpecificEditorItemProvider;

	/**
	 * This creates an adapter for a {@link gee_configuration.DomainSpecificEditor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainSpecificEditorAdapter() {
		if (domainSpecificEditorItemProvider == null) {
			domainSpecificEditorItemProvider = new DomainSpecificEditorItemProvider(this);
		}

		return domainSpecificEditorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gemocConfigurationItemProvider != null) gemocConfigurationItemProvider.dispose();
		if (dsaModelItemProvider != null) dsaModelItemProvider.dispose();
		if (moccModelItemProvider != null) moccModelItemProvider.dispose();
		if (dseModelItemProvider != null) dseModelItemProvider.dispose();
		if (domainSpecificMetamodelItemProvider != null) domainSpecificMetamodelItemProvider.dispose();
		if (localResourceItemProvider != null) localResourceItemProvider.dispose();
		if (domainSpecificEditorItemProvider != null) domainSpecificEditorItemProvider.dispose();
	}

}
