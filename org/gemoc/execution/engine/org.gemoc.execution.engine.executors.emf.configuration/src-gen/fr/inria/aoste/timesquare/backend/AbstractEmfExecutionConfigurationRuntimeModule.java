/*
 * generated by Xtext
 */
package fr.inria.aoste.timesquare.backend;

import java.util.Properties;

import org.eclipse.xtext.Constants;
import org.eclipse.xtext.service.DefaultRuntimeModule;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Manual modifications go to
 * {fr.inria.aoste.timesquare.backend.EmfExecutionConfigurationRuntimeModule}
 */
@SuppressWarnings("all")
public abstract class AbstractEmfExecutionConfigurationRuntimeModule extends DefaultRuntimeModule {

    protected Properties properties = null;

    // contributed by
    // org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
    public java.lang.ClassLoader bindClassLoaderToInstance() {
        return this.getClass().getClassLoader();
    }

    // contributed by
    // org.eclipse.xtext.generator.validation.JavaValidatorFragment
    @org.eclipse.xtext.service.SingletonBinding(eager = true)
    public Class<? extends fr.inria.aoste.timesquare.backend.validation.EmfExecutionConfigurationJavaValidator> bindEmfExecutionConfigurationJavaValidator() {
        return fr.inria.aoste.timesquare.backend.validation.EmfExecutionConfigurationJavaValidator.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider> bindIAntlrTokenFileProvider() {
        return fr.inria.aoste.timesquare.backend.parser.antlr.EmfExecutionConfigurationAntlrTokenFileProvider.class;
    }

    // contributed by org.eclipse.xtext.generator.formatting.FormatterFragment
    public Class<? extends org.eclipse.xtext.formatting.IFormatter> bindIFormatter() {
        return fr.inria.aoste.timesquare.backend.formatting.EmfExecutionConfigurationFormatter.class;
    }

    // contributed by org.eclipse.xtext.generator.generator.GeneratorFragment
    public Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator() {
        return fr.inria.aoste.timesquare.backend.generator.EmfExecutionConfigurationGenerator.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public Class<? extends org.eclipse.xtext.scoping.IGlobalScopeProvider> bindIGlobalScopeProvider() {
        return org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.grammarAccess.GrammarAccessFragment
    public Class<? extends org.eclipse.xtext.IGrammarAccess> bindIGrammarAccess() {
        return fr.inria.aoste.timesquare.backend.services.EmfExecutionConfigurationGrammarAccess.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.IParser> bindIParser() {
        return fr.inria.aoste.timesquare.backend.parser.antlr.EmfExecutionConfigurationParser.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parseTreeConstructor.ParseTreeConstructorFragment
    public Class<? extends org.eclipse.xtext.parsetree.reconstr.IParseTreeConstructor> bindIParseTreeConstructor() {
        return fr.inria.aoste.timesquare.backend.parseTreeConstruction.EmfExecutionConfigurationParsetreeConstructor.class;
    }

    // contributed by org.eclipse.xtext.generator.exporting.SimpleNamesFragment
    public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
        return org.eclipse.xtext.naming.SimpleNameProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {
        return fr.inria.aoste.timesquare.backend.scoping.EmfExecutionConfigurationScopeProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.antlr.ITokenDefProvider> bindITokenDefProvider() {
        return org.eclipse.xtext.parser.antlr.AntlrTokenDefProvider.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.ITokenToStringConverter> bindITokenToStringConverter() {
        return org.eclipse.xtext.parser.antlr.AntlrTokenToStringConverter.class;
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public Class<? extends org.eclipse.xtext.parser.antlr.Lexer> bindLexer() {
        return fr.inria.aoste.timesquare.backend.parser.antlr.internal.InternalEmfExecutionConfigurationLexer.class;
    }

    @Override
    public void configure(Binder binder) {
        this.properties = this.tryBindProperties(binder,
                "fr/inria/aoste/timesquare/backend/EmfExecutionConfiguration.properties");
        super.configure(binder);
    }

    public void configureFileExtensions(Binder binder) {
        if (this.properties == null || this.properties.getProperty(Constants.FILE_EXTENSIONS) == null) {
            binder.bind(String.class).annotatedWith(Names.named(Constants.FILE_EXTENSIONS)).toInstance("emfExecConf");
        }
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public void configureIgnoreCaseLinking(com.google.inject.Binder binder) {
        binder.bindConstant().annotatedWith(org.eclipse.xtext.scoping.IgnoreCaseLinking.class).to(false);
    }

    // contributed by
    // org.eclipse.xtext.generator.scoping.AbstractScopingFragment
    public void configureIScopeProviderDelegate(com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.scoping.IScopeProvider.class)
                .annotatedWith(
                        com.google.inject.name.Names
                                .named(org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
                .to(org.eclipse.xtext.scoping.impl.SimpleLocalScopeProvider.class);
    }

    public void configureLanguageName(Binder binder) {
        binder.bind(String.class).annotatedWith(Names.named(Constants.LANGUAGE_NAME))
                .toInstance("fr.inria.aoste.timesquare.backend.EmfExecutionConfiguration");
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public void configureRuntimeLexer(com.google.inject.Binder binder) {
        binder.bind(org.eclipse.xtext.parser.antlr.Lexer.class)
                .annotatedWith(com.google.inject.name.Names.named(org.eclipse.xtext.parser.antlr.LexerBindings.RUNTIME))
                .to(fr.inria.aoste.timesquare.backend.parser.antlr.internal.InternalEmfExecutionConfigurationLexer.class);
    }

    // contributed by
    // org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment
    public com.google.inject.Provider<fr.inria.aoste.timesquare.backend.parser.antlr.internal.InternalEmfExecutionConfigurationLexer> provideInternalEmfExecutionConfigurationLexer() {
        return org.eclipse.xtext.parser.antlr.LexerProvider
                .create(fr.inria.aoste.timesquare.backend.parser.antlr.internal.InternalEmfExecutionConfigurationLexer.class);
    }

}
