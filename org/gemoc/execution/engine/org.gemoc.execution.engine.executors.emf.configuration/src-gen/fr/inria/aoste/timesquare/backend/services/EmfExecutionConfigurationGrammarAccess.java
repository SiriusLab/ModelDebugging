/*
 * generated by Xtext
 */

package fr.inria.aoste.timesquare.backend.services;

import java.util.List;

import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class EmfExecutionConfigurationGrammarAccess extends AbstractGrammarElementFinder {

    public class EMFExecutionConfigurationElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(
                EmfExecutionConfigurationGrammarAccess.this.getGrammar(), "EMFExecutionConfiguration");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Assignment cImportsAssignment_0 = (Assignment) this.cGroup.eContents().get(0);
        private final RuleCall cImportsImportStatementParserRuleCall_0_0 = (RuleCall) this.cImportsAssignment_0
                .eContents().get(0);
        private final Assignment cJarImportStatementAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cJarImportStatementJarImportStatementParserRuleCall_1_0 = (RuleCall) this.cJarImportStatementAssignment_1
                .eContents().get(0);
        private final Assignment cForcedClockMappingsAssignment_2 = (Assignment) this.cGroup.eContents().get(2);
        private final RuleCall cForcedClockMappingsForcedClockMappingParserRuleCall_2_0 = (RuleCall) this.cForcedClockMappingsAssignment_2
                .eContents().get(0);

        // forcedClockMappings+=ForcedClockMapping*
        public Assignment getForcedClockMappingsAssignment_2() {
            return this.cForcedClockMappingsAssignment_2;
        }

        // ForcedClockMapping
        public RuleCall getForcedClockMappingsForcedClockMappingParserRuleCall_2_0() {
            return this.cForcedClockMappingsForcedClockMappingParserRuleCall_2_0;
        }

        // imports+=ImportStatement+ jarImportStatement=JarImportStatement
        // forcedClockMappings+=ForcedClockMapping*
        public Group getGroup() {
            return this.cGroup;
        }

        // imports+=ImportStatement+
        public Assignment getImportsAssignment_0() {
            return this.cImportsAssignment_0;
        }

        // ImportStatement
        public RuleCall getImportsImportStatementParserRuleCall_0_0() {
            return this.cImportsImportStatementParserRuleCall_0_0;
        }

        // jarImportStatement=JarImportStatement
        public Assignment getJarImportStatementAssignment_1() {
            return this.cJarImportStatementAssignment_1;
        }

        // JarImportStatement
        public RuleCall getJarImportStatementJarImportStatementParserRuleCall_1_0() {
            return this.cJarImportStatementJarImportStatementParserRuleCall_1_0;
        }

        // EMFExecutionConfiguration:
        // imports+=ImportStatement+ jarImportStatement=JarImportStatement
        // forcedClockMappings+=ForcedClockMapping*;
        
        @Override
		public ParserRule getRule() {
            return this.rule;
        }
    }

    public class ForcedClockMappingElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(
                EmfExecutionConfigurationGrammarAccess.this.getGrammar(), "ForcedClockMapping");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cWhenKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cClockAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final CrossReference cClockClockCrossReference_1_0 = (CrossReference) this.cClockAssignment_1
                .eContents().get(0);
        private final RuleCall cClockClockIDTerminalRuleCall_1_0_1 = (RuleCall) this.cClockClockCrossReference_1_0
                .eContents().get(1);
        private final Keyword cDSAKeyword_2 = (Keyword) this.cGroup.eContents().get(2);
        private final Keyword cReturnsKeyword_3 = (Keyword) this.cGroup.eContents().get(3);
        private final Keyword cTrueKeyword_4 = (Keyword) this.cGroup.eContents().get(4);
        private final Keyword cAvoidKeyword_5 = (Keyword) this.cGroup.eContents().get(5);
        private final Assignment cClockToAvoidWhenTrueAssignment_6 = (Assignment) this.cGroup.eContents().get(6);
        private final CrossReference cClockToAvoidWhenTrueClockCrossReference_6_0 = (CrossReference) this.cClockToAvoidWhenTrueAssignment_6
                .eContents().get(0);
        private final RuleCall cClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1 = (RuleCall) this.cClockToAvoidWhenTrueClockCrossReference_6_0
                .eContents().get(1);
        private final Keyword cSemicolonKeyword_7 = (Keyword) this.cGroup.eContents().get(7);

        // "avoid"
        public Keyword getAvoidKeyword_5() {
            return this.cAvoidKeyword_5;
        }

        // clock=[TimeModel::Clock]
        public Assignment getClockAssignment_1() {
            return this.cClockAssignment_1;
        }

        // [TimeModel::Clock]
        public CrossReference getClockClockCrossReference_1_0() {
            return this.cClockClockCrossReference_1_0;
        }

        // ID
        public RuleCall getClockClockIDTerminalRuleCall_1_0_1() {
            return this.cClockClockIDTerminalRuleCall_1_0_1;
        }

        // clockToAvoidWhenTrue=[TimeModel::Clock]
        public Assignment getClockToAvoidWhenTrueAssignment_6() {
            return this.cClockToAvoidWhenTrueAssignment_6;
        }

        // [TimeModel::Clock]
        public CrossReference getClockToAvoidWhenTrueClockCrossReference_6_0() {
            return this.cClockToAvoidWhenTrueClockCrossReference_6_0;
        }

        // ID
        public RuleCall getClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1() {
            return this.cClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1;
        }

        // "DSA"
        public Keyword getDSAKeyword_2() {
            return this.cDSAKeyword_2;
        }

        // "When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid"
        // clockToAvoidWhenTrue=[TimeModel::Clock] ";"
        public Group getGroup() {
            return this.cGroup;
        }

        // "returns"
        public Keyword getReturnsKeyword_3() {
            return this.cReturnsKeyword_3;
        }

        // ForcedClockMapping:
        // "When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid"
        // clockToAvoidWhenTrue=[TimeModel::Clock] ";";
        
        @Override
		public ParserRule getRule() {
            return this.rule;
        }

        // ";"
        public Keyword getSemicolonKeyword_7() {
            return this.cSemicolonKeyword_7;
        }

        // "true"
        public Keyword getTrueKeyword_4() {
            return this.cTrueKeyword_4;
        }

        // "When"
        public Keyword getWhenKeyword_0() {
            return this.cWhenKeyword_0;
        }
    }

    public class ImportStatementElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(
                EmfExecutionConfigurationGrammarAccess.this.getGrammar(), "ImportStatement");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cImportKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cImportURIAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall) this.cImportURIAssignment_1
                .eContents().get(0);
        private final Keyword cSemicolonKeyword_2 = (Keyword) this.cGroup.eContents().get(2);

        // "import" importURI=STRING ";"
        public Group getGroup() {
            return this.cGroup;
        }

        // "import"
        public Keyword getImportKeyword_0() {
            return this.cImportKeyword_0;
        }

        // importURI=STRING
        public Assignment getImportURIAssignment_1() {
            return this.cImportURIAssignment_1;
        }

        // STRING
        public RuleCall getImportURISTRINGTerminalRuleCall_1_0() {
            return this.cImportURISTRINGTerminalRuleCall_1_0;
        }

        // ImportStatement:
        // "import" importURI=STRING ";";
        
        @Override
		public ParserRule getRule() {
            return this.rule;
        }

        // ";"
        public Keyword getSemicolonKeyword_2() {
            return this.cSemicolonKeyword_2;
        }
    }

    public class JarImportStatementElements extends AbstractParserRuleElementFinder {
        private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(
                EmfExecutionConfigurationGrammarAccess.this.getGrammar(), "JarImportStatement");
        private final Group cGroup = (Group) this.rule.eContents().get(1);
        private final Keyword cImportJarKeyword_0 = (Keyword) this.cGroup.eContents().get(0);
        private final Assignment cPathToJarAssignment_1 = (Assignment) this.cGroup.eContents().get(1);
        private final RuleCall cPathToJarSTRINGTerminalRuleCall_1_0 = (RuleCall) this.cPathToJarAssignment_1
                .eContents().get(0);
        private final Keyword cSemicolonKeyword_2 = (Keyword) this.cGroup.eContents().get(2);

        // "importJar" pathToJar=STRING ";"
        public Group getGroup() {
            return this.cGroup;
        }

        // "importJar"
        public Keyword getImportJarKeyword_0() {
            return this.cImportJarKeyword_0;
        }

        // pathToJar=STRING
        public Assignment getPathToJarAssignment_1() {
            return this.cPathToJarAssignment_1;
        }

        // STRING
        public RuleCall getPathToJarSTRINGTerminalRuleCall_1_0() {
            return this.cPathToJarSTRINGTerminalRuleCall_1_0;
        }

        // JarImportStatement:
        // "importJar" pathToJar=STRING ";";
        
        @Override
		public ParserRule getRule() {
            return this.rule;
        }

        // ";"
        public Keyword getSemicolonKeyword_2() {
            return this.cSemicolonKeyword_2;
        }
    }

    private EMFExecutionConfigurationElements pEMFExecutionConfiguration;
    private ForcedClockMappingElements pForcedClockMapping;
    private ImportStatementElements pImportStatement;
    private JarImportStatementElements pJarImportStatement;

    private final Grammar grammar;

    private TerminalsGrammarAccess gaTerminals;

    @Inject
    public EmfExecutionConfigurationGrammarAccess(GrammarProvider grammarProvider, TerminalsGrammarAccess gaTerminals) {
        this.grammar = this.internalFindGrammar(grammarProvider);
        this.gaTerminals = gaTerminals;
    }

    // terminal ANY_OTHER:
    // .;
    public TerminalRule getANY_OTHERRule() {
        return this.gaTerminals.getANY_OTHERRule();
    }

    // EMFExecutionConfiguration:
    // imports+=ImportStatement+ jarImportStatement=JarImportStatement
    // forcedClockMappings+=ForcedClockMapping*;
    public EMFExecutionConfigurationElements getEMFExecutionConfigurationAccess() {
        return (this.pEMFExecutionConfiguration != null) ? this.pEMFExecutionConfiguration
                : (this.pEMFExecutionConfiguration = new EMFExecutionConfigurationElements());
    }

    public ParserRule getEMFExecutionConfigurationRule() {
        return this.getEMFExecutionConfigurationAccess().getRule();
    }

    // ForcedClockMapping:
    // "When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid"
    // clockToAvoidWhenTrue=[TimeModel::Clock] ";";
    public ForcedClockMappingElements getForcedClockMappingAccess() {
        return (this.pForcedClockMapping != null) ? this.pForcedClockMapping
                : (this.pForcedClockMapping = new ForcedClockMappingElements());
    }

    public ParserRule getForcedClockMappingRule() {
        return this.getForcedClockMappingAccess().getRule();
    }

    
    @Override
	public Grammar getGrammar() {
        return this.grammar;
    }

    // terminal ID:
    // "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
    public TerminalRule getIDRule() {
        return this.gaTerminals.getIDRule();
    }

    // ImportStatement:
    // "import" importURI=STRING ";";
    public ImportStatementElements getImportStatementAccess() {
        return (this.pImportStatement != null) ? this.pImportStatement
                : (this.pImportStatement = new ImportStatementElements());
    }

    public ParserRule getImportStatementRule() {
        return this.getImportStatementAccess().getRule();
    }

    // terminal INT returns ecore::EInt:
    // "0".."9"+;
    public TerminalRule getINTRule() {
        return this.gaTerminals.getINTRule();
    }

    // JarImportStatement:
    // "importJar" pathToJar=STRING ";";
    public JarImportStatementElements getJarImportStatementAccess() {
        return (this.pJarImportStatement != null) ? this.pJarImportStatement
                : (this.pJarImportStatement = new JarImportStatementElements());
    }

    public ParserRule getJarImportStatementRule() {
        return this.getJarImportStatementAccess().getRule();
    }

    // terminal ML_COMMENT:
    // "/ *"->"* /";
    public TerminalRule getML_COMMENTRule() {
        return this.gaTerminals.getML_COMMENTRule();
    }

    // terminal SL_COMMENT:
    // "//" !("\n" | "\r")* ("\r"? "\n")?;
    public TerminalRule getSL_COMMENTRule() {
        return this.gaTerminals.getSL_COMMENTRule();
    }

    // terminal STRING:
    // "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") |
    // !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
    // "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
    public TerminalRule getSTRINGRule() {
        return this.gaTerminals.getSTRINGRule();
    }

    public TerminalsGrammarAccess getTerminalsGrammarAccess() {
        return this.gaTerminals;
    }

    // terminal WS:
    // (" " | "\t" | "\r" | "\n")+;
    public TerminalRule getWSRule() {
        return this.gaTerminals.getWSRule();
    }

    protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
        Grammar grammar = grammarProvider.getGrammar(this);
        while (grammar != null) {
            if ("fr.inria.aoste.timesquare.backend.EmfExecutionConfiguration".equals(grammar.getName())) {
                return grammar;
            }
            List<Grammar> grammars = grammar.getUsedGrammars();
            if (!grammars.isEmpty()) {
                grammar = grammars.iterator().next();
            } else {
                return null;
            }
        }
        return grammar;
    }
}
