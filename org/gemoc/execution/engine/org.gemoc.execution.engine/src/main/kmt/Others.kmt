using kermeta::standard::*
using kermeta::io::StdIO => stdio

package engine{
	
	abstract class Solver {
		operation getNext() : Pattern<ClockTick> is abstract
	}
	
	abstract class EventMatcher{
		operation match(ticks : Pattern<ClockTick>) : Collection<DomainSpecificEvent> is abstract
	}
	
	
	class EasySolver inherits Solver {
		method getNext() : Pattern<ClockTick> is do
			result := Pattern<ClockTick>.new
			result.elements := Sequence<ClockTick>.new
			result.elements.add(ClockTick.new)
		end
	}
	
	class EasyEventMatcher inherits EventMatcher{
		method match(ticks : Pattern<ClockTick>, possibleEvents : Collection<DomainSpecificEvent>) : Collection<DomainSpecificEvent> is do
			result := possibleEvents.select{event |
				event.pattern == ticks
			}
		end
	}
	
	// DSE
	class DomainSpecificEvent{
		reference dsa : DomainSpecificAction
		reference pattern : Pattern<ClockTick>
		
		operation consume() : Feedback is do
			result := self.dsa.execute()
		end
	}
	
	// TODO
	class Feedback{
		attribute bool : Boolean
		
		operation initialize() : Feedback is do
			self.bool := false
			result := self
		end
	}
	
	// DSAs are ultimately contained by the metamodel classes.
	class DomainSpecificAction{
		reference owner : org::kermeta::language::structure::Class
		reference operationUniqueName : String
		reference lambda : <org::kermeta::language::structure::Class->Feedback>
		
		operation execute() : Feedback is do
			/*var opToCall : Operation init owner.ownedOperation.detect{op |
				op.uniqueName == operationUniqueName
			}
			opToCall()*/
			
			result := self.lambda(owner)
		end
	}
	
	// TODO Structure matching what is given by Timesquare 
	class Pattern<E> {
		reference elements : Collection<E>
	}
	
	// TODO
	class ClockTick{
		
	}
}