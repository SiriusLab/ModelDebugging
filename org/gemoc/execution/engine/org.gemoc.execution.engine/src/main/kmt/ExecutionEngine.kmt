using kermeta::standard::*
using kermeta::io::StdIO => stdio
using utils::*

package engine{
	class ExecutionEngine inherits Loggable
	{
		attribute round : Integer
		attribute finished : Boolean
		reference solver : Solver
		reference eventMatcher : EventMatcher
		
		operation initialize(solver : Solver, eventMatcher : EventMatcher, level : LogLevel) : Void is do
			self.finished := false
			self.round := 0
			self.solver := solver
			self.eventMatcher := eventMatcher
			self.getLogger("ExecutionEngine", level)
		end
		
		// Checkout all the events in the queue of the MoC and consume them
		operation run() : Void is do
        	logger.info("Starting the execution engine...")
	        
	        // Looping from the clock starting point (0) to the date of the latest scheduled event
	        from self.finished
	        until self.finished == true
	        loop
	        	from var currentEvents : Collection<DomainSpecificEvent> init self.eventMatcher.match(self.solver.getNext())
	        	until currentEvents.empty()
	        	loop
	        		var feedback : Feedback init currentEvents.any.consume()
	        		__dealWithFeedback(feedback)
	        	end
	        
	        	self.round := self.round + 1
	        	if self.round > 100 then self.finished := true end
	        end
	        logger.info("Shutting down the execution engine. Number of rounds: " + self.round.toString())
		end
		
		operation __dealWithFeedback(feedback : Feedback) is do
			
		end
        
        
        method toString() : String is do
        	result := "<ExecutionEngine@["
        			+ " ; round=" + self.round.toString()
        			+ "]>"
        end
	}
	
}