package org.gemoc.execution.engine.events.impl.ecl;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.gemoc.execution.engine.actions.DomainSpecificAction;
import org.gemoc.execution.engine.events.DomainSpecificEvent;

import fr.inria.aoste.trace.EventOccurrence;

/**
 * An implementation of Domain-Specific Events based on ECL. An EclEvent is
 * defined by a combination several CCSL clocks (?) and contains a reference to
 * a Domain-Specific Action that will be executed by the Executor.
 * 
 * @author flatombe
 */
public class EclEvent implements DomainSpecificEvent {
    private DomainSpecificAction action;
    private EObject target;
    private Boolean first;

    // TODO : not sure we need to use EventOccurrence here, maybe SolverClock ?
    // Anyway it should be the CCSL clocks generated by the transformation based
    // on the ECL information.
    private List<EventOccurrence> pattern;

    public EclEvent(DomainSpecificAction action, EObject target, Boolean first) {
        this.action = action;
        this.target = target;
        this.first = first;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.gemoc.execution.engine.events.DomainSpecificEvent#getAction()
     */
    @Override
    public DomainSpecificAction getAction() {
        return this.action;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.gemoc.execution.engine.events.DomainSpecificEvent#getPattern()
     */
    @Override
    public Object getPattern() {
        return this.pattern;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.gemoc.execution.engine.events.DomainSpecificEvent#getTarget()
     */
    @Override
    public EObject getTarget() {
        return this.target;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.gemoc.execution.engine.events.DomainSpecificEvent#isFirst()
     */
    @Override
    public Boolean isFirst() {
        return this.first;
    }

}
