ClockConstraintSystem TrafficControl {
	imports {
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as kernel ;
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as CCSL ;
		import "./TFSMMoC.ccslLib" as TFSMMoC ;
		import "platform:/resource/org.gemoc.execution.engine.example/model/TrafficControl.tfsm" as System ;
	}
	entryBlock mainBlock
	Block mainBlock {
		/*Clock minutes_initialize : clock -> evt_minutes_initialize 
		("System->minutes", "System->minutes::initialize()")
		Clock minutes_ticks : clock -> evt_minutes_ticks
		("System->minutes" , "System->minutes::tick()")
		
        Integer delay = 1;
		Expression initialization = Wait( WaitingClock -> minutes_initialize, WaitingValue -> delay)
		Relation precedence[Precedes](LeftClock->initialization, RightClock->minutes_ticks)
		
		Relation precedence2[Precedes](LeftClock->initialization, RightClock->minutes_initialize)*/
		
		
		Expression switchintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Night_to_Dayintermediate_otherFireFromTheSameState31 = Union
		( Clock1 -> Night_to_Night_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Day_to_Nightintermediate_otherFireFromTheSameState31 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Day_to_Day_fire )
		Expression Green0_to_Red0_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Green0_entering,
		SampledOnTrigger -> switch_occurs )
		Expression Night_to_Nightintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> Night_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Expression Day_to_Dayintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Day_to_Night_fire )
		Expression Red0_to_Green0_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> Red0_entering,
		DelayForClockForCounting -> minutes_tick,
		DelayForDelay -> Red0_to_Green0guardRed0Green0_afterDuration )
		Expression initControl_to_Day_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> initControl_entering,
		DelayForClockForCounting -> minutes_tick,
		DelayForDelay -> initControl_to_DayguardInitControl_afterDuration )
		Expression initSema0_to_Red0_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> initSema0_entering,
		DelayForClockForCounting -> minutes_tick,
		DelayForDelay -> initSema0_to_Red0guardInitSema0Red0_afterDuration )
		Expression initSema0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initSema0_to_Red0_fire,
		Clock2 -> initSema0_to_Red0_fire )
		Expression Nightintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Night_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Expression initControlintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> initControl_to_Day_fire )
		Expression Green0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Green0_to_Red0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Expression Red0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Red0_to_Green0_fire,
		Clock2 -> Red0_to_Green0_fire )
		Expression Dayintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Day_to_Night_fire )
		Expression Nightintermediate_allInputTransition1 = Union
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Green0intermediate_allInputTransition1 = Union
		( Clock1 -> Red0_to_Green0_fire,
		Clock2 -> Red0_to_Green0_fire )
		Expression Red0intermediate_allInputTransition1 = Union
		( Clock1 -> Green0_to_Red0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Expression Dayintermediate_allInputTransition1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Expression Semaphore0intermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> Semaphore0_start )
		Expression Controlintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> Control_start )
		
		
		Relation switchFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> switchintermediate_AllTriggeringOccurrences1,
		ClockB -> switch_occurs )
		Relation Night_to_DayEventTransition_fireWhenRestrueOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> Night_entering,
		EventTransition_Trigger -> guardIsDay_evaluatedTrue,
		EventTransition_Reset -> Night_to_Dayintermediate_otherFireFromTheSameState31,
		EventTransition_Fire -> Night_to_Day_fire )
		Relation Day_to_NightEventTransition_fireWhenRestrueOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> Day_entering,
		EventTransition_Trigger -> GuardIsNight_evaluatedTrue,
		EventTransition_Reset -> Day_to_Nightintermediate_otherFireFromTheSameState31,
		EventTransition_Fire -> Day_to_Night_fire )
		Relation Green0_to_Red0Coincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> Green0_to_Red0_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> Green0_to_Red0_fire )
		Relation Night_to_NightTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> Night_entering,
		TemporalTransition_RefClock -> minutes_tick,
		TemporalTransition_Reset -> Night_to_Nightintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> Night_to_NightguardNightNightguardDelay_afterDuration,
		TemporalTransition_Fire -> Night_to_Night_fire )
		Relation Day_to_DayTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> Day_entering,
		TemporalTransition_RefClock -> minutes_tick,
		TemporalTransition_Reset -> Day_to_Dayintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> Day_to_DayguardDayDayguardDelay_afterDuration,
		TemporalTransition_Fire -> Day_to_Day_fire )
		Relation Red0_to_Green0Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> Red0_to_Green0_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> Red0_to_Green0_fire )
		Relation initControl_to_DayCoincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> initControl_to_Day_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> initControl_to_Day_fire )
		Relation initSema0_to_Red0Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> initSema0_to_Red0_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> initSema0_to_Red0_fire )
		Relation Night_to_DayCoincides_EvaluateGuardWhenEnteringState [ Coincides ]
		( Clock2 -> guardIsDay_evaluate,
		Clock1 -> Night_entering )
		Relation Day_to_NightCoincides_EvaluateGuardWhenEnteringState [ Coincides ]
		( Clock2 -> GuardIsNight_evaluate,
		Clock1 -> Day_entering )
		Relation initSema0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initSema0_entering,
		AlternatesRightClock -> initSema0_leaving )
		Relation NightAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Night_entering,
		AlternatesRightClock -> Night_leaving )
		Relation initControlAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initControl_entering,
		AlternatesRightClock -> initControl_leaving )
		Relation Green0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Green0_entering,
		AlternatesRightClock -> Green0_leaving )
		Relation Red0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Red0_entering,
		AlternatesRightClock -> Red0_leaving )
		Relation DayAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Day_entering,
		AlternatesRightClock -> Day_leaving )
		Relation initSema0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initSema0intermediate_allFiredoutgoingTransition1,
		Clock1 -> initSema0_leaving )
		Relation NightCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Nightintermediate_allFiredoutgoingTransition1,
		Clock1 -> Night_leaving )
		Relat