ClockConstraintSystem TrafficControl {
	imports {
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/kernel.ccslLib" as kernel ;
		import "platform:/plugin/fr.inria.aoste.timesquare.ccslkernel.model/ccsllibrary/CCSL.ccslLib" as CCSL ;
		import "./TFSMMoC.ccslLib" as TFSMMoC ;
		import "platform:/resource/org.gemoc.execution.engine.example/model/TrafficControl.tfsm" as System ;
	}
	entryBlock mainBlock
	Block mainBlock {
		Expression switchintermediate_AllTriggeringOccurrences1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Night_to_Dayintermediate_otherFireFromTheSameState31 = Union
		( Clock1 -> Night_to_Night_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Day_to_Nightintermediate_otherFireFromTheSameState31 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Day_to_Day_fire )
		Expression Green0_to_Red0_SampledOn_eventOccursAfterOrWhileStateEntering = SampledOn
		( SampledOnSampledClock -> Green0_entering,
		SampledOnTrigger -> switch_occurs )
		Expression Night_to_Nightintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> Night_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Expression Day_to_Dayintermediate_otherFireFromTheSameState1 = Union
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Day_to_Night_fire )
		Expression Red0_to_Green0_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> Red0_entering,
		DelayForClockForCounting -> minutes_ticks,
		DelayForDelay -> Red0_to_Green0guardRed0Green0_afterDuration )
		Expression initControl_to_Day_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> initControl_entering,
		DelayForClockForCounting -> minutes_ticks,
		DelayForDelay -> initControl_to_DayguardInitControl_afterDuration )
		Expression initSema0_to_Red0_DelayFor_delayIsExpired_wrt_StateEntering = DelayFor
		( DelayForClockToDelay -> initSema0_entering,
		DelayForClockForCounting -> minutes_ticks,
		DelayForDelay -> initSema0_to_Red0guardInitSema0Red0_afterDuration )
		Expression initSema0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initSema0_to_Red0_fire,
		Clock2 -> initSema0_to_Red0_fire )
		Expression Nightintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Night_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Expression initControlintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> initControl_to_Day_fire )
		Expression Green0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Green0_to_Red0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Expression Red0intermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Red0_to_Green0_fire,
		Clock2 -> Red0_to_Green0_fire )
		Expression Dayintermediate_allFiredoutgoingTransition1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Day_to_Night_fire )
		Expression Nightintermediate_allInputTransition1 = Union
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Night_to_Night_fire )
		Expression Green0intermediate_allInputTransition1 = Union
		( Clock1 -> Red0_to_Green0_fire,
		Clock2 -> Red0_to_Green0_fire )
		Expression Red0intermediate_allInputTransition1 = Union
		( Clock1 -> Green0_to_Red0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Expression Dayintermediate_allInputTransition1 = Union
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Expression Semaphore0intermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> Semaphore0_start )
		Expression Controlintermediate_onlyOneFirst1 = OneTickAndNoMore
		( OneTickAndNoMoreClock -> Control_start )
		Relation switchFSMEventSendReceive_occursWhenSolicitate [ FSMEventSendReceive ]
		( ClockA -> switchintermediate_AllTriggeringOccurrences1,
		ClockB -> switch_occurs )
		Relation Night_to_DayEventTransition_fireWhenRestrueOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> Night_entering,
		EventTransition_Trigger -> guardIsDay_evaluatedTrue,
		EventTransition_Reset -> Night_to_Dayintermediate_otherFireFromTheSameState31,
		EventTransition_Fire -> Night_to_Day_fire )
		Relation Day_to_NightEventTransition_fireWhenRestrueOccursVariousTransition [ EventTransition ]
		( EventTransition_MakeFireable -> Day_entering,
		EventTransition_Trigger -> GuardIsNight_evaluatedTrue,
		EventTransition_Reset -> Day_to_Nightintermediate_otherFireFromTheSameState31,
		EventTransition_Fire -> Day_to_Night_fire )
		Relation Green0_to_Red0Coincides_fireWhenEventOccursOneTransition [ Coincides ]
		( Clock2 -> Green0_to_Red0_SampledOn_eventOccursAfterOrWhileStateEntering,
		Clock1 -> Green0_to_Red0_fire )
		Relation Night_to_NightTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> Night_entering,
		TemporalTransition_RefClock -> minutes_ticks,
		TemporalTransition_Reset -> Night_to_Nightintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> Night_to_NightguardNightNightguardDelay_afterDuration,
		TemporalTransition_Fire -> Night_to_Night_fire )
		Relation Day_to_DayTemporalTransition_fireWhenTemporalGuardHoldsVariousTransition [ TemporalTransition ]
		( TemporalTransition_MakeFireable -> Day_entering,
		TemporalTransition_RefClock -> minutes_ticks,
		TemporalTransition_Reset -> Day_to_Dayintermediate_otherFireFromTheSameState1,
		TemporalTransition_delay -> Day_to_DayguardDayDayguardDelay_afterDuration,
		TemporalTransition_Fire -> Day_to_Day_fire )
		Relation Red0_to_Green0Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> Red0_to_Green0_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> Red0_to_Green0_fire )
		Relation initControl_to_DayCoincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> initControl_to_Day_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> initControl_to_Day_fire )
		Relation initSema0_to_Red0Coincides_fireWhenTemporalGuardHoldsOneTransition [ Coincides ]
		( Clock2 -> initSema0_to_Red0_DelayFor_delayIsExpired_wrt_StateEntering,
		Clock1 -> initSema0_to_Red0_fire )
		Relation Night_to_DayCoincides_EvaluateGuardWhenEnteringState [ Coincides ]
		( Clock2 -> guardIsDay_evaluate,
		Clock1 -> Night_entering )
		Relation Day_to_NightCoincides_EvaluateGuardWhenEnteringState [ Coincides ]
		( Clock2 -> GuardIsNight_evaluate,
		Clock1 -> Day_entering )
		Relation initSema0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initSema0_entering,
		AlternatesRightClock -> initSema0_leaving )
		Relation NightAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Night_entering,
		AlternatesRightClock -> Night_leaving )
		Relation initControlAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> initControl_entering,
		AlternatesRightClock -> initControl_leaving )
		Relation Green0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Green0_entering,
		AlternatesRightClock -> Green0_leaving )
		Relation Red0Alternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Red0_entering,
		AlternatesRightClock -> Red0_leaving )
		Relation DayAlternates_enterOnceBeforeToLeave [ Alternates ]
		( AlternatesLeftClock -> Day_entering,
		AlternatesRightClock -> Day_leaving )
		Relation initSema0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initSema0intermediate_allFiredoutgoingTransition1,
		Clock1 -> initSema0_leaving )
		Relation NightCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Nightintermediate_allFiredoutgoingTransition1,
		Clock1 -> Night_leaving )
		Relation initControlCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> initControlintermediate_allFiredoutgoingTransition1,
		Clock1 -> initControl_leaving )
		Relation Green0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Green0intermediate_allFiredoutgoingTransition1,
		Clock1 -> Green0_leaving )
		Relation Red0Coincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Red0intermediate_allFiredoutgoingTransition1,
		Clock1 -> Red0_leaving )
		Relation DayCoincides_firingATransitionAlternatesWithLeavingState [ Coincides ]
		( Clock2 -> Dayintermediate_allFiredoutgoingTransition1,
		Clock1 -> Day_leaving )
		Relation NightCauses_stateEntering [ Causes ]
		( LeftClock -> Nightintermediate_allInputTransition1,
		RightClock -> Night_entering )
		Relation Green0Causes_stateEntering [ Causes ]
		( LeftClock -> Green0intermediate_allInputTransition1,
		RightClock -> Green0_entering )
		Relation Red0Causes_stateEntering [ Causes ]
		( LeftClock -> Red0intermediate_allInputTransition1,
		RightClock -> Red0_entering )
		Relation DayCauses_stateEntering [ Causes ]
		( LeftClock -> Dayintermediate_allInputTransition1,
		RightClock -> Day_entering )
		Relation guardIsDayTransitionRule_fireEvaluationAndResult [ TransitionRule ]
		( evaluateGuard -> guardIsDay_evaluate,
		resTrue -> guardIsDay_evaluatedTrue,
		resFalse -> guardIsDay_evaluatedFalse )
		Relation GuardIsNightTransitionRule_fireEvaluationAndResult [ TransitionRule ]
		( evaluateGuard -> GuardIsNight_evaluate,
		resTrue -> GuardIsNight_evaluatedTrue,
		resFalse -> GuardIsNight_evaluatedFalse )
		Relation Semaphore0intermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock1 -> initSema0_entering,
		Clock2 -> Red0_entering )
		Relation Semaphore0intermediate_oneStateAtATime1_3 [ Exclusion ]
		( Clock1 -> initSema0_entering,
		Clock2 -> Green0_entering )
		Relation Semaphore0intermediate_oneStateAtATime2_3 [ Exclusion ]
		( Clock1 -> Red0_entering,
		Clock2 -> Green0_entering )
		Relation Controlintermediate_oneStateAtATime1_2 [ Exclusion ]
		( Clock1 -> initControl_entering,
		Clock2 -> Day_entering )
		Relation Controlintermediate_oneStateAtATime1_3 [ Exclusion ]
		( Clock1 -> initControl_entering,
		Clock2 -> Night_entering )
		Relation Controlintermediate_oneStateAtATime2_3 [ Exclusion ]
		( Clock1 -> Day_entering,
		Clock2 -> Night_entering )
		Relation Semaphore0intermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock1 -> initSema0_to_Red0_fire,
		Clock2 -> Red0_to_Green0_fire )
		Relation Semaphore0intermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock1 -> initSema0_to_Red0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Relation Semaphore0intermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock1 -> Red0_to_Green0_fire,
		Clock2 -> Green0_to_Red0_fire )
		Relation Controlintermediate_oneTransitionAtATime1_2 [ Exclusion ]
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> Day_to_Day_fire )
		Relation Controlintermediate_oneTransitionAtATime1_3 [ Exclusion ]
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> Day_to_Night_fire )
		Relation Controlintermediate_oneTransitionAtATime1_4 [ Exclusion ]
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Relation Controlintermediate_oneTransitionAtATime1_5 [ Exclusion ]
		( Clock1 -> initControl_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Relation Controlintermediate_oneTransitionAtATime2_3 [ Exclusion ]
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Day_to_Night_fire )
		Relation Controlintermediate_oneTransitionAtATime2_4 [ Exclusion ]
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Day_fire )
		Relation Controlintermediate_oneTransitionAtATime2_5 [ Exclusion ]
		( Clock1 -> Day_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Relation Controlintermediate_oneTransitionAtATime3_4 [ Exclusion ]
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Night_to_Day_fire )
		Relation Controlintermediate_oneTransitionAtATime3_5 [ Exclusion ]
		( Clock1 -> Day_to_Night_fire,
		Clock2 -> Night_to_Night_fire )
		Relation Controlintermediate_oneTransitionAtATime4_5 [ Exclusion ]
		( Clock1 -> Night_to_Day_fire,
		Clock2 -> Night_to_Night_fire )
		Relation Semaphore0Coincides_firstIsInitialState [ Coincides ]
		( Clock2 -> Semaphore0_start,
		Clock1 -> initSema0_entering )
		Relation ControlCoincides_firstIsInitialState [ Coincides ]
		( Clock2 -> Control_start,
		Clock1 -> initControl_entering )
		Relation Semaphore0Coincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> Semaphore0_start,
		Clock1 -> Semaphore0intermediate_onlyOneFirst1 )
		Relation ControlCoincides_firstOnlyOnce [ Coincides ]
		( Clock2 -> Control_start,
		Clock1 -> Controlintermediate_onlyOneFirst1 )
		Clock switch_occurs : clock -> evt_switch_occurs
		( "System->switch" )
		Clock minutes_ticks : clock -> evt_minutes_ticks
		("System->minutes" , "System->minutes::ticks()")
		Clock Night_to_Day_fire : clock -> evt_Night_to_Day_fire
		( "System->Night_to_Day" ,  "System->Night_to_Day::fire()")
		Clock Day_to_Day_fire : clock -> evt_Day_to_Day_fire
		( "System->Day_to_Day" )
		Clock initControl_to_Day_fire : clock -> evt_initControl_to_Day_fire
		( "System->initControl_to_Day")
		Clock Day_to_Night_fire : clock -> evt_Day_to_Night_fire
		( "System->Day_to_Night" , "System->Day_to_Night::fire()"  )
		Clock Red0_to_Green0_fire : clock -> evt_Red0_to_Green0_fire
		( "System->Red0_to_Green0" ,  "System->Red0_to_Green0::fire()" )
		Clock Night_to_Night_fire : clock -> evt_Night_to_Night_fire
		( "System->Night_to_Night" )
		Clock Green0_to_Red0_fire : clock -> evt_Green0_to_Red0_fire
		( "System->Green0_to_Red0" , "System->Green0_to_Red0::fire()")
		Clock initSema0_to_Red0_fire : clock -> evt_initSema0_to_Red0_fire
		( "System->initSema0_to_Red0" )
		Clock Red0_entering : clock -> evt_Red0_entering
		( "System->Red0" )
		: start
		Clock initControl_entering : clock -> evt_initControl_entering
		( "System->initControl" )
		: start
		Clock initSema0_entering : clock -> evt_initSema0_entering
		( "System->initSema0" )
		: start
		Clock Day_entering : clock -> evt_Day_entering
		( "System->Day" , "System->Day::onEnter()" )
		: start
		Clock Green0_entering : clock -> evt_Green0_entering
		( "System->Green0" )
		: start
		Clock Night_entering : clock -> evt_Night_entering
		( "System->Night" )
		: start
		Clock Red0_leaving : clock -> evt_Red0_leaving
		( "System->Red0" )
		: finish
		Clock initControl_leaving : clock -> evt_initControl_leaving
		( "System->initControl" )
		: finish
		Clock initSema0_leaving : clock -> evt_initSema0_leaving
		( "System->initSema0" )
		: finish
		Clock Day_leaving : clock -> evt_Day_leaving
		( "System->Day" )
		: finish
		Clock Green0_leaving : clock -> evt_Green0_leaving
		( "System->Green0" )
		: finish
		Clock Night_leaving : clock -> evt_Night_leaving
		( "System->Night" )
		: finish
		Clock GuardIsNight_evaluate : clock -> evt_GuardIsNight_evaluate
		( "System->GuardIsNight" , "System->GuardIsNight::evaluate()" )
		Clock guardIsDay_evaluate : clock -> evt_guardIsDay_evaluate
		 ( "System->guardIsDay" , "System->guardIsDay::evaluate()" )
		Clock GuardIsNight_evaluatedTrue : clock -> evt_GuardIsNight_evaluatedTrue
		 ( "System->GuardIsNight" )
		Clock guardIsDay_evaluatedTrue : clock -> evt_guardIsDay_evaluatedTrue
		( "System->guardIsDay" )
		Clock GuardIsNight_evaluatedFalse : clock -> evt_GuardIsNight_evaluatedFalse
		( "System->GuardIsNight" )
		Clock guardIsDay_evaluatedFalse : clock -> evt_guardIsDay_evaluatedFalse
		( "System->guardIsDay" )
		Clock Control_start : clock -> evt_Control_start
		( "System->Control" )
		Clock Semaphore0_start : clock -> evt_Semaphore0_start
		( "System->Semaphore0" )
		Clock Semaphore0_stall : clock -> evt_Semaphore0_stall
		( )
		Clock Control_stall : clock -> evt_Control_stall
		( )
		Integer Night_to_NightguardNightNightguardDelay_afterDuration : int = 6
		Integer Day_to_DayguardDayDayguardDelay_afterDuration : int = 4
		Integer Red0_to_Green0guardRed0Green0_afterDuration : int = 2
		Integer initControl_to_DayguardInitControl_afterDuration : int = 1
		Integer initSema0_to_Red0guardInitSema0Red0_afterDuration : int = 1
	}
}