/*
* generated by Xtext
*/
package fr.inria.aoste.timesquare.backend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EmfExecutionConfigurationGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EMFExecutionConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EMFExecutionConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportStatementParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cForcedClockMappingsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForcedClockMappingsForcedClockMappingParserRuleCall_1_0 = (RuleCall)cForcedClockMappingsAssignment_1.eContents().get(0);
		
		//EMFExecutionConfiguration:
		//	imports+=ImportStatement+ //	jarImportStatement = JarImportStatement
		//	forcedClockMappings+=ForcedClockMapping*;
		public ParserRule getRule() { return rule; }

		//imports+=ImportStatement+ //	jarImportStatement = JarImportStatement
		//forcedClockMappings+=ForcedClockMapping*
		public Group getGroup() { return cGroup; }

		//imports+=ImportStatement+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_0_0() { return cImportsImportStatementParserRuleCall_0_0; }

		//forcedClockMappings+=ForcedClockMapping*
		public Assignment getForcedClockMappingsAssignment_1() { return cForcedClockMappingsAssignment_1; }

		//ForcedClockMapping
		public RuleCall getForcedClockMappingsForcedClockMappingParserRuleCall_1_0() { return cForcedClockMappingsForcedClockMappingParserRuleCall_1_0; }
	}

	public class ForcedClockMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForcedClockMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClockClockCrossReference_1_0 = (CrossReference)cClockAssignment_1.eContents().get(0);
		private final RuleCall cClockClockIDTerminalRuleCall_1_0_1 = (RuleCall)cClockClockCrossReference_1_0.eContents().get(1);
		private final Keyword cDSAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cReturnsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAvoidKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cClockToAvoidWhenTrueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cClockToAvoidWhenTrueClockCrossReference_6_0 = (CrossReference)cClockToAvoidWhenTrueAssignment_6.eContents().get(0);
		private final RuleCall cClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1 = (RuleCall)cClockToAvoidWhenTrueClockCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ForcedClockMapping:
		//	"When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid" clockToAvoidWhenTrue=[TimeModel::Clock] ";";
		public ParserRule getRule() { return rule; }

		//"When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid" clockToAvoidWhenTrue=[TimeModel::Clock] ";"
		public Group getGroup() { return cGroup; }

		//"When"
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }

		//clock=[TimeModel::Clock]
		public Assignment getClockAssignment_1() { return cClockAssignment_1; }

		//[TimeModel::Clock]
		public CrossReference getClockClockCrossReference_1_0() { return cClockClockCrossReference_1_0; }

		//ID
		public RuleCall getClockClockIDTerminalRuleCall_1_0_1() { return cClockClockIDTerminalRuleCall_1_0_1; }

		//"DSA"
		public Keyword getDSAKeyword_2() { return cDSAKeyword_2; }

		//"returns"
		public Keyword getReturnsKeyword_3() { return cReturnsKeyword_3; }

		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }

		//"avoid"
		public Keyword getAvoidKeyword_5() { return cAvoidKeyword_5; }

		//clockToAvoidWhenTrue=[TimeModel::Clock]
		public Assignment getClockToAvoidWhenTrueAssignment_6() { return cClockToAvoidWhenTrueAssignment_6; }

		//[TimeModel::Clock]
		public CrossReference getClockToAvoidWhenTrueClockCrossReference_6_0() { return cClockToAvoidWhenTrueClockCrossReference_6_0; }

		//ID
		public RuleCall getClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1() { return cClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportStatement:
		//	"import" importURI=STRING ";";
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class JarImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JarImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportJarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathToJarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathToJarSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathToJarAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JarImportStatement:
		//	"importJar" pathToJar=STRING ";";
		public ParserRule getRule() { return rule; }

		//"importJar" pathToJar=STRING ";"
		public Group getGroup() { return cGroup; }

		//"importJar"
		public Keyword getImportJarKeyword_0() { return cImportJarKeyword_0; }

		//pathToJar=STRING
		public Assignment getPathToJarAssignment_1() { return cPathToJarAssignment_1; }

		//STRING
		public RuleCall getPathToJarSTRINGTerminalRuleCall_1_0() { return cPathToJarSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	
	
	private EMFExecutionConfigurationElements pEMFExecutionConfiguration;
	private ForcedClockMappingElements pForcedClockMapping;
	private ImportStatementElements pImportStatement;
	private JarImportStatementElements pJarImportStatement;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EmfExecutionConfigurationGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.inria.aoste.timesquare.backend.EmfExecutionConfiguration".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EMFExecutionConfiguration:
	//	imports+=ImportStatement+ //	jarImportStatement = JarImportStatement
	//	forcedClockMappings+=ForcedClockMapping*;
	public EMFExecutionConfigurationElements getEMFExecutionConfigurationAccess() {
		return (pEMFExecutionConfiguration != null) ? pEMFExecutionConfiguration : (pEMFExecutionConfiguration = new EMFExecutionConfigurationElements());
	}
	
	public ParserRule getEMFExecutionConfigurationRule() {
		return getEMFExecutionConfigurationAccess().getRule();
	}

	//ForcedClockMapping:
	//	"When" clock=[TimeModel::Clock] "DSA" "returns" "true" "avoid" clockToAvoidWhenTrue=[TimeModel::Clock] ";";
	public ForcedClockMappingElements getForcedClockMappingAccess() {
		return (pForcedClockMapping != null) ? pForcedClockMapping : (pForcedClockMapping = new ForcedClockMappingElements());
	}
	
	public ParserRule getForcedClockMappingRule() {
		return getForcedClockMappingAccess().getRule();
	}

	//ImportStatement:
	//	"import" importURI=STRING ";";
	public ImportStatementElements getImportStatementAccess() {
		return (pImportStatement != null) ? pImportStatement : (pImportStatement = new ImportStatementElements());
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//JarImportStatement:
	//	"importJar" pathToJar=STRING ";";
	public JarImportStatementElements getJarImportStatementAccess() {
		return (pJarImportStatement != null) ? pJarImportStatement : (pJarImportStatement = new JarImportStatementElements());
	}
	
	public ParserRule getJarImportStatementRule() {
		return getJarImportStatementAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
