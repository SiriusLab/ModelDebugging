/*
* generated by Xtext
*/
grammar InternalEmfExecutionConfiguration;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.inria.aoste.timesquare.backend.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.aoste.timesquare.backend.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.inria.aoste.timesquare.backend.services.EmfExecutionConfigurationGrammarAccess;

}

@parser::members {
 
 	private EmfExecutionConfigurationGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(EmfExecutionConfigurationGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleEMFExecutionConfiguration
entryRuleEMFExecutionConfiguration 
:
{ before(grammarAccess.getEMFExecutionConfigurationRule()); }
	 ruleEMFExecutionConfiguration
{ after(grammarAccess.getEMFExecutionConfigurationRule()); } 
	 EOF 
;

// Rule EMFExecutionConfiguration
ruleEMFExecutionConfiguration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getGroup()); }
(rule__EMFExecutionConfiguration__Group__0)
{ after(grammarAccess.getEMFExecutionConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForcedClockMapping
entryRuleForcedClockMapping 
:
{ before(grammarAccess.getForcedClockMappingRule()); }
	 ruleForcedClockMapping
{ after(grammarAccess.getForcedClockMappingRule()); } 
	 EOF 
;

// Rule ForcedClockMapping
ruleForcedClockMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForcedClockMappingAccess().getGroup()); }
(rule__ForcedClockMapping__Group__0)
{ after(grammarAccess.getForcedClockMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImportStatement
entryRuleImportStatement 
:
{ before(grammarAccess.getImportStatementRule()); }
	 ruleImportStatement
{ after(grammarAccess.getImportStatementRule()); } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportStatementAccess().getGroup()); }
(rule__ImportStatement__Group__0)
{ after(grammarAccess.getImportStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EMFExecutionConfiguration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EMFExecutionConfiguration__Group__0__Impl
	rule__EMFExecutionConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EMFExecutionConfiguration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getImportsAssignment_0()); }
(rule__EMFExecutionConfiguration__ImportsAssignment_0)
{ after(grammarAccess.getEMFExecutionConfigurationAccess().getImportsAssignment_0()); }
)
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getImportsAssignment_0()); }
(rule__EMFExecutionConfiguration__ImportsAssignment_0)*
{ after(grammarAccess.getEMFExecutionConfigurationAccess().getImportsAssignment_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EMFExecutionConfiguration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EMFExecutionConfiguration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EMFExecutionConfiguration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getForcedClockMappingsAssignment_1()); }
(rule__EMFExecutionConfiguration__ForcedClockMappingsAssignment_1)*
{ after(grammarAccess.getEMFExecutionConfigurationAccess().getForcedClockMappingsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForcedClockMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__0__Impl
	rule__ForcedClockMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getWhenKeyword_0()); }

	'When' 

{ after(grammarAccess.getForcedClockMappingAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__1__Impl
	rule__ForcedClockMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockAssignment_1()); }
(rule__ForcedClockMapping__ClockAssignment_1)
{ after(grammarAccess.getForcedClockMappingAccess().getClockAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__2__Impl
	rule__ForcedClockMapping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getDSAKeyword_2()); }

	'DSA' 

{ after(grammarAccess.getForcedClockMappingAccess().getDSAKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__3__Impl
	rule__ForcedClockMapping__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getReturnsKeyword_3()); }

	'returns' 

{ after(grammarAccess.getForcedClockMappingAccess().getReturnsKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__4__Impl
	rule__ForcedClockMapping__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getTrueKeyword_4()); }

	'true' 

{ after(grammarAccess.getForcedClockMappingAccess().getTrueKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__5__Impl
	rule__ForcedClockMapping__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getAvoidKeyword_5()); }

	'avoid' 

{ after(grammarAccess.getForcedClockMappingAccess().getAvoidKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__6__Impl
	rule__ForcedClockMapping__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueAssignment_6()); }
(rule__ForcedClockMapping__ClockToAvoidWhenTrueAssignment_6)
{ after(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForcedClockMapping__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForcedClockMapping__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getForcedClockMappingAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ImportStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportStatement__Group__0__Impl
	rule__ImportStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportStatement__Group__1__Impl
	rule__ImportStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportURIAssignment_1()); }
(rule__ImportStatement__ImportURIAssignment_1)
{ after(grammarAccess.getImportStatementAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImportStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImportStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getImportStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EMFExecutionConfiguration__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getImportsImportStatementParserRuleCall_0_0()); }
	ruleImportStatement{ after(grammarAccess.getEMFExecutionConfigurationAccess().getImportsImportStatementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EMFExecutionConfiguration__ForcedClockMappingsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEMFExecutionConfigurationAccess().getForcedClockMappingsForcedClockMappingParserRuleCall_1_0()); }
	ruleForcedClockMapping{ after(grammarAccess.getEMFExecutionConfigurationAccess().getForcedClockMappingsForcedClockMappingParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__ClockAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockClockCrossReference_1_0()); }
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockClockIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getForcedClockMappingAccess().getClockClockIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getForcedClockMappingAccess().getClockClockCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForcedClockMapping__ClockToAvoidWhenTrueAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueClockCrossReference_6_0()); }
(
{ before(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1()); }
	RULE_ID{ after(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueClockIDTerminalRuleCall_6_0_1()); }
)
{ after(grammarAccess.getForcedClockMappingAccess().getClockToAvoidWhenTrueClockCrossReference_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportStatementAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


