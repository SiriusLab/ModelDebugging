/**
 */
package gemoc_language_designer_conf.provider;

import gemoc_language_designer_conf.util.Gemoc_language_designer_confAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Gemoc_language_designer_confItemProviderAdapterFactory extends Gemoc_language_designer_confAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Gemoc_language_designer_confItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.GemocLanguageDesignerConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GemocLanguageDesignerConfigurationItemProvider gemocLanguageDesignerConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.GemocLanguageDesignerConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGemocLanguageDesignerConfigurationAdapter() {
		if (gemocLanguageDesignerConfigurationItemProvider == null) {
			gemocLanguageDesignerConfigurationItemProvider = new GemocLanguageDesignerConfigurationItemProvider(this);
		}

		return gemocLanguageDesignerConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.ProjectResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectResourceItemProvider projectResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.ProjectResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectResourceAdapter() {
		if (projectResourceItemProvider == null) {
			projectResourceItemProvider = new ProjectResourceItemProvider(this);
		}

		return projectResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.Kermeta2DSAProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Kermeta2DSAProjectItemProvider kermeta2DSAProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.Kermeta2DSAProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKermeta2DSAProjectAdapter() {
		if (kermeta2DSAProjectItemProvider == null) {
			kermeta2DSAProjectItemProvider = new Kermeta2DSAProjectItemProvider(this);
		}

		return kermeta2DSAProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.LanguageDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LanguageDefinitionItemProvider languageDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.LanguageDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLanguageDefinitionAdapter() {
		if (languageDefinitionItemProvider == null) {
			languageDefinitionItemProvider = new LanguageDefinitionItemProvider(this);
		}

		return languageDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.DomainModelProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelProjectItemProvider domainModelProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.DomainModelProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelProjectAdapter() {
		if (domainModelProjectItemProvider == null) {
			domainModelProjectItemProvider = new DomainModelProjectItemProvider(this);
		}

		return domainModelProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.CCSLMoCProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CCSLMoCProjectItemProvider ccslMoCProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.CCSLMoCProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCCSLMoCProjectAdapter() {
		if (ccslMoCProjectItemProvider == null) {
			ccslMoCProjectItemProvider = new CCSLMoCProjectItemProvider(this);
		}

		return ccslMoCProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.AnimatorProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnimatorProjectItemProvider animatorProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.AnimatorProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnimatorProjectAdapter() {
		if (animatorProjectItemProvider == null) {
			animatorProjectItemProvider = new AnimatorProjectItemProvider(this);
		}

		return animatorProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.EMFEcoreProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMFEcoreProjectItemProvider emfEcoreProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.EMFEcoreProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMFEcoreProjectAdapter() {
		if (emfEcoreProjectItemProvider == null) {
			emfEcoreProjectItemProvider = new EMFEcoreProjectItemProvider(this);
		}

		return emfEcoreProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.ODProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ODProjectItemProvider odProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.ODProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createODProjectAdapter() {
		if (odProjectItemProvider == null) {
			odProjectItemProvider = new ODProjectItemProvider(this);
		}

		return odProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.SiriusAnimatorProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SiriusAnimatorProjectItemProvider siriusAnimatorProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.SiriusAnimatorProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSiriusAnimatorProjectAdapter() {
		if (siriusAnimatorProjectItemProvider == null) {
			siriusAnimatorProjectItemProvider = new SiriusAnimatorProjectItemProvider(this);
		}

		return siriusAnimatorProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.ModHelXMoCProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModHelXMoCProjectItemProvider modHelXMoCProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.ModHelXMoCProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModHelXMoCProjectAdapter() {
		if (modHelXMoCProjectItemProvider == null) {
			modHelXMoCProjectItemProvider = new ModHelXMoCProjectItemProvider(this);
		}

		return modHelXMoCProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.DSEProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSEProjectItemProvider dseProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.DSEProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSEProjectAdapter() {
		if (dseProjectItemProvider == null) {
			dseProjectItemProvider = new DSEProjectItemProvider(this);
		}

		return dseProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.ECLProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECLProjectItemProvider eclProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.ECLProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECLProjectAdapter() {
		if (eclProjectItemProvider == null) {
			eclProjectItemProvider = new ECLProjectItemProvider(this);
		}

		return eclProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.TreeEditorProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TreeEditorProjectItemProvider treeEditorProjectItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.TreeEditorProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTreeEditorProjectAdapter() {
		if (treeEditorProjectItemProvider == null) {
			treeEditorProjectItemProvider = new TreeEditorProjectItemProvider(this);
		}

		return treeEditorProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.EcoreModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EcoreModelItemProvider ecoreModelItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.EcoreModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEcoreModelAdapter() {
		if (ecoreModelItemProvider == null) {
			ecoreModelItemProvider = new EcoreModelItemProvider(this);
		}

		return ecoreModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gemoc_language_designer_conf.FileResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileResourceItemProvider fileResourceItemProvider;

	/**
	 * This creates an adapter for a {@link gemoc_language_designer_conf.FileResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileResourceAdapter() {
		if (fileResourceItemProvider == null) {
			fileResourceItemProvider = new FileResourceItemProvider(this);
		}

		return fileResourceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gemocLanguageDesignerConfigurationItemProvider != null) gemocLanguageDesignerConfigurationItemProvider.dispose();
		if (projectResourceItemProvider != null) projectResourceItemProvider.dispose();
		if (kermeta2DSAProjectItemProvider != null) kermeta2DSAProjectItemProvider.dispose();
		if (languageDefinitionItemProvider != null) languageDefinitionItemProvider.dispose();
		if (domainModelProjectItemProvider != null) domainModelProjectItemProvider.dispose();
		if (ccslMoCProjectItemProvider != null) ccslMoCProjectItemProvider.dispose();
		if (animatorProjectItemProvider != null) animatorProjectItemProvider.dispose();
		if (emfEcoreProjectItemProvider != null) emfEcoreProjectItemProvider.dispose();
		if (odProjectItemProvider != null) odProjectItemProvider.dispose();
		if (siriusAnimatorProjectItemProvider != null) siriusAnimatorProjectItemProvider.dispose();
		if (modHelXMoCProjectItemProvider != null) modHelXMoCProjectItemProvider.dispose();
		if (dseProjectItemProvider != null) dseProjectItemProvider.dispose();
		if (eclProjectItemProvider != null) eclProjectItemProvider.dispose();
		if (treeEditorProjectItemProvider != null) treeEditorProjectItemProvider.dispose();
		if (ecoreModelItemProvider != null) ecoreModelItemProvider.dispose();
		if (fileResourceItemProvider != null) fileResourceItemProvider.dispose();
	}

}
